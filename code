settings
{
	main
	{
		Description: "Boss Fight [Rein]\n\nCode: 54JG5\n\nAuthor: Kaneki#22245\n\nSpecial thanks to:\n- Five#21422\n- GabenTheGod#21192"
		Mode Name: "Boss Fight [Rein]"
	}

	lobby
	{
		Map Rotation: Paused
		Match Voice Chat: Enabled
		Max Spectators: 6
		Max Team 1 Players: 6
		Return To Lobby: Never
		Swap Teams After Match: No
	}

	modes
	{
		Elimination
		{
			Draw After Match Time Elapsed With No Tiebreaker: 300
			Reveal Heroes After Match Time Elapsed: 0
			Tiebreaker After Match Time Elapsed: 140
			Time To Capture: 7

			enabled maps
			{
				Necropolis 0
			}
		}

		disabled Team Deathmatch
		{
			Game Length In Minutes: 5
			Mercy Resurrect Counteracts Kills: Off
			Score To Win: 5
			Self Initiated Respawn: Off
		}

		General
		{
			Kill Cam: Off
			Kill Feed: On
			Respawn Time Scalar: 25%
			Spawn Health Packs: Disabled
		}
	}

	heroes
	{
		Team 1
		{
			Jump Vertical Speed: 130%

			Reinhardt
			{
				Barrier Field Recharge Rate: 100%
				Charge Cooldown Time: 100%
				Charge Knockback Scalar: 0%
				Fire Strike Cooldown Time: 83%
				Health: 100%
				Projectile Speed: 200%
				Rocket Hammer Knockback Scalar: 0%
				Ultimate Generation - Combat Earthshatter: 94%
				Ultimate Generation - Passive Earthshatter: 220%
				Ultimate Generation Earthshatter: 100%
			}
		}

		Team 2
		{
			Jump Vertical Speed: 100%

			Reinhardt
			{
				Barrier Field Recharge Rate: 140%
				Charge Cooldown Time: 143%
				Charge Knockback Scalar: 0%
				Fire Strike Cooldown Time: 67%
				Health: 100%
				Projectile Speed: 180%
				Rocket Hammer Knockback Scalar: 0%
				Ultimate Generation - Combat Earthshatter: 0%
				Ultimate Generation - Passive Earthshatter: 0%
				Ultimate Generation Earthshatter: 100%
			}
		}

		General
		{
			Ana
			{
				Ammunition Clip Size Scalar: 67%
				Biotic Grenade Cooldown Time: 125%
				Health: 120%
				Projectile Gravity: 160%
				Projectile Speed: 200%
				Sleep Dart Cooldown Time: 86%
				Ultimate Generation - Combat Nano Boost: 120%
				Ultimate Generation - Passive Nano Boost: 280%
			}

			Ashe
			{
				Coach Gun Cooldown Time: 135%
				Coach Gun Knockback Scalar Enemy: 120%
				Dynamite Fuse Time Scalar: 40%
				Health: 45%
				Projectile Gravity: 128%
				Projectile Speed: 160%
				Ultimate Duration: 85%
				Ultimate Generation - Combat B.O.B.: 128%
				Ultimate Generation - Passive B.O.B.: 299%
			}

			Baptiste
			{
				Ammunition Clip Size Scalar: 83%
				Damage Dealt: 120%
				Healing Dealt: 200%
				Health: 120%
				Immortality Field Cooldown Time: 80%
				Projectile Gravity: 250%
				Projectile Speed: 250%
				Regenerative Burst Cooldown Time: 120%
				Ultimate Generation - Combat Amplification Matrix: 132%
				Ultimate Generation - Passive Amplification Matrix: 308%
			}

			Bastion
			{
				A-36 Tactical Grenade Cooldown Time: 194%
				A-36 Tactical Grenade Knockback Scalar: 150%
				Projectile Speed: 125%
				Reconfigure Cooldown Time: 100%
				Ultimate Generation - Combat Configuration: Artillery: 132%
				Ultimate Generation - Passive Configuration: Artillery: 308%
			}

			Brigitte
			{
				Barrier Shield Recharge Rate: 100%
				Health: 100%
				Repair Pack Cooldown Time: 100%
				Shield Bash Cooldown Time: 160%
				Shield Bash Knockback Scalar: 300%
				Ultimate Generation - Combat Rally: 154%
				Ultimate Generation - Passive Rally: 360%
			}

			Cassidy
			{
				Ammunition Clip Size Scalar: 115%
				Combat Roll Cooldown Time: 150%
				Magnetic Grenade Cooldown Time: 67%
				Ultimate Generation - Combat Deadeye: 105%
				Ultimate Generation - Passive Deadeye: 247%
			}

			D.Va
			{
				Boosters Cooldown Time: 314%
				Boosters Knockback Scalar: 133%
				Defense Matrix Maximum Time: 50%
				Defense Matrix Recharge Rate: 0%
				Micro Missiles Cooldown Time: 3%
				Projectile Speed: 400%
				Self Destruct Knockback Scalar: 0%
				Ultimate Generation - Combat Self-Destruct: 110%
				Ultimate Generation - Passive Self-Destruct: 247%
			}

			Doomfist
			{
				Damage Dealt: 120%
				Health: 80%
				Meteor Strike Knockback Scalar: 0%
				Power Block Cooldown Time: 171%
				Rocket Punch Cooldown Time: 150%
				Rocket Punch Knockback Scalar: 67%
				Seismic Slam Cooldown Time: 100%
				Ultimate Generation - Combat Meteor Strike: 96%
				Ultimate Generation - Passive Meteor Strike: 224%
			}

			Echo
			{
				Ammunition Clip Size Scalar: 83%
				Flight Cooldown Time: 333%
				Focusing Beam Cooldown Time: 150%
				Health: 120%
				Projectile Speed: 160%
				Sticky Bombs Cooldown Time: 200%
				Ultimate Generation - Combat Duplicate: 105%
				Ultimate Generation - Passive Duplicate: 247%
			}

			Genji
			{
				Deflect Cooldown Time: 225%
				Health: 120%
				Jump Vertical Speed: 105%
				Movement Speed: 92%
				Projectile Speed: 125%
				Swift Strike Cooldown Time: 225%
				Ultimate Generation - Combat Dragonblade: 110%
				Ultimate Generation - Passive Dragonblade: 257%
			}

			Hanzo
			{
				Health: 120%
				Lunge Cooldown Time: 325%
				Lunge Distance Scalar: 150%
				Storm Arrows Cooldown Time: 150%
				Storm Arrows Quantity: 6
				Ultimate Generation - Combat Dragonstrike: 96%
				Ultimate Generation - Passive Dragonstrike: 224%
			}

			Illari
			{
				Healing Pylon Cooldown Time: 20%
				Health: 250%
				Outburst Cooldown Time: 186%
				Projectile Gravity: 240%
				Projectile Speed: 200%
				Solar Energy Maximum: 167%
				Solar Energy Recharge Rate: 167%
				Ultimate Generation - Combat Captive Sun: 138%
				Ultimate Generation - Passive Captive Sun: 323%
			}

			Junker Queen
			{
				Carnage Cooldown Time: 137%
				Commanding Shout Cooldown Time: 93%
				Healing Dealt: 375%
				Jagged Blade Cooldown Time: 166%
				Jagged Blade Delay Before Automatic Recall: 100%
				Jagged Blade Knockback Scalar: 50%
				Projectile Speed: 150%
				Ultimate Generation - Combat Rampage: 120%
				Ultimate Generation - Passive Rampage: 280%
			}

			Junkrat
			{
				Concussion Mine Cooldown Time: 228%
				Damage Dealt: 100%
				Damage Received: 50%
				Frag Launcher Knockback Scalar: 0%
				Health: 120%
				Projectile Gravity: 240%
				Projectile Speed: 200%
				Steel Trap Cooldown Time: 120%
				Ultimate Duration: 120%
				Ultimate Generation - Combat RIP-Tire: 110%
				Ultimate Generation - Passive RIP-Tire: 257%
			}

			Kiriko
			{
				Ammunition Clip Size Scalar: 200%
				Health: 120%
				Protection Suzu Cooldown Time: 147%
				Swift Step Cooldown Time: 250%
				Ultimate Generation - Combat Kitsune Rush: 131%
				Ultimate Generation - Passive Kitsune Rush: 307%
			}

			Lifeweaver
			{
				Ammunition Clip Size Scalar: 75%
				Life Grip and Healing Blossom Range: 133%
				Life Grip Cooldown Time: 147%
				Petal Platform Cooldown Time: 150%
				Petal Platform Health: 60%
				Rejuvenating Dash Cooldown Time: 260%
				Rejuvenating Dash Healing: 300%
				Tree of Life Health: 50%
				Ultimate Generation - Combat Tree of Life: 118%
				Ultimate Generation - Passive Tree of Life: 275%
			}

			LÃºcio
			{
				Ammunition Clip Size Scalar: 120%
				Damage Dealt: 200%
				Healing Dealt: 500%
				Health: 120%
				Projectile Speed: 180%
				Soundwave Cooldown Time: 225%
				Soundwave Knockback Scalar: 90%
				Ultimate Generation - Combat Sound Barrier: 138%
				Ultimate Generation - Passive Sound Barrier: 323%
			}

			Mauga
			{
				Ammunition Clip Size Scalar: 80%
				Cardiac Overdrive Cooldown Time: 104%
				Incendiary Chaingun Ignite Damage: 500%
				Incendiary Chaingun Ignite Duration: 33%
				Incendiary Chaingun Ignite Rate: 16%
				Overrun Cooldown Time: 167%
				Overrun Knockback: 150%
				Ultimate Duration: 50%
				Ultimate Generation - Combat Cage Fight: 137%
				Ultimate Generation - Passive Cage Fight: 320%
			}

			Mei
			{
				Ammunition Clip Size Scalar: 100%
				Blizzard Freeze Minimum: 30%
				Blizzard Freeze Rate Scalar: 150%
				Cryo-Freeze Cooldown Time: 133%
				Ice Wall Cooldown Time: 142%
				Projectile Gravity: 500%
				Projectile Speed: 500%
				Ultimate Generation - Combat Blizzard: 100%
				Ultimate Generation - Passive Blizzard: 233%
				Weapon Freeze Minimum: 0%
				Weapon Freeze Rate Scalar: 0%
			}

			Mercy
			{
				Damage Dealt: 125%
				Guardian Angel Cooldown Time: 200%
				Health: 120%
				Projectile Speed: 150%
				Resurrect Cooldown Time: 200%
				Sympathetic Recovery: Off
				Ultimate Generation - Combat Valkyrie: 104%
				Ultimate Generation - Passive Valkyrie: 243%
			}

			Moira
			{
				Biotic Energy Maximum: 500%
				Biotic Energy Recharge Rate: 500%
				Biotic Orb Cooldown Time: 188%
				Fade Cooldown Time: 192%
				Health: 120%
				Projectile Speed: 500%
				Ultimate Generation - Combat Coalescence: 152%
				Ultimate Generation - Passive Coalescence: 355%
			}

			Orisa
			{
				Energy Javelin Cooldown Time: 167%
				Fortify Cooldown Time: 100%
				Javelin Spin Cooldown Time: 200%
				Ultimate Generation - Combat Terra Surge: 111%
				Ultimate Generation - Passive Terra Surge: 260%
			}

			Pharah
			{
				Concussive Blast Cooldown Time: 215%
				Concussive Blast Knockback Scalar: 84%
				Damage Dealt: 125%
				Health: 120%
				Hover Jets Extra Fuel Scalar: 200%
				Hover Jets Maximum Time: 150%
				Hover Jets Recharge Rate: 30%
				Jet Dash Cooldown Time: 175%
				Jump Jet Cooldown Time: 129%
				Rocket Launcher Knockback Scalar: 0%
				Ultimate Generation - Combat Barrage: 114%
				Ultimate Generation - Passive Barrage: 267%
			}

			Ramattra
			{
				Nemesis Form Cooldown Time: 171%
				Projectile Gravity: 225%
				Projectile Speed: 150%
				Ravenous Vortex Cooldown Time: 118%
				Ultimate Duration: 167%
				Ultimate Generation - Combat Annihilation: 120%
				Ultimate Generation - Passive Annihilation: 280%
				Void Barrier Omnic Form Cooldown Time: 62%
			}

			Reaper
			{
				Healing Dealt: 170%
				Health: 100%
				Shadow Step Cooldown Time: 90%
				Ultimate Generation - Combat Death Blossom: 110%
				Ultimate Generation - Passive Death Blossom: 257%
				Wraith Form Cooldown Time: 125%
			}

			Roadhog
			{
				Ammunition Clip Size Scalar: 133%
				Chain Hook Cooldown Time: 150%
				Damage Dealt: 125%
				Pig Pen Cooldown Time: 75%
				Take a Breather Cooldown Time: 66%
				Take a Breather Maximum Time: 100%
				Take a Breather Recharge Rate: 100%
				Ultimate Generation - Combat Whole Hog: 138%
				Ultimate Generation - Passive Whole Hog: 323%
				Whole Hog Knockback Scalar: 0%
			}

			Sigma
			{
				Accretion Knockback Scalar: 120%
				Damage Dealt: 150%
				Experimental Barrier Cooldown Time: 40%
				Kinetic Grasp Cooldown Time: 167%
				Ultimate Generation - Combat Gravitic Flux: 100%
				Ultimate Generation - Passive Gravitic Flux: 233%
			}

			Sojourn
			{
				Disruptor Shot Cooldown Time: 100%
				Health: 120%
				Power Slide Cooldown Time: 229%
				Projectile Speed: 100%
				Ultimate Duration: 125%
				Ultimate Generation - Combat Overclock: 120%
				Ultimate Generation - Passive Overclock: 280%
			}

			Soldier: 76
			{
				Biotic Field Cooldown Time: 100%
				Healing Dealt: 325%
				Health: 120%
				Helix Rockets Cooldown Time: 66%
				Helix Rockets Knockback Scalar: 0%
				Projectile Speed: 130%
				Ultimate Duration: 130%
				Ultimate Generation - Combat Tactical Visor: 178%
				Ultimate Generation - Passive Tactical Visor: 417%
			}

			Sombra
			{
				Hack Cooldown Time: 400%
				Translocator Cooldown Time: 240%
				Ultimate Generation - Combat EMP: 88%
				Ultimate Generation - Passive EMP: 206%
				Virus Cooldown Time: 200%
			}

			Symmetra
			{
				Ammunition Clip Size Scalar: 100%
				Projectile Speed: 250%
				Sentry Turret Cooldown Time: 120%
				Ultimate Generation - Combat Photon Barrier: 96%
				Ultimate Generation - Passive Photon Barrier: 224%
			}

			TorbjÃ¶rn
			{
				Ammunition Clip Size Scalar: 83%
				Deploy Turret Cooldown Time: 133%
				Overload Cooldown Time: 120%
				Overload Duration Scalar: 100%
				Ultimate Generation - Combat Molten Core: 123%
				Ultimate Generation - Passive Molten Core: 285%
			}

			Tracer
			{
				Ammunition Clip Size Scalar: 150%
				Blink Cooldown Time: 250%
				Health: 160%
				Movement Speed: 92%
				Projectile Gravity: 0%
				Projectile Speed: 400%
				Recall Cooldown Time: 150%
				Ultimate Generation - Combat Pulse Bomb: 90%
				Ultimate Generation - Passive Pulse Bomb: 210%
			}

			Widowmaker
			{
				Ammunition Clip Size Scalar: 129%
				Grappling Hook Cooldown Time: 142%
				Health: 150%
				Projectile Speed: 200%
				Ultimate Duration: 70%
				Ultimate Generation - Combat Infra-Sight: 100%
				Ultimate Generation - Passive Infra-Sight: 233%
			}

			Winston
			{
				Barrier Projector Cooldown Time: 100%
				Damage Dealt: 240%
				Jump Pack Acceleration Scalar: 75%
				Jump Pack Cooldown Time: 120%
				Jump Pack Knockback Scalar: 0%
				Primal Rage Melee Knockback Scalar: 70%
				Ultimate Duration: 50%
				Ultimate Generation - Combat Primal Rage: 105%
				Ultimate Generation - Passive Primal Rage: 247%
			}

			Wrecking Ball
			{
				Adaptive Shield Cooldown Time: 113%
				Ammunition Clip Size Scalar: 125%
				Damage Dealt: 140%
				Grappling Claw Cooldown Time: 100%
				Grappling Claw Knockback Scalar: 91%
				Minefield Knockback Scalar: 0%
				Piledriver Cooldown Time: 125%
				Projectile Gravity: 250%
				Projectile Speed: 250%
				Ultimate Generation - Combat Minefield: 96%
				Ultimate Generation - Passive Minefield: 223%
			}

			Zarya
			{
				Ammunition Clip Size Scalar: 120%
				Particle Barrier Cooldown Time: 100%
				Particle Cannon Secondary Knockback Scalar: 0%
				Projected Barrier Cooldown Time: 200%
				Projectile Gravity: 400%
				Projectile Speed: 320%
				Ultimate Generation - Combat Graviton Surge: 118%
				Ultimate Generation - Passive Graviton Surge: 275%
			}

			Zenyatta
			{
				Health: 100%
				Orb of Discord: Off
				Ultimate Generation - Combat Transcendence: 132%
				Ultimate Generation - Passive Transcendence: 308%
			}

			enabled heroes
			{
				Reinhardt
			}
		}
	}

	extensions
	{
		Buff Status Effects
		Debuff Status Effects
		Buff and Debuff Sounds
		Energy Explosion Effects
		Kinetic Explosion Effects
		Explosion Sounds
		Projectiles
	}
}

variables
{
	global:
		0: berserk_cast_time
		1: damage_penalty
		2: impulseboosts_radius
		3: impulseboosts_position
		4: impulseboosts_horizontal_power
		5: impulseboosts_vertical_power
		6: generators_radius
		7: generators_position
		8: heroes_move_speed
		9: ult_charger_percent_change
		10: boss_talents_info
		11: talents_icon
		12: talents_menu_position
		13: max_number_talents
		14: point
		15: teleportation_points
		16: ult_charger_1
		17: ult_charger_2
		18: talents_timer
		19: impulseboosts_cd
		20: generators_counter_3
		21: ult_charger_1_cd
		22: ult_charger_2_cd
		23: generators_cd
		24: generators_capacity
		25: generators_players
		26: resurrections
		27: berserk_duration
		28: berserk_counter
		29: berserk
		30: dead_players
		31: hud
		32: echo_player
		33: echo_taken_heroes
		34: boss_candidates
		35: boss_killed
		36: boss_player
		37: selected_talents
		38: next_boss_color
		39: boss_data
		40: ultimate_charge_players
		41: ultimate_charge
		42: counter_1
		43: capture_players
		44: resistance_multiplier
		45: echo_ultimate
		46: player_ult_charger_1
		47: player_charge_1
		48: player_ult_charger_2
		49: player_charge_2
		50: generators_counter_1
		51: generators_counter_2
		52: impulseboosts_counter
		53: impulseboosts_player
		54: distances_arr
		55: last_boss
		56: players_with_privileges
		57: privileges_counter
		58: total_value_array
		59: candidate_player
		60: next_boss
		61: talents_text_position
		62: iterator
		63: talents_text_id
		64: talents_effect_id
		65: right_position
		66: index

	player:
		0: usage_ultimate
		1: player_received_resurrection
		2: generators_ticks
		3: holding_time
		4: regen_id
		5: number_of_charges
		6: in_combat
		7: healee_in_combat
		8: damage_received
		9: ability_1
		10: ability_2
		11: ability_3
		12: ability_4
		13: ability_5
		14: ability_6
		15: ability_7
		16: usage_ability
		17: support_value
		18: knockback_value
		19: debuff_value
		20: oblective_value
		21: total_value
		22: lucio_health_pool
		23: dmg_received_0
		24: current_hero
		25: effects
		26: res_effects
		27: icon
		28: max_health_percent
		29: health_pool
		30: initial_ms
		32: number_privileges
		33: number_of_points
		34: damage_dealt
		35: barrier_damage_value
		36: own_overhealth
		37: jq_health_pool
		38: hud_boss_candidate
		39: overhealth
		40: i_1
		41: jq_health_pool_id
		42: i_2
		43: lucio_hp_effect
		44: lucio_health_pool_id
		45: event_damage
		46: temp_event_damage
		47: regen_effect
		48: impulse_var
		49: interact_cooldown
		50: huds
		51: teleportation
		52: stored_spawn_position
		53: health_normal
		54: magnetic_grenade
		55: ms_debuff
		56: i_3
		57: petal_platfrom
		58: blocked_damage
		59: mei_wall
		60: temp_ms
		61: ravenous_vortex
		62: ability_8
		63: edited_position
		64: real_ms
		65: ability_9
		66: ability_10
		67: received_dmg_from_charge
		68: debuff_effect
		69: total_ms_debuff
		70: penalty_counter
		71: position
		72: health_armor
		73: health_shields
		74: damage_count_ticks
		75: damage_temp
}

subroutines
{
	0: HealthPoolFromJunkerQueen
	1: HealthPoolFromLucio
	2: BrigitteAbility1
	3: OrisaFixedTeleport
	4: OrisaAbility2
	5: applyCustomHealth
	6: MoiraSetDamage
}

rule("Global Vars, Modifications")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Inspector Recording;
		Global.berserk_cast_time = 3;
		Global.damage_penalty = 0.800;
		Global.ult_charger_1 = Vector(4.325, 9.520, 20.900);
		Global.ult_charger_2 = Vector(4.325, 9.520, -20.900);
		Global.ult_charger_1_cd = 24;
		Global.ult_charger_2_cd = 24;
		Chase Global Variable At Rate(ult_charger_1_cd, 24, 1, None);
		Chase Global Variable At Rate(ult_charger_2_cd, 24, 1, None);
		Global.impulseboosts_radius = 0.900;
		Global.impulseboosts_position = Array(Vector(1, 2.490, 23.900), Vector(1, 2.490, -23.900), Vector(28, 0.490, 0));
		Global.impulseboosts_horizontal_power = Array(20, 20, 30);
		Global.impulseboosts_vertical_power = Array(6.500, 6.500, 9.500);
		Global.generators_radius = 2.500;
		Global.generators_position = Array(Vector(4.325, 9.500, 24.500), Vector(4.325, 9.500, -24.500));
		Global.heroes_move_speed = Array(120, 120, 120, 112.500, 122.500, 135, 107.500, 135, 110, 125, 122.500, 125, 117.500, 127.500, 125,
			110, 127.500, 122.500, 122.500, 120, 125, 120, 120, 125, 127.500, 135, 125, 120, 122.500, 112.500, 120, 117.500, 117.500,
			127.500, 125, 127.500, 122.500, 127.500, 125);
		Global.ult_charger_percent_change = Array(5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
			5, 5, 5, 5, 4, 5, 5, 5, 5);
		Global.boss_talents_info = Empty Array;
		Modify Global Variable(boss_talents_info, Append To Array, Custom String("â¨+15% to max health"));
		Modify Global Variable(boss_talents_info, Append To Array, Custom String(
			"â¨{0} slows down all enemies for 3 sec\n {0} deals 100% more damage (Damage: 225 â 450)", Ability Icon String(Hero(Reinhardt),
			Button(Ultimate))));
		Modify Global Variable(boss_talents_info, Append To Array, Custom String(
			"â¨Resistance to negative effects and knockback is 33% stronger"));
		Modify Global Variable(boss_talents_info, Append To Array, Custom String("â¨{0} cooldown is less by 25% on a miss (4 sec â 3 sec)",
			Ability Icon String(Hero(Reinhardt), Button(Ability 2))));
		Modify Global Variable(boss_talents_info, Append To Array, Custom String(
			"â¨â At 60% and 20% health, {0} goes berserk for 8 sec.\n(+25% move speed, +75% damage to {1}, +33% resistance)",
			Hero Icon String(Hero(Reinhardt)), Ability Icon String(Hero(Reinhardt), Button(Melee)), Global.berserk_cast_time));
		Modify Global Variable(boss_talents_info, Append To Array, Custom String(
			"â¨While charging {0} gets two fire strikes that deal 300 dmg\nââââ{1} cooldown is less by 20% (10 sec â 8 sec)",
			Hero Icon String(Hero(Reinhardt)), Ability Icon String(Hero(Reinhardt), Button(Ability 1))));
		Global.echo_taken_heroes = Empty Array;
		Modify Global Variable(echo_taken_heroes, Append To Array, Hero(Mauga));
		Global.talents_icon = Empty Array;
		Modify Global Variable(talents_icon, Append To Array, Icon String(Heart));
		Modify Global Variable(talents_icon, Append To Array, Ability Icon String(Hero(Reinhardt), Button(Ultimate)));
		Modify Global Variable(talents_icon, Append To Array, Ability Icon String(Hero(Doomfist), Button(Ability 2)));
		Modify Global Variable(talents_icon, Append To Array, Ability Icon String(Hero(Reinhardt), Button(Ability 2)));
		Modify Global Variable(talents_icon, Append To Array, Icon String(Skull));
		Modify Global Variable(talents_icon, Append To Array, Ability Icon String(Hero(Reinhardt), Button(Ability 1)));
		Global.talents_menu_position = Vector(250, 0, (Count Of(Global.boss_talents_info) - 1) * -25 / 2);
		Global.max_number_talents = 1;
		Global.point = 16200;
		Global.teleportation_points = Array(Vector(30, 5, 21.500), Vector(25.500, 3, 17), Vector(22, 1, 13.500), Vector(23, 1, 9), Vector(
			25, 1, 7), Vector(27, 1, 5), Vector(29, 1, 3), Vector(29, 1, -3), Vector(27, 1, -5), Vector(25, 1, -7), Vector(23, 1, -9),
			Vector(22, 1, -13.500), Vector(25.500, 3, -17), Vector(30, 5, -21.500), Vector(4.250, -6, 0), Vector(-4.250, -6, 0));
		Start Assist(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element)), All Players(Team 2), Assisters and Targets);
		Start Damage Modification(All Players(Team 1), All Players(Team 1), 0, Receivers and Damagers);
		Start Damage Modification(Players Within Radius(Players On Hero(Hero(Brigitte), Team 1), 20.500, Team 1, Surfaces), All Players(
			Team 2), Players On Hero(Hero(Brigitte), Team 1).usage_ultimate ? 75 : 100, Receivers Damagers and Damage Percent);
		Start Damage Modification(Players On Hero(Hero(Junkrat), Team 1), All Players(Team 2), 200, Receivers and Damagers);
		Start Healing Modification(Players On Hero(Hero(Brigitte), Team 1), Players On Hero(Hero(Brigitte), Team 1), 0,
			Receivers and Healers);
		Start Healing Modification(Players On Hero(Hero(LÃºcio), Team 1), Players On Hero(Hero(LÃºcio), Team 1), Is Using Ability 2(
			Players On Hero(Hero(LÃºcio), Team 1)) ? 62.500 : 100, Receivers Healers and Healing Percent);
		Start Damage Modification(All Players(Team 2), Players On Hero(Hero(Reinhardt), Team 1), Players On Hero(Hero(Reinhardt), Team 1)
			.usage_ultimate ? 150 : 100, Receivers Damagers and Damage Percent);
		Start Damage Modification(All Players(Team 2), Players On Hero(Hero(Widowmaker), Team 1), Is Using Ultimate(Players On Hero(Hero(
			Widowmaker), Team 1)) ? 66.667 : 100, Receivers Damagers and Damage Percent);
		Start Damage Modification(Players On Hero(Hero(Reinhardt), Team 1), All Players(Team 2), Players On Hero(Hero(Reinhardt), Team 1)
			.dmg_received_0 && !Has Status(Players On Hero(Hero(Reinhardt), Team 1), Frozen) ? 0 : 100,
			Receivers Damagers and Damage Percent);
		Start Damage Modification(Players On Hero(Hero(Brigitte), Team 1), All Players(Team 2), Players On Hero(Hero(Brigitte), Team 1)
			.dmg_received_0 && !Has Status(Players On Hero(Hero(Brigitte), Team 1), Frozen) ? 0 : 100,
			Receivers Damagers and Damage Percent);
		Start Damage Modification(Players On Hero(Hero(Winston), Team 1), All Players(Team 2), Players On Hero(Hero(Winston), Team 1)
			.dmg_received_0 ? 0 : 100, Receivers Damagers and Damage Percent);
	}
}

rule("Generators, Ult Chargers, Impulseboosts")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Is Waiting For Players || Is In Setup) == True;
	}

	actions
	{
		Global.resurrections = 0;
		Create HUD Text(All Players(Team 1), Null, Null, Custom String(" \n\n\n\n"), Top, 0.100, Null, Null, Null, Visible To,
			Default Visibility);
		Global.hud = Last Text ID;
		For Global Variable(generators_counter_3, 0, Count Of(Global.impulseboosts_position), 1);
			Create Effect(Global.talents_timer == 0 ? All Players(All Teams) : Empty Array, Ring, Global.impulseboosts_cd[Evaluate Once(
				Global.generators_counter_3)] <= Total Time Elapsed ? Color(Green) : Color(White), Global.impulseboosts_position[Evaluate Once(
				Global.generators_counter_3)] + Up * 0.500, Global.impulseboosts_radius - Max(0, Global.impulseboosts_cd[Evaluate Once(
				Global.generators_counter_3)] - Total Time Elapsed) / 2.750 * Global.impulseboosts_radius,
				Visible To Position Radius and Color);
			Wait(0.016, Ignore Condition);
		End;
		For Global Variable(generators_counter_3, 1, 5, 1);
			Create Effect(All Players(All Teams), Ring, Global.ult_charger_1_cd >= Evaluate Once(Global.generators_counter_3) * 6 ? Color(Blue)
				: Color(Gray), Global.ult_charger_1 + Up * 0.510, 1 - Global.generators_counter_3 * 0.200, Visible To and Color);
			Create Effect(All Players(All Teams), Ring, Global.ult_charger_2_cd >= Evaluate Once(Global.generators_counter_3) * 6 ? Color(Blue)
				: Color(Gray), Global.ult_charger_2 + Up * 0.510, 1 - Global.generators_counter_3 * 0.200, Visible To and Color);
			Wait(0.016, Ignore Condition);
		End;
		If(Is In Setup);
			Wait Until(Global.talents_timer > 0, 5);
			Global.impulseboosts_cd = Mapped Array(Array(2.750, 2.750, 2.750),
				Current Array Element + Global.talents_timer + Total Time Elapsed);
			Wait Until(Is Game In Progress, 9999);
			Destroy HUD Text(Global.hud);
			Global.generators_cd = Mapped Array(Array(8, 8), Current Array Element + Total Time Elapsed);
			For Global Variable(generators_counter_3, 0, Count Of(Global.generators_position), 1);
				Wait(0.048, Ignore Condition);
				Create Effect(All Players(All Teams), Ring, Global.generators_cd[Evaluate Once(Global.generators_counter_3)
					] < Total Time Elapsed ? Color(Yellow) : Color(Purple), Global.generators_position[Evaluate Once(Global.generators_counter_3)],
					Global.generators_radius, Visible To and Color);
				Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}: {1}% ({2} s)", Icon String(Halo), Round To Integer(
					Global.generators_capacity, Down), Global.generators_cd[Evaluate Once(Global.generators_counter_3)
					] < Total Time Elapsed ? Round To Integer((99.999 - Global.generators_capacity) * 0.600 / Max(1, Count Of(
					Global.generators_players)), Up) : Round To Integer(Global.generators_cd[Evaluate Once(Global.generators_counter_3)
					] - Total Time Elapsed, Up)), Left, 99 + Global.generators_counter_3, Color(White), Null, Global.generators_cd[Evaluate Once(
					Global.generators_counter_3)] < Total Time Elapsed ? Color(Yellow) : Color(Purple), Visible To String and Color,
					Default Visibility);
			End;
			For Global Variable(generators_counter_3, 0, 3, 1);
				Wait(0.048, Ignore Condition);
				Create Effect(Global.point <= Total Time Elapsed ? All Players(All Teams) : Empty Array, Sparkles, Color(Green), Vector(0, -8.500,
					-4 + Global.generators_counter_3 * 4), 4, Visible To);
			End;
		End;
	}
}

rule("Assembling Heroes")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Global.point = 16200;
		Set Match Time(10.800 + Number Of Players(Team 1) * 1.200);
		Global.impulseboosts_cd = Mapped Array(Array(30, 30, 30), Current Array Element + Total Time Elapsed);
		Global.generators_capacity = 0;
		Stop Chasing Global Variable(talents_timer);
		Wait(0.032, Ignore Condition);
		Global.talents_timer = 0;
		Stop Chasing Global Variable(berserk_duration);
		Global.berserk_duration = 0;
		Global.berserk_counter = 0;
		Global.berserk = False;
		Global.dead_players = Empty Array;
		Set Invisible(All Players(All Teams), None);
		Stop Camera(All Players(All Teams));
		Stop Forcing Player Outlines(All Players(All Teams), All Players(All Teams));
		Stop Forcing Player To Be Hero(All Players(All Teams));
		Wait(0.032, Ignore Condition);
		Set Team Score(All Teams, 0);
		All Players(All Teams).player_received_resurrection = False;
		All Players(All Teams).generators_ticks = 0;
		All Players(All Teams).holding_time = 0;
		All Players(All Teams).regen_id = False;
		All Players(All Teams).number_of_charges = False;
		All Players(All Teams).in_combat = False;
		All Players(All Teams).healee_in_combat = False;
		All Players(All Teams).damage_received = Null;
		Stop Scaling Player(All Players(All Teams));
		Stop Scaling Barriers(All Players(All Teams));
		Wait(0.032, Ignore Condition);
		Allow Button(All Players(All Teams), Button(Ability 1));
		Allow Button(All Players(All Teams), Button(Ability 2));
		Allow Button(All Players(All Teams), Button(Primary Fire));
		Allow Button(All Players(All Teams), Button(Secondary Fire));
		Allow Button(All Players(All Teams), Button(Jump));
		Allow Button(All Players(All Teams), Button(Ultimate));
		Set Ability 1 Enabled(All Players(All Teams), True);
		Set Ability 2 Enabled(All Players(All Teams), True);
		Set Primary Fire Enabled(All Players(All Teams), True);
		Set Secondary Fire Enabled(All Players(All Teams), True);
		Set Melee Enabled(All Players(All Teams), True);
		Set Jump Enabled(All Players(All Teams), True);
		Set Crouch Enabled(All Players(All Teams), True);
		Wait(0.032, Ignore Condition);
		Stop Chasing Player Variable(All Players(All Teams), ability_1);
		Stop Chasing Player Variable(All Players(All Teams), ability_2);
		Stop Chasing Player Variable(All Players(All Teams), ability_3);
		Stop Chasing Player Variable(All Players(All Teams), ability_4);
		Stop Chasing Player Variable(All Players(All Teams), ability_5);
		Stop Chasing Player Variable(All Players(All Teams), ability_6);
		Wait(0.032, Ignore Condition);
		Set Max Health(All Players(All Teams), 100);
		Set Damage Dealt(All Players(All Teams), 100);
		Set Healing Dealt(All Players(All Teams), 100);
		Set Healing Received(All Players(All Teams), 100);
		Set Damage Received(All Players(All Teams), 100);
		All Players(All Teams).ability_1 = False;
		All Players(All Teams).ability_2 = False;
		All Players(All Teams).ability_3 = False;
		All Players(All Teams).ability_4 = False;
		All Players(All Teams).ability_5 = False;
		All Players(All Teams).ability_6 = False;
		All Players(All Teams).ability_7 = False;
		All Players(All Teams).ability_8 = False;
		All Players(All Teams).ability_9 = False;
		All Players(All Teams).ability_10 = False;
		All Players(All Teams).usage_ability = False;
		All Players(All Teams).usage_ultimate = False;
		Wait(0.032, Ignore Condition);
		Remove All Health Pools From Player(All Players(All Teams));
		Destroy All Effects;
		Destroy All HUD Text;
		Destroy All Progress Bar In-World Text;
		Destroy All In-World Text;
		Wait(0.032, Ignore Condition);
		Stop All Heal Over Time(All Players(All Teams));
		Stop All Damage Over Time(All Players(All Teams));
		Set Knockback Dealt(All Players(All Teams), 100);
		Set Knockback Received(All Players(All Teams), 100);
		Set Ultimate Ability Enabled(All Players(All Teams), True);
		Stop Forcing Throttle(All Players(All Teams));
		Wait(0.032, Ignore Condition);
		Reset Player Hero Availability(All Players(All Teams));
		Destroy All Progress Bar HUD Text;
		Set Projectile Speed(All Players(All Teams), 100);
		Set Gravity(All Players(All Teams), 100);
		Set Jump Vertical Speed(All Players(All Teams), 100);
		Stop Holding Button(All Players(All Teams), Button(Secondary Fire));
		Wait(0.032, Ignore Condition);
		Destroy All Icons;
		Stop Accelerating(All Players(All Teams));
		Enable Movement Collision With Players(All Players(All Teams));
		Set Aim Speed(All Players(All Teams), 100);
		Enable Hero HUD(All Players(All Teams));
		Enable Game Mode HUD(All Players(All Teams));
		Clear Status(All Players(All Teams), Rooted);
		Clear Status(All Players(All Teams), Invincible);
		Wait(0.032, Ignore Condition);
		All Players(All Teams).support_value = Null;
		All Players(All Teams).knockback_value = Null;
		All Players(All Teams).debuff_value = Null;
		All Players(All Teams).oblective_value = Null;
		All Players(All Teams).total_value = Null;
		All Players(All Teams).lucio_health_pool = Null;
		All Players(All Teams).dmg_received_0 = False;
		Wait(0.032, Ignore Condition);
		Global.echo_player = Null;
		Global.echo_taken_heroes = Empty Array;
		Modify Global Variable(echo_taken_heroes, Append To Array, Hero(Mauga));
		Modify Global Variable(echo_taken_heroes, Append To Array, Hero(Sigma));
	}
}

rule("Setup, Move Speed")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		(Is In Setup || Hero Of(Event Player) != Event Player.current_hero) == True;
		Array Contains(All Heroes, Hero Of(Event Player)) == True;
	}

	actions
	{
		Event Player.usage_ultimate = False;
		Destroy Effect(Event Player.effects);
		Destroy Effect(Event Player.res_effects);
		Destroy HUD Text(Event Player.huds[0]);
		Destroy In-World Text(Event Player.huds[0]);
		Destroy HUD Text(Event Player.huds[1]);
		Destroy In-World Text(Event Player.huds[1]);
		Destroy Progress Bar HUD Text(Event Player.huds[1]);
		Destroy HUD Text(Event Player.huds[2]);
		Destroy In-World Text(Event Player.huds[2]);
		Destroy HUD Text(Event Player.huds[3]);
		Destroy In-World Text(Event Player.huds[3]);
		Destroy HUD Text(Event Player.huds[4]);
		Destroy Progress Bar In-World Text(Event Player.huds[5]);
		Stop Forcing Player Outlines(Event Player, All Players(All Teams));
		Stop Modifying Hero Voice Lines(Event Player);
		Remove All Health Pools From Player(Event Player);
		Destroy Icon(Event Player.icon);
		Stop Facing(Event Player);
		Stop Camera(Event Player);
		Stop Forcing Throttle(Event Player);
		Stop Accelerating(Event Player);
		Set Gravity(Event Player, 100);
		Set Projectile Gravity(Event Player, 100);
		Set Jump Vertical Speed(Event Player, 100);
		Set Crouch Enabled(Event Player, True);
		Set Jump Enabled(Event Player, True);
		Set Melee Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Allow Button(Event Player, Button(Ability 1));
		Allow Button(Event Player, Button(Ability 2));
		Allow Button(Event Player, Button(Ultimate));
		Set Projectile Speed(Event Player, 100);
		Set Healing Dealt(Event Player, 100);
		Set Healing Received(Event Player, 100);
		Stop Chasing Player Variable(Event Player, ability_1);
		Stop Chasing Player Variable(Event Player, ability_2);
		Stop Chasing Player Variable(Event Player, ability_3);
		Stop Chasing Player Variable(Event Player, ability_4);
		Stop Chasing Player Variable(Event Player, ability_5);
		Stop Chasing Player Variable(Event Player, ability_6);
		Event Player.ability_1 = False;
		Event Player.ability_2 = False;
		Event Player.ability_3 = False;
		Event Player.ability_4 = False;
		Event Player.ability_5 = False;
		Event Player.ability_6 = False;
		Event Player.ability_7 = False;
		Event Player.ability_8 = False;
		If(Hero Of(Event Player) == Hero(D.Va));
			Skip If(Global.echo_player == Event Player, 8);
			Event Player.max_health_percent = 1;
			Set Max Health(Event Player, Event Player.max_health_percent);
			Start Forcing Player To Be Hero(Event Player, Random Value In Array(Filtered Array(Array(Hero(Ashe), Hero(Cassidy), Hero(Doomfist),
				Hero(Genji), Hero(Hanzo), Hero(Kiriko), Hero(Mei), Hero(Sojourn), Hero(Tracer), Hero(Widowmaker)), !Is Hero Being Played(
				Current Array Element, Team 1))));
			Wait(0.016, Ignore Condition);
			Remove All Health Pools From Player(Event Player);
			Start Forcing Player To Be Hero(Event Player, Hero(D.Va));
			Event Player.max_health_percent = 1;
			Set Max Health(Event Player, Event Player.max_health_percent);
			Add Health Pool To Player(Event Player, Health, Is In Alternate Form(Event Player) ? 298.250 : 294.250, True, True);
			Event Player.health_pool[0] = Last Created Health Pool;
			Skip If(Global.echo_player == Event Player, 5);
			Wait(0.016, Ignore Condition);
			Stop Forcing Player To Be Hero(Event Player);
		Else;
			Set Max Health(Event Player, 100);
		End;
		Set Damage Dealt(Event Player, 100);
		Set Damage Received(Event Player, 100);
		Stop Scaling Barriers(Event Player);
		Stop Scaling Player(Event Player);
		Event Player.current_hero = Hero Of(Event Player);
		Event Player.initial_ms = Global.heroes_move_speed[Index Of Array Value(All Heroes, Hero Of(Event Player))];
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("HUDs")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Create HUD Text(Local Player, Null, Custom String(" Hold [{0}] + [{1}]\n to {2}", Input Binding String(Button(Reload)),
			Input Binding String(Button(Melee)), Array Contains(Global.boss_candidates, Local Player) ? Custom String(
			"remove yourself\nfrom [next boss] list") : Custom String("add yourself\nto the [next boss] list")), Null, Right, -0.250, Null,
			Color(Blue), Color(Blue), Visible To and String, Default Visibility);
		disabled Create HUD Text(Local Player.holding_time ? Local Player : Empty Array, Null, Custom String("{0}{1}", String Slice(Custom String(
			"â â â â â â â â â â â â "), 0, Round To Integer(Local Player.holding_time / 0.080, Down)), String Slice(Custom String("â¡â¡â¡â¡â¡â¡â¡â¡â¡â¡â¡â¡"), 0,
			12 - Round To Integer(Local Player.holding_time / 0.080, Down))), Null, Right, 0, Color(Green), Color(Green), Null,
			Visible To and String, Default Visibility);
		Create HUD Text(Local Player.holding_time ? Local Player : Empty Array, Custom String("{0}{1}", String Slice(Custom String(
			"â â â â â â â "), 0, Round To Integer(Local Player.holding_time / 0.128, Down)), String Slice(Custom String("â£â¡â¡â¡â¡â¡â¡"), 0,
			7 - Round To Integer(Local Player.holding_time / 0.128, Down))), Null, Null, Right, 0, Color(Green), Null, Null,
			Visible To and String, Default Visibility);
		Global.boss_candidates = Empty Array;
		Global.point = Total Time Elapsed + 140;
		Global.boss_killed = False;
		Wait(0.016, Ignore Condition);
		Create HUD Text(All Players(All Teams), Null, String("{0} {1}", String(""), String("")), Null, Left, -11, Null, Null, Null,
			Visible To, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("â¨[{0} : {1} damage]", Ability Icon String(Hero(Reinhardt), Button(
			Melee)), 125 * (Global.berserk ? 2.200 : 1) + 75), Null, Left, -10, Null, Color(Yellow), Null, Visible To and String,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("â¨[{0} : {1} damage]", Ability Icon String(Hero(Reinhardt), Button(
			Ability 1)), 600), Null, Left, -9, Null, Color(Yellow), Null, Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("â¨[{0} : {1} damage]", Ability Icon String(Hero(Reinhardt), Button(
			Ability 2)), 400), Null, Left, -8, Null, Color(Yellow), Null, Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("â¨[{0} : {1} damage]", Ability Icon String(Hero(Reinhardt), Button(
			Ultimate)), Array Contains(Global.selected_talents, 1) ? 450 : 225), Null, Left, -7, Null, Color(Yellow), Null,
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("â¨{0} Resurrections: {1}", Icon String(Halo), Global.resurrections),
			Null, Left, -6, Null, Color(Green), Color(White), Visible To and String, Default Visibility);
		Wait(0.016, Ignore Condition);
		Create HUD Text(All Players(All Teams), Null, Custom String("_________________________"), Null, Left, -5, Null, Color(White), Null,
			Visible To, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String(" "), Null, Left, -4, Null, Null, Null, Visible To,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("{0} Players Efficiency {0}", Icon String(Fire)), Null, Left, -3, Null,
			Color(Blue), Color(Blue), Visible To, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("_________________________"), Null, Left, -2, Null, Color(White), Null,
			Visible To, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, String("{0} {1}", String(""), String("")), Null, Left, -1, Null, Null, Null,
			Visible To, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String(" \n"), Left, 11, Null, Null, Null, Visible To,
			Default Visibility);
		Wait(0.016, Ignore Condition);
		Create HUD Text(All Players(All Teams), Null, Custom String("Next boss"), Null, Left, 12, Null, Color(Yellow), Null, Visible To,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("_________________________"), Null, Left, 12.250, Null, Color(White),
			Null, Visible To, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, String("{0} {1}", String(""), String("")), Null, Left, 12.500, Null, Null, Null,
			Visible To, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String(" \n\n\n"), Left, 98, Null, Null, Null, Visible To,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Null, String("{0} {1}", String(""), String("")), Null, Right, -11, Null, Null, Null,
			Visible To, Default Visibility);
		Wait(0.016, Ignore Condition);
		If(Global.max_number_talents == 1);
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("â¨{0} talent: {1}", Hero Icon String(Hero(Reinhardt)),
				Global.talents_icon[Global.selected_talents[0]]), Right, -3, Color(Red), Null, Color(Red), Visible To, Default Visibility);
		Else;
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("â¨{0} talents: {1}", Hero Icon String(Hero(Reinhardt)),
				Custom String("{0} {1} {2}", Global.talents_icon[Global.selected_talents[0]], Global.talents_icon[Global.selected_talents[1]],
				Global.max_number_talents == 3 ? Global.talents_icon[Global.selected_talents[2]] : Custom String(""))), Right, -3, Color(Red),
				Null, Color(Red), Visible To, Default Visibility);
		End;
		Create HUD Text(All Players(All Teams), Null, String("{0} {1}", String(""), String("")), Null, Right, -0.500, Null, Null, Null,
			Visible To, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, String("{0} {1}", String(""), String("")), Null, Top, -1, Null, Null, Null,
			Visible To, Default Visibility);
		If(Array Contains(Global.selected_talents, 4));
			Create Progress Bar HUD Text(Global.berserk ? Empty Array : All Players(All Teams), Normalized Health(Players In Slot(0, Team 2))
				* 100, Custom String("ââââââââââââ{0}âââââââââââââââââ {0}  âââââââââââââââââââââ", Icon String(Skull)), Top, 0.500, Color(
				Red), Color(White), Visible To Values and Color, Default Visibility);
		Else;
			Create HUD Text(All Players(All Teams), Null, String("{0} {1}", String(""), String("")), Null, Top, -2, Null, Null, Null,
				Visible To, Default Visibility);
			Create HUD Text(All Players(All Teams), Normalized Health(Players In Slot(0, Team 2)) < 0.100 ? Custom String("{0} hp",
				Round To Integer(Health(Players In Slot(0, Team 2)), Up)) : Custom String("{0}% hp", Round To Integer(Normalized Health(
				Players In Slot(0, Team 2)) * 100, Up)), Null, Null, Top, 0.500, Color(Red), Null, Null, Visible To and String,
				Default Visibility);
		End;
	}
}

rule("Player Stats")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		If(Event Player.number_privileges);
			Event Player.number_privileges += 1;
			Event Player.number_privileges -= 1;
			Event Player.support_value += Event Player.number_of_points;
			disabled Event Player.number_of_points = Event Player.support_value;
		Else;
			Event Player.number_of_points = 0;
		End;
		Create HUD Text(All Players(All Teams), Null, Custom String("{0} {1} - {2}", Hero Icon String(Hero Of(Event Player)), Event Player,
			Round To Integer(Event Player.total_value, Up)), Null, Left, Index Of Array Value(Sorted Array(Mapped Array(Filtered Array(
			All Players(Team 1), Has Spawned(Current Array Element)), Current Array Element.total_value), Current Array Element * -1),
			Event Player.total_value), Null, Global.boss_killed && Global.next_boss_color == Event Player ? Color(Red) : (
			Event Player.number_privileges ? Color(Green) : Color(White)), Null, Visible To Sort Order String and Color,
			Default Visibility);
		Event Player.damage_dealt = Player Stat(Event Player, Hero Damage Dealt);
		Event Player.barrier_damage_value = Player Stat(Event Player, Barrier Damage Dealt);
		Skip If(Event Player.damage_dealt, 7);
		Damage(Players In Slot(0, Team 2), Event Player, 0.100);
		Wait(0.016, Ignore Condition);
		Heal(Players In Slot(0, Team 2), Null, 1);
		While(Is Game In Progress && !Event Player.damage_dealt);
			Event Player.damage_dealt = Player Stat(Event Player, Hero Damage Dealt);
			Wait(0.016, Ignore Condition);
		End;
		Abort If(Event Player.barrier_damage_value);
		While(Is Game In Progress && !Event Player.barrier_damage_value);
			Event Player.barrier_damage_value = Player Stat(Event Player, Barrier Damage Dealt);
			Wait(0.016, Ignore Condition);
		End;
	}
}

rule("Total Value")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		(Is Game In Progress || Is Between Rounds) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Event Player.total_value = Player Stat(Event Player, Hero Damage Dealt) - Event Player.damage_dealt + (Player Stat(Event Player,
			Barrier Damage Dealt) - Event Player.barrier_damage_value)
			* 0.500 + Event Player.support_value + Event Player.knockback_value + Event Player.debuff_value + Event Player.oblective_value;
		Skip If(!Global.boss_killed, 1);
		Global.next_boss_color = First Of(Sorted Array(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element)),
			Current Array Element.total_value));
		Wait(0.112, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Objective Value")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is On Objective(Event Player) == True;
	}

	actions
	{
		Event Player.oblective_value = Min(600, Event Player.oblective_value + (Number Of Players On Objective(Team 2) ? 2 : 1) * (
			4.800 / Number Of Players On Objective(Team 1)));
		Wait(0.080, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Knockback Value")
{
	event
	{
		Player Dealt Knockback;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Event Ability != Button(Melee);
		Event Player != Victim;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Ashe) && Event Ability == Button(Ability 1));
			Event Player.knockback_value += 125;
		Else If(Hero Of(Event Player) == Hero(D.Va));
			Event Player.knockback_value += Event Ability == Button(Ability 1) ? 125 : (Event Ability == Button(Ultimate) ? 200 : 0);
		Else If(Hero Of(Event Player) == Hero(Junkrat) && Event Ability == Button(Ability 1));
			Event Player.knockback_value += 100;
		Else If(Hero Of(Event Player) == Hero(Winston) && Event Ability == Button(Primary Fire));
			Event Player.knockback_value += 75;
		End;
	}
}

rule("Support Value")
{
	event
	{
		Player Received Healing;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Event Player != Healer;
	}

	actions
	{
		Healer.support_value += Event Healing * (Event Player.healee_in_combat ? 1.500 : 0.500);
	}
}

rule("Overhealth")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Health(Event Player) > 0;
	}

	actions
	{
		Event Player.own_overhealth = Max(Health Of Type(Event Player, Health) - (Max Health Of Type(Event Player, Health) - Max(0,
			Max Health(Event Player) - Health(Event Player) - Max Health Of Type(Event Player, Shields) - Max Health Of Type(Event Player,
			Armor))) - Event Player.jq_health_pool - Event Player.lucio_health_pool, 0);
		Wait(0.016, Ignore Condition);
		Event Player.overhealth = Health Of Type(Event Player, Health) - (Max Health Of Type(Event Player, Health) - Max(0, Max Health(
			Event Player) - Health(Event Player) - Max Health Of Type(Event Player, Shields) - Max Health Of Type(Event Player, Armor)))
			- Event Player.own_overhealth;
		If(Event Player.overhealth > 0);
			If(
				Event Player.overhealth - Event Player.jq_health_pool - Event Player.lucio_health_pool >= Event Player.max_health_percent * 0.500 - 0.002 && Event Player.overhealth - Event Player.jq_health_pool - Event Player.lucio_health_pool <= Event Player.max_health_percent * 0.500 + 0.002);
				Set Player Health(Event Player, Health(Event Player) - Event Player.max_health_percent * 0.500);
				Start Rule(HealthPoolFromJunkerQueen, Do Nothing);
			Else If(
					Event Player.overhealth - Event Player.jq_health_pool >= Event Player.max_health_percent * 7.500 - Event Player.max_health_percent * 0.030 && Event Player.overhealth - Event Player.jq_health_pool <= Event Player.max_health_percent * 7.500);
				Set Player Health(Event Player, Health(Event Player) - (
					Event Player.max_health_percent * 7.500 - Event Player.max_health_percent * 0.020));
				Start Rule(HealthPoolFromLucio, Do Nothing);
			End;
		End;
		Loop If Condition Is True;
	}
}

rule("Health Pool from Junker Queen | Subroutine")
{
	event
	{
		Subroutine;
		HealthPoolFromJunkerQueen;
	}

	actions
	{
		Event Player.jq_health_pool = 100;
		Add Health Pool To Player(Event Player, Health, Event Player.jq_health_pool, False, False);
		Event Player.jq_health_pool_id = Last Created Health Pool;
		Wait(3, Ignore Condition);
		Remove Health Pool From Player(Event Player.jq_health_pool_id);
		Event Player.jq_health_pool = 0;
	}
}

rule("Brigitte Ability 1 | Subroutine")
{
	event
	{
		Subroutine;
		BrigitteAbility1;
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion Sound, False, Event Player, 100);
		Event Player.initial_ms += 20;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait(2, Ignore Condition);
		Event Player.initial_ms -= 20;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Health Pool from Lucio | Subroutine")
{
	event
	{
		Subroutine;
		HealthPoolFromLucio;
	}

	actions
	{
		Create Effect(All Players(All Teams), LÃºcio Sound Barrier Protected Effect, Color(Team 1), Event Player, 0, Visible To);
		Event Player.lucio_hp_effect = Last Created Entity;
		Event Player.lucio_health_pool = 600;
		Add Health Pool To Player(Event Player, Health, Event Player.lucio_health_pool, False, False);
		Event Player.lucio_health_pool_id = Last Created Health Pool;
		Wait(3, Ignore Condition);
		While(Event Player.lucio_health_pool > 0);
			Event Player.lucio_health_pool = Max(0, Event Player.lucio_health_pool - 20);
			If(Event Player.lucio_health_pool > 1);
				Remove Health Pool From Player(Event Player.lucio_health_pool_id);
				Add Health Pool To Player(Event Player, Health, Event Player.lucio_health_pool, False, False);
				Event Player.lucio_health_pool_id = Last Created Health Pool;
				Wait(0.096, Ignore Condition);
			End;
		End;
		Destroy Effect(Event Player.lucio_hp_effect);
		Remove Health Pool From Player(Event Player.lucio_health_pool_id);
		Event Player.lucio_health_pool = 0;
	}
}

rule("Player Took Damage")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		Team Of(Attacker) != Team Of(Victim);
	}

	actions
	{
		Event Player.event_damage = Event Damage;
		If(Event Player.lucio_health_pool > 0);
			If(Is Game In Progress && Is Alive(Event Player));
				Players On Hero(Hero(LÃºcio), Team 1).support_value += Min(Event Damage, Event Player.lucio_health_pool) * 2;
			End;
			Event Player.temp_event_damage = Event Player.event_damage - Min(Event Player.lucio_health_pool, Event Player.event_damage);
			Event Player.lucio_health_pool = Max(0, Event Player.lucio_health_pool - Event Player.event_damage);
			Event Player.event_damage = Event Player.temp_event_damage;
		End;
		If(Event Player.event_damage > 0);
			If(Event Player.jq_health_pool > 0);
				Event Player.temp_event_damage = Event Player.event_damage - Min(Event Player.jq_health_pool, Event Player.event_damage);
				Event Player.jq_health_pool = Max(0, Event Player.jq_health_pool - Event Player.event_damage);
				Event Player.event_damage = Event Player.temp_event_damage;
			End;
		End;
		If(Players On Hero(Hero(Ana), Team 1).ability_1 == Event Player && Is Game In Progress);
			Players On Hero(Hero(Ana), Team 1).support_value += Event Player.event_damage * 2;
		End;
		Event Player.in_combat = True;
		Event Player.healee_in_combat = True;
		Stop Heal Over Time(Event Player.regen_id);
		Destroy Effect(Event Player.regen_effect);
		Wait(3, Restart When True);
		Event Player.in_combat = False;
		Wait(1, Restart When True);
		Event Player.healee_in_combat = False;
	}
}

rule("Regen HP")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Normalized Health(Event Player) < 1;
		Health(Event Player) > 0;
		Event Player.in_combat == False;
	}

	actions
	{
		Start Heal Over Time(Event Player, Null, 15, Array Contains(Array(Hero(Brigitte), Hero(D.Va), Hero(Junker Queen), Hero(Orisa),
			Hero(Ramattra), Hero(Reinhardt), Hero(Roadhog), Hero(Winston), Hero(Wrecking Ball)), Hero Of(Event Player)) ? 100 : (Hero Of(
			Event Player) == Hero(Zarya) ? 70 : 50));
		Event Player.regen_id = Last Heal Over Time ID;
		Create Effect(All Players(All Teams), Heal Target Active Effect, Color(Team 1), Event Player, False,
			Visible To Position and Radius);
		Event Player.regen_effect = Last Created Entity;
		Wait Until(Normalized Health(Event Player) == 1 || Event Player.in_combat, 15);
		Stop Heal Over Time(Event Player.regen_id);
		Destroy Effect(Event Player.regen_effect);
	}
}

rule("Teleport | Object Is Locked")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Update Every Frame((X Component Of(Position Of(Event Player)) >= 25 && Y Component Of(Position Of(Event Player)) <= -8) || (
			Y Component Of(Position Of(Event Player)) <= -18)) == True;
	}

	actions
	{
		Abort If(Hero Of(Event Player) == Hero(Doomfist) && Is Using Ultimate(Event Player));
		Skip If(Team Of(Event Player) == Team 2, 2);
		Apply Impulse(Event Player, Velocity Of(Event Player) * -1, 0.001, To World, Cancel Contrary Motion);
		Cancel Primary Action(Event Player);
		Wait(0.016, Ignore Condition);
		If(Team Of(Event Player) == Team 1);
			Teleport(Event Player, First Of(Sorted Array(Global.teleportation_points, Distance Between(Position Of(Event Player),
				Current Array Element))));
			If(Hero Of(Event Player) == Hero(Orisa) && (Is Using Ability 1(Event Player) || Is Using Ultimate(Event Player)));
				Start Rule(OrisaFixedTeleport, Restart Rule);
			Else;
				Set Status(Event Player, Null, Frozen, 1.200);
			End;
			Wait(0.032, Ignore Condition);
			Damage(Event Player, Players In Slot(0, Team 2), 100 / Players In Slot(0, Team 2).damage_dealt * 100);
		Else;
			Global.boss_data[0] = Health(Event Player);
			Global.ultimate_charge_players = Filtered Array(All Players(Team 1), Has Spawned(Current Array Element));
			Global.ultimate_charge = Mapped Array(Global.ultimate_charge_players, Ultimate Charge Percent(Current Array Element));
		End;
	}
}

rule("Teleport | Object Is Unlocked")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.point <= Total Time Elapsed;
		Update Every Frame(Y Component Of(Position Of(Event Player)) < -8.500 && X Component Of(Position Of(Event Player)) < 5) == True;
	}

	actions
	{
		Set Gravity(Event Player, 0);
		Apply Impulse(Event Player, Up, 0.001, To World, Cancel Contrary Motion);
		If(Y Component Of(Position Of(Event Player)) < -9);
			If(Array Contains(Array(Hero(Genji), Hero(Widowmaker), Hero(Wrecking Ball)), Hero Of(Event Player)));
				Cancel Primary Action(Event Player);
			End;
			Teleport(Event Player, Vector(X Component Of(Position Of(Event Player)), -8.500, Z Component Of(Position Of(Event Player))));
		End;
		Wait(0.016, Ignore Condition);
		If(!Event Player.impulse_var[0] && Is Button Held(Event Player, Button(Jump)) && Is Alive(Event Player) && Custom String("{0}",
			Is Communicating Any Emote(Event Player)) == Custom String("0") && !Has Status(Event Player, Knocked Down) && !Has Status(
			Event Player, Frozen) && !Has Status(Event Player, Stunned));
			Apply Impulse(Event Player, Up, 12, To World, Cancel Contrary Motion);
			Event Player.impulse_var[0] = True;
			Event Player.impulse_var[1] = Total Time Elapsed + 1;
		End;
		Loop If Condition Is True;
		Event Player.impulse_var[0] = False;
		While(Event Player.impulse_var[1] > Total Time Elapsed && Y Component Of(Position Of(Event Player)) < 0);
			Wait(0.016, Restart When True);
		End;
		Set Gravity(Event Player, 100);
	}
}

rule("Player Died")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Dead(Event Player) == True;
	}

	actions
	{
		Global.boss_killed = True;
		Modify Global Variable(dead_players, Append To Array, Event Player);
		Abort If(Count Of(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element))) == 0);
		If(X Component Of(Position Of(Event Player)) >= 25.250 || (X Component Of(Position Of(Event Player)) <= 2.250 && X Component Of(
			Position Of(Event Player)) >= -2.250 && Z Component Of(Position Of(Event Player)) >= -7.500 && Z Component Of(Position Of(
			Event Player)) <= 7.500));
			Teleport(Event Player, Nearest Walkable Position(Position Of(Event Player)));
		End;
	}
}

rule("Boss Killed")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.boss_killed == True;
	}

	actions
	{
		Modify Global Variable(boss_candidates, Remove From Array By Index, 0);
		Create HUD Text(All Players(All Teams), Null, Custom String("{0} {1}", Hero Icon String(Hero Of(Global.next_boss_color)),
			Global.next_boss_color), Null, Left, 30, Null, Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("Event Was Invironment")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Event Was Environment == True;
	}

	actions
	{
		Skip If(Event Player == Attacker, 3);
		Set Ultimate Charge(Attacker, Global.ultimate_charge[Index Of Array Value(Global.ultimate_charge_players, Attacker)
			] + 4 * Global.ult_charger_percent_change[Index Of Array Value(All Heroes, Hero Of(Attacker))]);
		Attacker.knockback_value += 250;
		Attacker.damage_dealt += Min(Event Damage - 500, Event Damage);
		Abort If(Global.boss_data[0] <= 500);
		Teleport(Event Player, First Of(Sorted Array(Global.teleportation_points, Distance Between(Event Player, Current Array Element))));
		Global.boss_data[1] = Ability Cooldown(Event Player, Button(Ability 1));
		Global.boss_data[2] = Ability Cooldown(Event Player, Button(Ability 2));
		Wait(0.016, Ignore Condition);
		Set Status(Event Player, Null, Unkillable, 0.032);
		Resurrect(Event Player);
		Set Ability Cooldown(Event Player, Button(Ability 1), Global.boss_data[1]);
		Set Ability Cooldown(Event Player, Button(Ability 2), Global.boss_data[2]);
		Destroy Icon(Event Player.icon);
		Create Icon(All Players(All Teams), Event Player, Stop, Visible To and Position, Color(Yellow), True);
		Event Player.icon = Last Created Entity;
		Play Effect(All Players(All Teams), Reaper Wraith Form Sound, False, Event Player, 200);
		Small Message(Event Player, Custom String(" -500 hp"));
		Disallow Button(Event Player, Button(Jump));
		Disallow Button(Event Player, Button(Crouch));
		Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
		Wait(0.016, Ignore Condition);
		Set Player Health(Event Player, Global.boss_data[0] - 500);
		If(Hero Of(Attacker) == Hero(Sigma) && Attacker.usage_ultimate);
			"damage: 1250 (75 + 1175)"
			Damage(Event Player, Attacker, 783.334);
		End;
		Set Status(Event Player, Null, Phased Out, 1.504);
		Set Status(Event Player, Null, Hacked, 1.504);
		For Global Variable(counter_1, 0, 94, 1);
			Cancel Primary Action(Event Player);
			Wait(0.016, Restart When True);
			Skip If(Global.counter_1 < 63, 3);
			Stop Forcing Throttle(Event Player);
			Allow Button(Event Player, Button(Jump));
			Allow Button(Event Player, Button(Crouch));
		End;
		Destroy Icon(Event Player.icon);
	}
}

rule("Objective")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is On Objective(Event Player) == False;
	}

	actions
	{
		Global.capture_players = Remove From Array(Global.capture_players, Event Player);
		Wait Until(Is On Objective(Event Player), 99999);
		Global.capture_players = Append To Array(Global.capture_players, Event Player);
	}
}

rule("Ana")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	actions
	{
		Event Player.interact_cooldown = 15;
		Event Player.ability_6 = Event Player.interact_cooldown;
		Event Player.max_health_percent = 120;
		Set Damage Dealt(Event Player, 135.715);
		Set Healing Dealt(Event Player, 200);
		Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
			Global.capture_players, Event Player) && Array Contains(Global.capture_players, Players In Slot(0, Team 2))) ? Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"),
			Top, 2, Null, Null, Null, String, Default Visibility);
		Event Player.huds[0] = Last Text ID;
		Create Progress Bar HUD Text(Event Player, Event Player.ability_6 / Event Player.interact_cooldown * 100,
			!Event Player.ability_3 && Event Player.ability_6 < Event Player.interact_cooldown ? Custom String("[{0}] : {1} sec",
			Ability Icon String(Hero(Soldier: 76), Button(Ability 1)), Round To Integer(
			Event Player.interact_cooldown - Event Player.ability_6, Up)) : (Event Player.ability_3 ? Custom String("[{0}]",
			Ability Icon String(Hero(Soldier: 76), Button(Ability 1))) : Custom String("[{0}] : press [{1}]", Ability Icon String(Hero(
			Soldier: 76), Button(Ability 1)), Input Binding String(Button(Interact)))), Top, 3, Event Player.ability_3 ? Color(Blue) : (
			Event Player.ability_6 == Event Player.interact_cooldown ? Color(Green) : Color(Black)), Color(Yellow),
			Visible To Values and Color, Default Visibility);
		Event Player.huds[1] = Last Text ID;
	}
}

rule("Ana | Interact")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.ability_6 == Event Player.interact_cooldown;
		(Is In Setup || Is Dead(Event Player) || Custom String("{0}", Is Communicating Any Emote(Event Player)) != Custom String("0")
			|| Has Status(Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned)) == False;
	}

	actions
	{
		Wait(0.032, Abort When False);
		Abort If(Event Player.teleportation);
		Event Player.ability_3 = True;
		Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.effects[0] = Last Created Entity;
		Chase Player Variable Over Time(Event Player, ability_6, 0, 2, None);
		Play Effect(Event Player, Ring Explosion Sound, False, Event Player, 90);
		Event Player.initial_ms += 40;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait Until(Is Dead(Event Player), 2);
		Destroy Effect(Event Player.effects[0]);
		Abort If(Is Assembling Heroes);
		Event Player.ability_3 = False;
		Event Player.initial_ms -= 40;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Abort If(Is Dead(Event Player));
		Chase Player Variable At Rate(Event Player, ability_6, Event Player.interact_cooldown, 1, Destination and Rate);
	}
}

rule("Ana | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(0.256, Ignore Condition);
		Abort If(!Is Using Ability 1(Event Player));
		Set Projectile Speed(Event Player, 83.334);
		Set Damage Dealt(Event Player, 5000 * (Event Player.usage_ultimate ? 1.500 : 1));
		Wait(0.064, Ignore Condition);
		Set Projectile Speed(Event Player, 100);
		Set Damage Dealt(Event Player, 135.715 * (Event Player.usage_ultimate ? 1.500 : 1));
	}
}

rule("Ana | Ability 1")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Ana;
	}

	conditions
	{
		Event Ability == Button(Ability 1);
	}

	actions
	{
		Skip If(!Is Game In Progress || Is Dead(Victim), 1);
		Event Player.debuff_value += 250 * Global.resistance_multiplier;
		"2.5 sec"
		Wait(2 * Global.resistance_multiplier, Restart When True);
		Clear Status(Victim, Asleep);
	}
}

rule("Ana | Ability 1")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Ana;
	}

	conditions
	{
		Event Ability == Button(Ability 1);
	}

	actions
	{
		Wait Until(Ability Cooldown(Event Player, Button(Ability 1)) > 0, 2);
		Set Ability Cooldown(Event Player, Event Ability, Ability Cooldown(Event Player, Event Ability) + 3 + Count Of(Filtered Array(
			Remove From Array(All Living Players(Team 1), Event Player), Has Spawned(Current Array Element))) * 1);
	}
}

rule("Ana | Ability 2")
{
	event
	{
		Player Received Healing;
		Team 1;
		All;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
		Hero Of(Healer) == Hero(Ana);
	}

	actions
	{
		Heal(Event Player, Healer, 80);
	}
}

rule("Ana | Ability 2")
{
	event
	{
		Player Dealt Healing;
		Team 1;
		Ana;
	}

	conditions
	{
		Event Ability == Null;
		Event Healing >= 25;
	}

	actions
	{
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Min(Round To Integer(Event Healing / 25, To Nearest),
			5));
	}
}

rule("Ana | Ultimate")
{
	event
	{
		Player Dealt Healing;
		Team 1;
		Ana;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Event Player.ability_1 = Healee;
		While(Is Using Ultimate(Event Player));
			Wait(0.080, Ignore Condition);
			Heal(Healee, Event Player, 2);
		End;
		Event Player.ability_1 = Null;
	}
}

rule("Ana | Solo Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Count Of(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element))) == 1;
		(Is Using Ability 1(Event Player) || Is Using Ability 2(Event Player) || Is Dead(Event Player) || Custom String("{0}",
			Is Communicating Any Emote(Event Player)) != Custom String("0") || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Frozen) || Has Status(Event Player, Stunned)) == False;
	}

	actions
	{
		Event Player.usage_ultimate = True;
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0) * 2);
		If(Is Reloading(Event Player));
			Cancel Primary Action(Event Player);
		End;
		Set Ultimate Ability Enabled(Event Player, False);
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		Heal(Event Player, Event Player, 600);
		Start Heal Over Time(Event Player, Event Player, 8, 40);
		Set Damage Received(Event Player, 50);
		Set Damage Dealt(Event Player, 135.715 * 1.500);
		Create Effect(All Players(All Teams), Ana Nano Boosted Sound, Color(Team 1), Event Player, 100, Visible To);
		Event Player.effects[1] = Last Created Entity;
		Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.effects[2] = Last Created Entity;
		Wait Until(Is Dead(Event Player), 8);
		Set Ultimate Ability Enabled(Event Player, True);
		Destroy Effect(Array(Event Player.effects[1], Event Player.effects[2]));
		Set Damage Received(Event Player, 100);
		Set Damage Dealt(Event Player, 135.715);
		Event Player.usage_ultimate = False;
	}
}

rule("Ashe")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ashe;
	}

	actions
	{
		Set Damage Dealt(Event Player, 116.667);
		Event Player.max_health_percent = 45;
		Add Health Pool To Player(Event Player, Health, 300 - 2.500 * Event Player.max_health_percent, True, False);
	}
}

rule("Ashe | Ability 2")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Ashe;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		"Total Damage: 350"
		Damage(Victim, Event Player, (66.670 - Event Damage) / 1.166);
		Start Damage Over Time(Victim, Event Player, 5, 30);
		Wait(5.250, Ignore Condition);
	}
}

rule("Ashe | Ultimate")
{
	event
	{
		Player Dealt Knockback;
		Team 1;
		Ashe;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		"Damage: (120 + 137.143) x 116.667% = 300"
		Damage(Victim, Event Player, 137.143);
		Set Status(Victim, Event Player, Stunned, 1.200 * Global.resistance_multiplier);
		Wait(0.016, Ignore Condition);
		Abort If(!Is Game In Progress || Is Dead(Victim));
		Event Player.debuff_value += 200 * Global.resistance_multiplier;
	}
}

rule("Ashe | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ashe;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Ultimate Ability Enabled(Event Player, False);
		Wait Until(!Is Using Ultimate(Event Player), 9999);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("Baptiste")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	actions
	{
		Event Player.max_health_percent = 120;
		Set Max Ammo(Event Player, 1, 7);
		Set Ammo(Event Player, 1, Max Ammo(Event Player, 1));
		Event Player.interact_cooldown = 36;
		Event Player.ability_6 = Event Player.interact_cooldown;
		Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
			Global.capture_players, Event Player) && Array Contains(Global.capture_players, Players In Slot(0, Team 2))) ? Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"),
			Top, 2, Null, Null, Null, String, Default Visibility);
		Event Player.huds[0] = Last Text ID;
		Create Progress Bar HUD Text(Event Player, Event Player.ability_6 / Event Player.interact_cooldown * 100, Custom String(
			"ââââââââââââ {0}âââââââââââ {0}", Ability Icon String(Hero(Baptiste), Button(Crouch))), Top, 3,
			Event Player.ability_6 >= Evaluate Once(Event Player.interact_cooldown / 2) ? Color(Green) : Color(Red), Color(Yellow),
			Visible To Values and Color, Default Visibility);
		Event Player.huds[1] = Last Text ID;
		Chase Player Variable At Rate(Event Player, ability_6, Event Player.interact_cooldown, 1, Destination and Rate);
	}
}

rule("Baptiste | Jump")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Event Player.ability_4 == True;
		Is Jumping(Event Player) == True;
	}

	actions
	{
		Event Player.ability_6 -= Event Player.interact_cooldown / 2;
		If(Event Player.ability_6 < Event Player.interact_cooldown / 2);
			Set Crouch Enabled(Event Player, False);
			Wait Until(Event Player.ability_6 >= Event Player.interact_cooldown / 2, 9999);
			Set Crouch Enabled(Event Player, True);
		End;
	}
}

rule("Baptiste | Exo Boots Check")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Is Crouching(Event Player) == True;
	}

	actions
	{
		Event Player.ability_4 = True;
		Wait Until(!Is Crouching(Event Player), 9999);
		Wait(1, Restart When True);
		Event Player.ability_4 = False;
	}
}

rule("Baptiste | Healing")
{
	event
	{
		Player Received Healing;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Healer) == Hero(Baptiste);
		Event Ability == Button(Secondary Fire);
		Array Contains(Array(40, 60, 80, 120), Event Healing) == False;
	}

	actions
	{
		Heal(Event Player, Healer, Event Healing / 5);
		Wait(0.400, Ignore Condition);
	}
}

rule("Baptiste | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.effects[0] = Last Created Entity;
		Event Player.initial_ms += 32.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait(2, Ignore Condition);
		Destroy Effect(Event Player.effects[0]);
		Event Player.initial_ms -= 32.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Baptiste | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.ability_2 = False;
		Event Player.ability_3 = 0;
		Wait(0.800, Ignore Condition);
		Chase Player Variable At Rate(Event Player, ability_3, 6, 1, None);
		Wait Until(Event Player.ability_2, 6);
		Stop Chasing Player Variable(Event Player, ability_3);
		If(Event Player.ability_2);
			Set Ability Cooldown(Event Player, Button(Ability 2), 20 - Event Player.ability_3 + 6);
		End;
	}
}

rule("Baptiste | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Status(Event Player, Unkillable) == True;
		Health(Event Player) < 250;
		Event Player.stored_spawn_position == Null;
	}

	actions
	{
		Heal(Event Player, Players On Hero(Hero(Baptiste), Team 1), 250 - Max Health(Event Player) * 0.200 - Health(Event Player)
			+ Max Health(Event Player) * 0.200);
		If(Hero Of(Event Player) != Hero(Baptiste) && !Players On Hero(Hero(Baptiste), Team 1).ability_2);
			Skip If(!Is Game In Progress, 1);
			Players On Hero(Hero(Baptiste), Team 1).support_value += 600;
			Players On Hero(Hero(Baptiste), Team 1).ability_2 = True;
			Wait(6, Restart When True);
		End;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bastion")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	actions
	{
		Event Player.max_health_percent = 1;
		Set Max Health(Event Player, Event Player.max_health_percent);
		Add Health Pool To Player(Event Player, Health, 296.071, True, False);
		Event Player.ability_5 = 0;
	}
}

rule("Bastion")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Remove Health Pool From Player(Event Player.health_pool[0]);
		Add Health Pool To Player(Event Player, Health, 100, False, False);
		Event Player.health_pool[0] = Last Created Health Pool;
	}
}

rule("Bastion | Health")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	conditions
	{
		Is In Setup == False;
		Health(Event Player) > 0;
		Is Using Ultimate(Event Player) == False;
		Event Player.in_combat == False;
	}

	actions
	{
		Wait(0.032, Abort When False);
		Remove Health Pool From Player(Event Player.health_pool[0]);
		"100 hp / 16 sec"
		Add Health Pool To Player(Event Player, Health, Min(Event Player.own_overhealth + 1, 350), False, False);
		Event Player.health_pool[0] = Last Created Health Pool;
		Wait(0.128, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bastion | Alternate Form")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	conditions
	{
		Is In Alternate Form(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, Is Using Ultimate(Event Player) ? 250 : 66.667);
		Set Damage Received(Event Player, 125);
		Wait(0.992, Ignore Condition);
		Event Player.initial_ms -= 40;
		While(Is In Alternate Form(Event Player));
			Set Move Speed(Event Player, Event Player.initial_ms / 0.650);
			Wait(0.016, Ignore Condition);
		End;
		Event Player.initial_ms += 40;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Set Damage Dealt(Event Player, 100);
		Set Damage Received(Event Player, 100);
	}
}

rule("Bastion | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.ability_4 = Ability Cooldown(Event Player, Button(Ability 1));
		Event Player.ability_1 = Total Time Elapsed;
		Small Message(Event Player, Custom String(" +400 health"));
		Add Health Pool To Player(Event Player, Health, 400, False, False);
		Event Player.health_pool[1] = Last Created Health Pool;
		Wait Until(!Is Using Ultimate(Event Player), 9999);
		Set Ability Cooldown(Event Player, Button(Ability 1), Event Player.ability_4 - (Total Time Elapsed - Event Player.ability_1));
		Remove Health Pool From Player(Event Player.health_pool[1]);
	}
}

rule("Bastion | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Bastion;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
		Event Player != Victim;
	}

	actions
	{
		Set Status(Victim, Event Player, Rooted, 1.500 * Global.resistance_multiplier);
		Abort If(!Is Game In Progress);
		Event Player.debuff_value += 200 * Global.resistance_multiplier * Min(1.500, Total Time Elapsed - Event Player.ability_5);
		Event Player.ability_5 = Total Time Elapsed;
	}
}

rule("Brigitte")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	actions
	{
		Event Player.max_health_percent = 100;
		Event Player.health_normal = 300 - 1.600;
		Set Knockback Dealt(Event Player, 100);
		Start Scaling Player(Event Player, 1.167, False);
		Disallow Button(Event Player, Button(Ultimate));
		Set Healing Dealt(Event Player, 180);
		Event Player.stored_spawn_position = 1;
		Call Subroutine(applyCustomHealth);
		Event Player.health_normal = 300 - (Max Health Of Type(Event Player, Health) - 300) - 1.600;
		Event Player.stored_spawn_position = Null;
		Add Health Pool To Player(Event Player, Health, 250, False, False);
		Event Player.health_pool = Last Created Health Pool;
		Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
			Global.capture_players, Event Player) && Array Contains(Global.capture_players, Players In Slot(0, Team 2))) ? Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(" \n\n\n\n\n\n\n\n\n\n\n\n"), Top, 2, Null, Null, Null, String,
			Default Visibility);
		Event Player.huds[0] = Last Text ID;
		Create Progress Bar HUD Text(Event Player.usage_ultimate ? Event Player : Empty Array, Event Player.ability_3, Custom String(
			"{0} sec", String Slice(Event Player.ability_3 * 0.080, 0, 3)), Top, 3, Color(Black), Color(Yellow),
			Visible To Values and Color, Default Visibility);
		Event Player.huds[1] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Event Player.usage_ultimate ? Custom String(" \n\n\n\n\n") : Custom String(
			" \n\n\n\n\n\n\n\n"), Top, 4, Null, Null, Null, String, Default Visibility);
		Event Player.huds[2] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("{0}: within 20 m reduces damage received by 25%", Ability Icon String(
			Hero(Brigitte), Button(Ultimate))), Top, 5, Null, Null, Color(Orange), String, Default Visibility);
		Event Player.huds[3] = Last Text ID;
		Create HUD Text(Event Player, Custom String("{0} dmg. reduction: {1}%", Ability Icon String(Hero(Brigitte), Button(
			Secondary Fire)), Is Firing Secondary(Event Player) && Is In View Angle(Event Player, Players In Slot(0, Team 2), 55) ? 100 : (
			Event Player.usage_ultimate ? 50 : 0)), Null, Null, Top, 6, (Is Firing Secondary(Event Player) && Is In View Angle(
			Event Player, Players In Slot(0, Team 2), 55)) || Event Player.usage_ultimate ? Color(Green) : Color(Red), Null, Null,
			String and Color, Default Visibility);
		Event Player.huds[4] = Last Text ID;
	}
}

rule("Brigitte | Health")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Array Contains(Array(Button(Primary Fire), Button(Ability 1)), Event Ability) == True;
		Is Firing Secondary(Event Player) == False;
	}

	actions
	{
		Remove Health Pool From Player(Event Player.health_pool);
		Add Health Pool To Player(Event Player, Health, Min(Event Player.own_overhealth + 50, 250), False, False);
		Event Player.health_pool = Last Created Health Pool;
		If(Event Ability == Button(Ability 1));
			Start Rule(BrigitteAbility1, Do Nothing);
		End;
	}
}

rule("Brigitte | Knockback")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Knockback Dealt(Event Player, 0);
		Wait Until(!Is Using Ability 1(Event Player), 0.512);
		Set Knockback Dealt(Event Player, 100);
	}
}

rule("Brigitte | Barrier")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		(Is Firing Secondary(Event Player) && Is In View Angle(Event Player, Players In Slot(0, Team 2), 55)) == True;
	}

	actions
	{
		Event Player.dmg_received_0 = True;
		Wait Until(!Is Firing Secondary(Event Player) || !Is In View Angle(Event Player, Players In Slot(0, Team 2), 55), 99999);
		Wait(0.048, Restart When True);
		Event Player.dmg_received_0 = False;
	}
}

rule("Brigitte | Shield Bash")
{
	event
	{
		Player Dealt Knockback;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Event Ability == Button(Primary Fire);
	}

	actions
	{
		Damage(Victim, Event Player, 37.500);
		Skip If(!Is Game In Progress, 1);
		Event Player.knockback_value += 100 * Global.resistance_multiplier;
		Wait Until(Ability Cooldown(Event Player, Event Ability) > 0, 0.512);
		Set Ability Cooldown(Event Player, Event Ability, Ability Cooldown(Event Player, Event Ability) + 2 + Count Of(Filtered Array(
			Remove From Array(All Living Players(Team 1), Event Player), Has Spawned(Current Array Element))) * 0.800);
		Play Effect(Event Player, Ring Explosion Sound, False, Event Player, 100);
		Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.effects[0] = Last Created Entity;
		Event Player.initial_ms += 25;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait(2, Ignore Condition);
		Destroy Effect(Event Player.effects[0]);
		Event Player.initial_ms -= 25;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Brigitte | Shield Bash")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Has Status(Event Player, Knocked Down) == True;
		Ability Cooldown(Players On Hero(Hero(Reinhardt), Team 2), Button(Ability 1)) >= (Array Contains(Global.selected_talents, 5)
			? 7.936 : 9.936);
		Ability Cooldown(Event Player, Button(Primary Fire)) >= 7.936;
	}

	actions
	{
		Clear Status(Event Player, Knocked Down);
		Wait(0.992, Ignore Condition);
		Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.effects[0] = Last Created Entity;
		Disable Movement Collision With Players(Event Player);
		Event Player.initial_ms += 25;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait(2, Ignore Condition);
		Destroy Effect(Event Player.effects[0]);
		Enable Movement Collision With Players(Event Player);
		Event Player.initial_ms -= 25;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Brigitte | Set Damage")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == False;
	}

	actions
	{
		Set Damage Dealt(Event Player, 125 / 45 * 100);
		Wait Until(Is Using Ability 1(Event Player), 99999);
		Set Damage Dealt(Event Player, 250 / 70 * 100);
	}
}

rule("Brigitte | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		(Is Dead(Event Player) || Custom String("{0}", Is Communicating Any Emote(Event Player)) != Custom String("0") || Has Status(
			Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned)) == False;
	}

	actions
	{
		Event Player.usage_ultimate = True;
		Set Ultimate Ability Enabled(Event Player, False);
		"Damage Received: 50% (66.667% * 0.75)"
		Set Damage Received(Event Player, 66.667);
		Event Player.initial_ms += 15;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Event Player.ability_3 = 100;
		Chase Player Variable Over Time(Event Player, ability_3, 0, 8, None);
		Create Effect(All Players(All Teams), Ring, Color(Orange), Update Every Frame(Position Of(Event Player)), 20,
			Visible To Position and Radius);
		Event Player.effects[1] = Last Created Entity;
		For Player Variable(Event Player, i_1, 0, 3, 1);
			Play Effect(All Players(All Teams), Brigitte Repair Pack Armor Sound, Color(White), Event Player, 200);
			Wait(0.160, Ignore Condition);
		End;
		Wait Until(Is Dead(Event Player), 7.520);
		Set Damage Received(Event Player, 100);
		Destroy Effect(Event Player.effects[1]);
		Stop Chasing Player Variable(Event Player, ability_3);
		Event Player.ability_3 = 0;
		Set Ultimate Ability Enabled(Event Player, True);
		Event Player.usage_ultimate = False;
		Event Player.initial_ms -= 15;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Cassidy")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	actions
	{
		Event Player.max_health_percent = 100;
		Add Health Pool To Player(Event Player, Health, 25, True, False);
		Set Damage Dealt(Event Player, 125);
		Set Projectile Speed(Event Player, 150);
		Set Projectile Gravity(Event Player, 150 * 150 / 100);
	}
}

rule("Cassidy | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		If(Event Player.ability_1);
			Destroy Effect(Event Player.effects[0]);
		Else;
			Event Player.ability_1 = True;
			Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(Team 1), Event Player, False, Visible To);
			Event Player.effects[0] = Last Created Entity;
			Event Player.initial_ms += 30;
			Set Move Speed(Event Player, Event Player.initial_ms);
		End;
		Wait Until(!Is Using Ability 1(Event Player), 0.500);
		Set Damage Received(Event Player, 25);
		Wait(0.112, Restart When True);
		Set Damage Received(Event Player, 100);
		Wait(1.888, Restart When True);
		Event Player.ability_1 = False;
		Destroy Effect(Event Player.effects[0]);
		Event Player.initial_ms -= 30;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Cassidy | Ability 2")
{
	event
	{
		Player Took Damage;
		Team 2;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Cassidy);
		Event Ability == Button(Ability 2);
		Event Damage < 19;
	}

	actions
	{
		Damage(Victim, Event Player, 80);
		Event Player.magnetic_grenade = True;
		Victim.ms_debuff[17] = 30 * Global.resistance_multiplier;
		Victim.usage_ability[17] = Total Time Elapsed + 1.248;
		Skip If(!Is Game In Progress, 1);
		Attacker.debuff_value += 150 * Global.resistance_multiplier;
		Wait(1.248, Ignore Condition);
		Event Player.magnetic_grenade = False;
		Set Ability Cooldown(Attacker, Event Ability, Ability Cooldown(Attacker, Event Ability) + 4 + Count Of(Filtered Array(
			Remove From Array(All Living Players(Team 1), Attacker), Has Spawned(Current Array Element))) * 0.800);
	}
}

rule("Cassidy | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Add Health Pool To Player(Event Player, Health, 100, True, False);
		Event Player.health_pool[0] = Last Created Health Pool;
		Set Damage Dealt(Event Player, 133.334);
		Set Damage Received(Event Player, 166.667);
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		While(Is Using Ultimate(Event Player));
			Set Move Speed(Event Player, Event Player.initial_ms / 0.300);
			Wait(0.016, Ignore Condition);
		End;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Remove Health Pool From Player(Event Player.health_pool[0]);
		Set Damage Received(Event Player, 100);
		Set Damage Dealt(Event Player, 125);
	}
}

rule("Cassidy | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Add Health Pool To Player(Event Player, Health, 400, False, False);
		Event Player.health_pool[1] = Last Created Health Pool;
		Set Status(Victim, Event Player, Hacked, 2 * Global.resistance_multiplier);
		Skip If(!Is Game In Progress || Is Dead(Victim), 1);
		Event Player.debuff_value += 150 * Global.resistance_multiplier;
		Wait(2.496, Ignore Condition);
		Remove Health Pool From Player(Event Player.health_pool[1]);
	}
}

rule("Doom")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Doomfist;
	}

	actions
	{
		Event Player.max_health_percent = 80;
		Set Damage Dealt(Event Player, 62.500 / 66 * 100);
	}
}

rule("Doom | Health")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Doomfist;
	}

	conditions
	{
		(Event Ability == Button(Ability 1) || Event Ability == Button(Ultimate) || (Event Ability == Button(Secondary Fire)
			&& !Event Player.ability_1)) == True;
	}

	actions
	{
		Set Player Health(Event Player, Health(Event Player) - Event Player.max_health_percent / 100 * (Event Ability == Button(Ultimate)
			? 75 : 35));
		disabled Damage(Event Player, Null, Event Player.max_health_percent / 100 * (Event Ability == Button(Ultimate) ? 75 : 35));
	}
}

rule("Doom | Ability 1")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Doomfist;
	}

	conditions
	{
		Event Ability == Button(Ability 1);
	}

	actions
	{
		Remove Health Pool From Player(Event Player.health_pool[0]);
		Add Health Pool To Player(Event Player, Health, 150, False, False);
		Event Player.health_pool[0] = Last Created Health Pool;
		Victim.ms_debuff[5] = 25 * Global.resistance_multiplier;
		Victim.usage_ability[5] = Total Time Elapsed + 1;
		Wait(0.016, Ignore Condition);
		Skip If(!Is Game In Progress || Is Dead(Victim), 1);
		Event Player.debuff_value += 50 * Global.resistance_multiplier;
		Wait(4, Restart When True);
		Remove Health Pool From Player(Event Player.health_pool[0]);
	}
}

rule("Doom | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Doomfist;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Max Ammo(Event Player, 0, 0);
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
		Set Damage Dealt(Event Player, 500);
		While(Is Using Ability 1(Event Player));
			Wait(0.016, Ignore Condition);
			If(Is Button Held(Event Player, Button(Crouch)));
				Apply Impulse(Event Player, Down, 0.880, To World, Incorporate Contrary Motion);
			End;
		End;
		Wait(0.176, Ignore Condition);
		Set Max Ammo(Event Player, 0, 4);
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
		Set Damage Dealt(Event Player, 62.500 / 66 * 100);
	}
}

rule("Doom | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Doomfist;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.initial_ms -= 20;
		While(Is Using Ability 2(Event Player));
			Set Move Speed(Event Player, Event Player.initial_ms / 0.650);
			Wait(0.016, Ignore Condition);
		End;
		Event Player.initial_ms += 20;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Doom | Ability 2")
{
	event
	{
		Player Took Damage;
		Team 1;
		Doomfist;
	}

	conditions
	{
		Event Damage > 25;
		Event Damage < 35;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
	}
}

rule("Doom | Secondary Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Doomfist;
	}

	conditions
	{
		Has Status(Event Player, Knocked Down) == True;
		Ability Cooldown(Players On Hero(Hero(Reinhardt), Team 2), Button(Ability 1)) >= (Array Contains(Global.selected_talents, 5)
			? 7.936 : 9.936);
		Ability Cooldown(Event Player, Button(Secondary Fire)) >= 5.936;
	}

	actions
	{
		Clear Status(Event Player, Knocked Down);
	}
}

rule("Doom | Secondary Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Doomfist;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Secondary Fire)) > 0;
	}

	actions
	{
		Abort If(!Event Player.ability_1);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), Ability Cooldown(Event Player, Button(Secondary Fire)) + 1 + Count Of(
			Filtered Array(Remove From Array(All Living Players(Team 1), Event Player), Has Spawned(Current Array Element))) * 0.500);
	}
}

rule("Doom | Secondary Fire")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Doomfist;
	}

	conditions
	{
		Event Ability == Button(Secondary Fire);
	}

	actions
	{
		If(!Event Player.ability_1);
			Event Player.ability_1 = True;
			Remove Health Pool From Player(Event Player.health_pool[1]);
			Add Health Pool To Player(Event Player, Health, 150, False, False);
			Event Player.health_pool[1] = Last Created Health Pool;
			Damage(Victim, Event Player, (250 - Event Damage) * 0.880);
			Skip If(!Is Game In Progress || Is Dead(Victim), 1);
			Event Player.knockback_value += 75;
		Else;
			Damage(Victim, Event Player, (200 - Event Damage) * 0.880);
			Event Player.knockback_value += 25;
		End;
		Wait(1.500, Restart When True);
		Event Player.ability_1 = False;
		Wait(2.500, Restart When True);
		Remove Health Pool From Player(Event Player.health_pool[1]);
	}
}

rule("Doom | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Doomfist;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Remove Health Pool From Player(Event Player.health_pool[2]);
		Remove Health Pool From Player(Event Player.health_pool[3]);
		Add Health Pool To Player(Event Player, Health, 150, False, False);
		Event Player.health_pool[2] = Last Created Health Pool;
		Add Health Pool To Player(Event Player, Health, 150, False, False);
		Event Player.health_pool[3] = Last Created Health Pool;
		Damage(Victim, Event Player, (600 - Event Damage) * 0.880);
		Set Status(Victim, Event Player, Stunned, 1.500 * Global.resistance_multiplier);
		Wait(0.016, Ignore Condition);
		Skip If(!Is Game In Progress || Is Dead(Victim), 1);
		Event Player.debuff_value += 250 * Global.resistance_multiplier;
		Wait(4, Restart When True);
		Remove Health Pool From Player(Event Player.health_pool[2]);
		Wait(4, Restart When True);
		Remove Health Pool From Player(Event Player.health_pool[3]);
	}
}

rule("D.Va")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	actions
	{
		Set Damage Dealt(Event Player, 178.572);
		Start Scaling Player(Event Player, Is In Alternate Form(Event Player) ? 1 : 0.950, True);
		Destroy HUD Text(Event Player.huds[0]);
		Destroy HUD Text(Event Player.huds[1]);
		Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
			Global.capture_players, Event Player) && Array Contains(Global.capture_players, Players In Slot(0, Team 2))) ? Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"), Top, 2, Null, Null, Null, String, Default Visibility);
		Event Player.huds[0] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("if {0} is not ready when ejection, {1} dies ", Ability Icon String(Hero(
			D.Va), Button(Ultimate)), Hero Icon String(Hero(D.Va))), Top, 3, Null, Null, Custom Color(214, 145, 65, 255), String and Color,
			Default Visibility);
		Event Player.huds[1] = Last Text ID;
	}
}

rule("D.Va | Primary Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Is In Alternate Form(Event Player) == False;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, False);
		Wait(0.096, Ignore Condition);
		Loop If Condition Is True;
		Set Primary Fire Enabled(Event Player, True);
	}
}

rule("D.Va | Primary Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == False;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is In Alternate Form(Event Player) == False;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("D.Va | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) == 100;
		Is In Alternate Form(Event Player) == False;
	}

	actions
	{
		Wait Until(Ability Cooldown(Event Player, Button(Ability 1)) > 0, 3);
		If(Ability Cooldown(Event Player, Button(Ability 1)) > 0);
			Small Message(Event Player, Custom String("{0} cooldown: -{1} sec", Ability Icon String(Hero(D.Va), Button(Ability 1)),
				Round To Integer(Max(1, Min(6, Ability Cooldown(Event Player, Button(Ability 1)))), Up)));
			Set Ability Cooldown(Event Player, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)) - 6);
	}
}

rule("D.Va | Secondary Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Event Player.ability_7 = Player Stat(Event Player, Damage Blocked);
		Wait Until(Player Stat(Event Player, Damage Blocked) > Event Player.ability_7, 2);
		Wait Until(Ability Cooldown(Event Player, Button(Secondary Fire)) > 0, 9999);
		Wait(0.016, Ignore Condition);
		If(Player Stat(Event Player, Damage Blocked) > Event Player.ability_7);
			Remove Health Pool From Player(Event Player.health_pool[1]);
			Add Health Pool To Player(Event Player, Health, Min(Event Player.own_overhealth + 250, 1000), False, False);
			Event Player.health_pool[1] = Last Created Health Pool;
			Set Ability Cooldown(Event Player, Button(Secondary Fire), Ability Cooldown(Event Player, Button(Secondary Fire)) + 12);
		End;
	}
}

rule("D.Va | Secondary Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Secondary Fire)) > 0;
		Is Firing Secondary(Event Player) == False;
	}

	actions
	{
		Set Ability Resource(Event Player, Button(Secondary Fire), 0);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 6);
		Wait Until(Ability Cooldown(Event Player, Button(Secondary Fire)) == 0, 9999);
		Set Ability Resource(Event Player, Button(Secondary Fire), 100);
	}
}

rule("D.Va | Auto Ejection")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Is In Alternate Form(Event Player) == False;
		Health(Event Player) <= 0.025;
	}

	actions
	{
		Wait Until(Is Using Ultimate(Event Player), 0.976);
		If(Ultimate Charge Percent(Event Player) == 100);
			Press Button(Event Player, Button(Ultimate));
		End;
	}
}

rule("D.Va | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(D.Va);
		Is In Alternate Form(Event Player) == True;
	}

	actions
	{
		Wait(0.048, Abort When False);
		If(Is Using Ultimate(Event Player));
			Remove Health Pool From Player(Event Player.health_pool[1]);
			Apply Impulse(Event Player, Up, 20, To World, Cancel Contrary Motion);
			Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(Team 1), Event Player, False,
				Visible To Position and Radius);
			Event Player.effects[0] = Last Created Entity;
			Event Player.initial_ms += 40;
			Set Move Speed(Event Player, Event Player.initial_ms);
			Event Player.usage_ability = True;
			Wait(0.032, Ignore Condition);
			Event Player.usage_ability = False;
			Wait(2.928, Ignore Condition);
			Abort If(Hero Of(Event Player) != Hero(D.Va));
			Destroy Effect(Event Player.effects[0]);
			Event Player.initial_ms -= 40;
			Set Move Speed(Event Player, Event Player.initial_ms);
			Wait Until((Is On Ground(Event Player) && Is Button Held(Event Player, Button(Ultimate)) && Ultimate Charge Percent(Event Player)
				== 0) || (Ultimate Charge Percent(Event Player) == 100) || Is Assembling Heroes, 99999);
			If(Ultimate Charge Percent(Event Player) == 100);
				Wait Until(Ultimate Charge Percent(Event Player) == 0, 99999);
			End;
			Abort If(Hero Of(Event Player) != Hero(D.Va));
			Event Player.max_health_percent = 61.160;
			Set Max Health(Event Player, Event Player.max_health_percent);
			Add Health Pool To Player(Event Player, Health, 200, False, False);
			Event Player.ability_3 = Last Created Health Pool;
			Remove Health Pool From Player(Event Player.health_pool[0]);
			Add Health Pool To Player(Event Player, Health, Is In Alternate Form(Event Player) ? 298.250 : 294.250, True, True);
			Event Player.health_pool[0] = Last Created Health Pool;
			Wait(1.024, Ignore Condition);
			Abort If(Hero Of(Event Player) != Hero(D.Va));
			Event Player.max_health_percent = 1;
			Set Max Health(Event Player, Event Player.max_health_percent);
			Abort If(Hero Of(Event Player) != Hero(D.Va));
			Wait(2.048, Ignore Condition);
			Remove Health Pool From Player(Event Player.ability_3);
		Else;
			Kill(Event Player, Players In Slot(0, Team 2));
		End;
	}
}

rule("D.Va | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		D.Va;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		"1.25 - 2.5 sec"
		Set Status(Victim, Event Player, Stunned, Max(Min(Event Damage / 800, 2.500), 1.250) * Global.resistance_multiplier);
		Abort If(Is Dead(Victim) || !Is Game In Progress);
		Event Player.debuff_value += 200 * Max(Min(Event Damage / 800, 2.500), 1.250) * Global.resistance_multiplier;
	}
}

rule("D.Va | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Players On Hero(Hero(D.Va), Team 1).usage_ability == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} is disabled for 3 sec!", Ability Icon String(Hero(Reinhardt), Button(
			Secondary Fire))));
		Play Effect(Event Player, Explosion Sound, Null, Event Player, 90);
		Set Secondary Fire Enabled(Event Player, False);
		Wait(2.960, Ignore Condition);
		Set Damage Dealt(Players On Hero(Hero(D.Va), Team 1), 200);
		Wait(0.064, Ignore Condition);
		Set Damage Dealt(Players On Hero(Hero(D.Va), Team 1), 178.572);
		Set Secondary Fire Enabled(Event Player, True);
	}
}

rule("Echo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Echo;
	}

	actions
	{
		Event Player.max_health_percent = 120;
		Set Damage Dealt(Event Player, 117.648);
		Clear Status(Event Player, Invincible);
		Wait(0.016, Ignore Condition);
		Global.echo_player = Event Player;
		Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
			Global.capture_players, Event Player) && Array Contains(Global.capture_players, Players In Slot(0, Team 2))) ? Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(" \n\n\n\n\n\n\n\n\n\n\n\n\n"), Top, 2, Null, Null, Null, String,
			Default Visibility);
		Event Player.huds[0] = Last Text ID;
		Event Player.ability_3 = Empty Array;
		Event Player.ability_1 = Remove From Array(All Tank Heroes, Global.echo_taken_heroes);
		If(Count Of(Filtered Array(Event Player.ability_1, Is Hero Being Played(Current Array Element, Team 1))) < 2);
			If(Count Of(Filtered Array(Event Player.ability_1, !Is Hero Being Played(Current Array Element, Team 1))) > 0);
				Event Player.ability_2 = Count Of(Filtered Array(Event Player.ability_1, Is Hero Being Played(Current Array Element, Team 1)));
				Event Player.ability_1 = Randomized Array(Filtered Array(Event Player.ability_1, !Is Hero Being Played(Current Array Element,
					Team 1)));
				Event Player.ability_1 = Array Slice(Event Player.ability_1, 0, Min(2 - Event Player.ability_2, Count Of(Event Player.ability_1)));
				For Player Variable(Event Player, i_1, 0, Count Of(Event Player.ability_1), 1);
					Modify Player Variable(Event Player, ability_3, Append To Array, Event Player.ability_1[Event Player.i_1]);
				End;
			End;
		End;
		Event Player.ability_1 = Remove From Array(All Support Heroes, Global.echo_taken_heroes);
		If(Count Of(Filtered Array(Event Player.ability_1, Is Hero Being Played(Current Array Element, Team 1))) < 2);
			If(Count Of(Filtered Array(Event Player.ability_1, !Is Hero Being Played(Current Array Element, Team 1))) > 0);
				Event Player.ability_2 = Count Of(Filtered Array(Event Player.ability_1, Is Hero Being Played(Current Array Element, Team 1)));
				Event Player.ability_1 = Randomized Array(Filtered Array(Event Player.ability_1, !Is Hero Being Played(Current Array Element,
					Team 1)));
				Event Player.ability_1 = Array Slice(Event Player.ability_1, 0, Min(2 - Event Player.ability_2, Count Of(Event Player.ability_1)));
				For Player Variable(Event Player, i_1, 0, Count Of(Event Player.ability_1), 1);
					Modify Player Variable(Event Player, ability_3, Append To Array, Event Player.ability_1[Event Player.i_1]);
				End;
			End;
		End;
		Event Player.ability_1 = Remove From Array(All Damage Heroes, Global.echo_taken_heroes);
		If(Count Of(Filtered Array(Event Player.ability_1, !Is Hero Being Played(Current Array Element, Team 1))) > 0);
			Event Player.ability_1 = Randomized Array(Filtered Array(Event Player.ability_1, !Is Hero Being Played(Current Array Element,
				Team 1)));
			Event Player.ability_1 = Array Slice(Event Player.ability_1, 0, 5 - Count Of(Event Player.ability_3));
			For Player Variable(Event Player, i_1, 0, Count Of(Event Player.ability_1), 1);
				Modify Player Variable(Event Player, ability_3, Append To Array, Event Player.ability_1[Event Player.i_1]);
			End;
		End;
		Create HUD Text(Event Player, Custom String(" {0} ", Hero Icon String(Event Player.ability_3[0])), Custom String(
			"    [{0}] - change a hero", Input Binding String(Button(Interact))), Custom String(" {0} | {1} ", Custom String("{0} | {1}",
			Hero Icon String(Event Player.ability_3[1]), Hero Icon String(Event Player.ability_3[2])), Custom String("{0} | {1}",
			Hero Icon String(Event Player.ability_3[3]), Hero Icon String(Event Player.ability_3[4]))), Top, 3, Color(Blue), Color(Yellow),
			Color(White), Visible To and String, Default Visibility);
		Event Player.huds[1] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String(" \n\n\n\n\n\n\n"), Top, 4, Null, Null, Null, String, Default Visibility);
		Event Player.huds[2] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("{0} can be killed during {1}", Hero Icon String(Hero(Echo)),
			Ability Icon String(Hero(Echo), Button(Ultimate))), Top, 5, Null, Null, Color(Red), String and Color, Default Visibility);
		Event Player.huds[3] = Last Text ID;
		Wait(0.032, Ignore Condition);
		Disallow Button(Event Player, Button(Ultimate));
	}
}

rule("Echo | Set Damage")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Echo;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Wait(0.032, Ignore Condition);
		Set Damage Dealt(Event Player, 166.667);
		Wait(0.592, Ignore Condition);
		Set Damage Dealt(Event Player, 117.648);
	}
}

rule("Echo | Ability 2")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Echo;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)) - 0.224);
	}
}

rule("Echo | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Echo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Count Of(Event Player.ability_3) == 5;
	}

	actions
	{
		Wait(0.032, Abort When False);
		Abort If(Event Player.teleportation);
		Modify Player Variable(Event Player, ability_3, Append To Array, First Of(Event Player.ability_3));
		Modify Player Variable(Event Player, ability_3, Remove From Array By Index, 0);
	}
}

rule("Echo | Ultimate")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Button Held(Global.echo_player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Global.echo_player) == 100;
		(Is Dead(Global.echo_player) || Has Status(Global.echo_player, Knocked Down) || Has Status(Global.echo_player, Frozen)
			|| Has Status(Global.echo_player, Stunned)) == False;
	}

	actions
	{
		Set Status(Global.echo_player, Null, Phased Out, 0.800);
		Destroy HUD Text(Global.echo_player.huds[0]);
		Destroy HUD Text(Global.echo_player.huds[1]);
		If(First Of(Global.echo_player.ability_3) == Hero(D.Va));
			Global.echo_player.max_health_percent = 1;
			Set Max Health(Global.echo_player, Global.echo_player.max_health_percent);
		End;
		Preload Hero(Global.echo_player, First Of(Global.echo_player.ability_3));
		Start Forcing Player To Be Hero(Global.echo_player, First Of(Global.echo_player.ability_3));
		Set Ability 1 Enabled(Global.echo_player, False);
		Set Ability 2 Enabled(Global.echo_player, False);
		Set Primary Fire Enabled(Global.echo_player, False);
		Set Secondary Fire Enabled(Global.echo_player, False);
		Set Ultimate Ability Enabled(Global.echo_player, False);
		Global.echo_ultimate = 20;
		Wait(0.032, Ignore Condition);
		Apply Impulse(Global.echo_player, Up, 0.001, To World, Cancel Contrary Motion);
		Set Gravity(Global.echo_player, 0);
		Create Progress Bar In-World Text(Custom String("{0}", Is Communicating Any Emote(Global.echo_player)) == Custom String("0")
			? Global.echo_player : Empty Array, Global.echo_ultimate / Evaluate Once(Global.echo_ultimate) * 100, Custom String("{0} sec",
			Round To Integer(Global.echo_ultimate, Up)), Update Every Frame(Eye Position(Global.echo_player) + 500 * (
			1.650 * World Vector Of(Left, Global.echo_player, Rotation) + (-0.050 - 0.200) * Direction From Angles(
			Horizontal Facing Angle Of(Global.echo_player), Vertical Facing Angle Of(Global.echo_player) - 90) + 3 * Facing Direction Of(
			Global.echo_player))), 1, Do Not Clip, Custom Color(31, 117, 254, 255), Color(Yellow), Visible To Position Values and Color,
			Default Visibility);
		Global.echo_player.huds[5] = Last Text ID;
		Wait(0.048, Ignore Condition);
		Create Effect(All Players(All Teams), Echo Cloning Effect, Color(Team 1), Global.echo_player, False, Visible To);
		Global.echo_player.effects[10] = Last Created Entity;
		Create Effect(All Players(All Teams), Echo Cloning Sound, False, Global.echo_player, 100, Visible To);
		Global.echo_player.effects[11] = Last Created Entity;
		Wait(0.416, Ignore Condition);
		Set Ability 1 Enabled(Global.echo_player, True);
		Set Ability 2 Enabled(Global.echo_player, True);
		Set Primary Fire Enabled(Global.echo_player, True);
		Set Secondary Fire Enabled(Global.echo_player, True);
		Set Ultimate Ability Enabled(Global.echo_player, True);
		Wait(0.016, Ignore Condition);
		Set Gravity(Global.echo_player, 100);
		Chase Global Variable At Rate(echo_ultimate, 0, 1, None);
		Set Ultimate Charge(Global.echo_player, 100);
		Preload Hero(Global.echo_player, Hero(Echo));
		Modify Global Variable(echo_taken_heroes, Append To Array, Hero Of(Global.echo_player));
		Wait Until(Health(Global.echo_player) == 0 || Global.echo_ultimate == 0, 9999);
		Stop Chasing Global Variable(echo_ultimate);
		Global.echo_player.ability_2 = Facing Direction Of(Global.echo_player);
		Set Status(Global.echo_player, Null, Phased Out, 0.900);
		Start Forcing Player To Be Hero(Global.echo_player, Hero(Echo));
		Set Facing(Global.echo_player, Global.echo_player.ability_2, To World);
		Stop Forcing Player To Be Hero(Global.echo_player);
		If(Global.echo_ultimate > 0);
			Kill(Global.echo_player, Null);
		End;
	}
}

rule("Genji")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	actions
	{
		Event Player.max_health_percent = 120;
		Set Damage Dealt(Event Player, 129.630);
	}
}

rule("Genji | Ability 1")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Genji;
	}

	conditions
	{
		Event Ability == Button(Ability 1);
	}

	actions
	{
		"Total Damage: 250"
		Start Damage Over Time(Victim, Event Player, 1.500, Is Using Ultimate(Event Player) ? 58.333 : 95.238);
	}
}

rule("Genji | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		"600"
		Set Damage Dealt(Event Player, 150);
		Wait Until(!Is Using Ability 2(Event Player), 1.500);
		Set Damage Dealt(Event Player, Is Using Ultimate(Event Player) ? 181.819 : 129.630);
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("Genji | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.health_pool = Empty Array;
		Add Health Pool To Player(Event Player, Health, 50, False, False);
		Modify Player Variable(Event Player, health_pool, Append To Array, Last Created Health Pool);
		"200 per hit"
		Set Damage Dealt(Event Player, 181.819);
		Event Player.initial_ms += 42.500;
		While(Is Using Ultimate(Event Player));
			Set Move Speed(Event Player, Event Player.initial_ms / 1.300);
			Wait(0.016, Ignore Condition);
		End;
		Event Player.initial_ms -= 42.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Wait(0.496, Ignore Condition);
		Set Damage Dealt(Event Player, 129.630);
		Wait(1, Ignore Condition);
		While(Event Player.health_pool);
			Remove Health Pool From Player(Event Player.health_pool[0]);
			Modify Player Variable(Event Player, health_pool, Remove From Array By Index, 0);
		End;
	}
}

rule("Genji | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Genji;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Add Health Pool To Player(Event Player, Health, 100, False, False);
		Modify Player Variable(Event Player, health_pool, Append To Array, Last Created Health Pool);
	}
}

rule("Hanzo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Hanzo;
	}

	actions
	{
		Event Player.max_health_percent = 120;
		Set Damage Dealt(Event Player, 120);
		Set Projectile Speed(Event Player, 100 * (150 / 110));
	}
}

rule("Hanzo | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Hanzo;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 100 / 75 * 100);
		Wait Until(!Is Using Ability 2(Event Player), 9999);
		Abort If(Is Using Ultimate(Event Player));
		Set Damage Dealt(Event Player, 120);
	}
}

rule("Hanzo | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Hanzo;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.usage_ultimate = True;
		Set Damage Dealt(Event Player, 266.667);
		Wait(0.944, Ignore Condition);
		Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
		Set Ultimate Charge(Event Player, 100);
		Wait(0.016, Ignore Condition);
		Press Button(Event Player, Button(Ultimate));
		Wait(0.016, Ignore Condition);
		Set Ultimate Charge(Event Player, 0);
		Wait(0.896, Ignore Condition);
		Stop Forcing Throttle(Event Player);
		Wait(0.640, Ignore Condition);
		Set Damage Dealt(Event Player, 120);
		Event Player.usage_ultimate = False;
	}
}

rule("Hanzo | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Hanzo;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Victim.ms_debuff[14] = 50 * Global.resistance_multiplier;
		Victim.usage_ability[14] = Total Time Elapsed + 0.250;
	}
}

rule("Illari")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Illari;
	}

	actions
	{
		Event Player.max_health_percent = 250;
		Set Damage Dealt(Event Player, 133.334);
		Set Healing Dealt(Event Player, 183.334);
		Event Player.health_normal = 300 - 1.600;
		Event Player.stored_spawn_position = 1;
		Call Subroutine(applyCustomHealth);
		Event Player.health_normal = 300 - (Max Health Of Type(Event Player, Health) - 300) - 1.600;
		Event Player.stored_spawn_position = Null;
	}
}

rule("Illari | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Illari;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 1)) > 0;
	}

	actions
	{
		Heal(Event Player, Null, 300);
		Apply Impulse(Event Player, Up, 4, To World, Incorporate Contrary Motion);
	}
}

rule("Illari | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Illari;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String(" +100% damage"));
		Set Damage Dealt(Event Player, 266.667);
		Wait Until(!Is Using Ultimate(Event Player), 9999);
		Set Damage Dealt(Event Player, 133.334);
	}
}

rule("Junker Queen")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junker Queen;
	}

	actions
	{
		Event Player.max_health_percent = 100;
		Add Health Pool To Player(Event Player, Health, 125, True, False);
	}
}

rule("Junker Queen | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junker Queen;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Add Health Pool To Player(Event Player, Health, 50, True, False);
		Event Player.health_pool = Last Created Health Pool;
		Event Player.initial_ms += 32.500;
		While(Is Using Ability 1(Event Player));
			Set Move Speed(Event Player, Event Player.initial_ms / 1.300);
			Wait(0.016, Ignore Condition);
		End;
		Event Player.initial_ms -= 32.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Remove Health Pool From Player(Event Player.health_pool);
	}
}

rule("Junker Queen | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junker Queen;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Wait(0.960, Ignore Condition);
		Set Damage Dealt(Event Player, 277.778);
		Wait(0.032, Ignore Condition);
		Set Damage Dealt(Event Player, 100);
	}
}

rule("Junker Queen | Ability 2")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Junker Queen;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		Event Player.initial_ms += 27.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Heal(Event Player, Event Player, 200);
		Victim.ms_debuff[12] = 25 * Global.resistance_multiplier;
		Victim.usage_ability[12] = Total Time Elapsed + 2;
		Set Status(Victim, Event Player, Hacked, 2 * Global.resistance_multiplier);
		Skip If(!Is Game In Progress || Is Dead(Victim), 1);
		Event Player.debuff_value += 250 * Global.resistance_multiplier;
		Wait(0.400, Ignore Condition);
		Abort If(Hero Of(Event Player) != Hero(Junker Queen));
		Set Ability Cooldown(Event Player, Event Ability, Ability Cooldown(Event Player, Event Ability) + 4 + 2 + Count Of(Filtered Array(
			Remove From Array(All Living Players(Team 1), Event Player), Has Spawned(Current Array Element))) * 1.200);
		Wait(1.600, Ignore Condition);
		Abort If(Hero Of(Event Player) != Hero(Junker Queen));
		Event Player.initial_ms -= 27.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait(1.224, Ignore Condition);
	}
}

rule("Junker Queen | Ability 3")
{
	event
	{
		Player Dealt Knockback;
		Team 1;
		Junker Queen;
	}

	conditions
	{
		Event Ability == Button(Secondary Fire);
	}

	actions
	{
		Event Player.ability_2 += 1;
		Wait(0.016, Restart When True);
		If(Event Player.ability_2 == 2);
			Set Ability Cooldown(Event Player, Button(Secondary Fire), 15);
			Skip If(!Is Game In Progress, 1);
			Event Player.knockback_value += 150;
		End;
		Event Player.ability_2 = 0;
	}
}

rule("Junker Queen | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Junker Queen;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		"Damage: 100 + 550 = 650"
		Damage(Victim, Event Player, Event Damage * 5.500);
	}
}

rule("Junkrat")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junkrat;
	}

	actions
	{
		Disallow Button(Event Player, Button(Ultimate));
		Set Damage Dealt(Event Player, 116.667);
		Event Player.max_health_percent = 120;
		Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
			Global.capture_players, Event Player) && Array Contains(Global.capture_players, Players In Slot(0, Team 2))) ? Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"), Top, 2, Null, Null, Null, String, Default Visibility);
		Event Player.huds[0] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("{0} deals damage by running over enemies", Ability Icon String(Hero(
			Junkrat), Button(Ultimate))), Top, 3, Null, Null, Custom Color(214, 145, 65, 255), String and Color, Default Visibility);
		Event Player.huds[1] = Last Text ID;
	}
}

rule("Junkrat | Ability 2")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Junkrat;
	}

	actions
	{
		If(Event Ability == Button(Ability 2));
			If(Event Player.usage_ultimate);
				Damage(Victim, Event Player, 9900);
			End;
			Abort If(!Is Game In Progress || Is Dead(Victim));
			Event Player.debuff_value += 300;
		Else If(Event Ability == Null);
			Event Player.ability_4 += Event Damage;
		End;
	}
}

rule("Junkrat | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junkrat;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is On Ground(Event Player) == True;
		(Is Dead(Event Player) || Custom String("{0}", Is Communicating Any Emote(Event Player)) != Custom String("0") || Has Status(
			Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned)) == False;
	}

	actions
	{
		Set Damage Dealt(Event Player, 1);
		Set Move Speed(Event Player, 125);
		Allow Button(Event Player, Button(Ultimate));
		Press Button(Event Player, Button(Ultimate));
		Wait(0.016, Ignore Condition);
		If(Is Using Ultimate(Event Player));
			Event Player.usage_ultimate = True;
		Else;
			Set Move Speed(Event Player, Event Player.initial_ms);
		End;
	}
}

rule("Junkrat | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junkrat;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Ultimate));
		Start Forcing Player Outlines(All Players(Team 2), Event Player, True, Color(Red), Always);
		Wait(1.488, Ignore Condition);
		If(!Is Using Ultimate(Event Player));
			Set Damage Dealt(Event Player, 116.667);
			Stop Forcing Player Outlines(All Players(Team 2), Event Player);
			Event Player.usage_ultimate = False;
			Abort;
		End;
		Add Health Pool To Player(Event Player, Health, 600, False, False);
		Event Player.health_pool = Last Created Health Pool;
		Set Knockback Dealt(Event Player, 0);
		Play Effect(All Players(All Teams), Reaper Wraith Form Sound, False, Event Player, 200);
		Create Effect(All Players(All Teams), Reaper Wraith Form Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.effects[1] = Last Created Entity;
		Set Status(Event Player, Null, Invincible, 9999);
		Small Message(Event Player, Custom String("invincible!"));
		Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
		Event Player.ability_4 = 0;
		While(Is Using Ultimate(Event Player));
			For Player Variable(Event Player, i_1, 0, 9, 1);
				Event Player.ability_1 = Eye Position(Players In Slot(0, Team 2)) + Up * 0.120 + Direction From Angles(40 * Event Player.i_1, 0)
					* 0.950;
				Event Player.ability_2 = Distance Between(Event Player.ability_1, Ray Cast Hit Position(Event Player.ability_1,
					Event Player.ability_1 + Down * 2, Empty Array, Empty Array, False));
				If(Event Player.ability_2 - Distance Between(Event Player.ability_1, Ray Cast Hit Position(Event Player.ability_1,
					Event Player.ability_1 + Down * 2, Event Player, Empty Array, True)) > 0.300);
					Set Move Speed(Event Player, 100);
					Event Player.ability_3 = Total Time Elapsed + 2;
					Players In Slot(0, Team 2).usage_ability[9] = Total Time Elapsed + 1;
					Set Status(Players In Slot(0, Team 2), Null, Burning, 0.256);
					Damage(Players In Slot(0, Team 2), Event Player, 8000);
					Play Effect(Event Player, Baptiste Biotic Launcher Explosion Sound, Null, Event Player, 100);
					Wait(0.112, Ignore Condition);
					Break;
				End;
				If(Event Player.ability_3 < Total Time Elapsed);
					Set Move Speed(Event Player, 125);
				End;
			End;
			Wait(0.016, Ignore Condition);
		End;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Set Damage Dealt(Event Player, 116.667);
		Event Player.usage_ultimate = False;
		Wait(0.912, Ignore Condition);
		Small Message(Event Player, Custom String("You dealt {0} damage!", Round To Integer(Event Player.ability_4, Down)));
		Wait(0.240, Ignore Condition);
		Remove Health Pool From Player(Event Player.health_pool);
		Stop Forcing Player Outlines(All Players(Team 2), Event Player);
		Set Knockback Dealt(Event Player, 100);
		Clear Status(Event Player, Invincible);
		Destroy Effect(Event Player.effects[1]);
	}
}

rule("Kiriko")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Kiriko;
	}

	actions
	{
		Event Player.max_health_percent = 120;
		Set Max Ammo(Event Player, 1, 12);
		Set Ammo(Event Player, 1, 12);
		Set Damage Dealt(Event Player, 111.112);
		Set Healing Dealt(Event Player, 225 / 130 * 100);
		Set Projectile Speed(Event Player, 50 / 24 * 100);
	}
}

disabled rule("Kiriko | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Kiriko;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Count Of(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element))) == 1;
		(Is Using Ability 2(Event Player) || Is On Wall(Event Player) || Is Dead(Event Player) || Custom String("{0}",
			Is Communicating Any Emote(Event Player)) != Custom String("0") || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Frozen) || Has Status(Event Player, Stunned)) == False;
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion Sound, False, Event Player, 90);
		Set Ability Cooldown(Event Player, Button(Ability 1), 12);
		Event Player.initial_ms += 27.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.effects[0] = Last Created Entity;
		Wait(2, Ignore Condition);
		Destroy Effect(Event Player.effects[0]);
		Event Player.initial_ms -= 27.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Kiriko | Ability 2")
{
	event
	{
		Player Dealt Healing;
		Team 1;
		Kiriko;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		Heal(Healee, Event Player, 200 - Event Healing);
	}
}

rule("Lifeweaver")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lifeweaver;
	}

	actions
	{
		Set Ultimate Ability Enabled(Event Player, False);
		Event Player.usage_ultimate = True;
		Add Health Pool To Player(Event Player, Health, 25, True, False);
		Event Player.max_health_percent = 100;
		Set Damage Dealt(Event Player, 151.516);
		Set Healing Dealt(Event Player, 150 / 80 * 100);
		Set Projectile Speed(Event Player, 135 / 80 * 100);
		Set Projectile Gravity(Event Player, (135 / 80) ^ 2 * 100);
		Wait(0.016, Ignore Condition);
		Heal(Event Player, Null, 1);
	}
}

rule("Lifeweaver | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Speed Of In Direction(Event Player, Up) == 0;
		Hero Of(Event Player) != Hero(Lifeweaver);
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.petal_platfrom = Y Component Of(Position Of(Event Player));
		Wait(0.096, Ignore Condition);
		If(Speed Of In Direction(Event Player, Up) == 0 && Y Component Of(Position Of(Event Player))
			- 1.020 > Event Player.petal_platfrom);
			Players On Hero(Hero(Lifeweaver), Team 1).support_value += Has Status(Event Player, Knocked Down) ? 1000 : (
				Event Player.in_combat && Health(Event Player) <= 100 * (Global.berserk ? 2.500 : 1) ? 600 : 300);
			Wait(1, Ignore Condition);
		End;
		Loop If Condition Is True;
	}
}

rule("Lifeweaver | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lifeweaver;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.ability_1 = Mapped Array(Filtered Array(Remove From Array(All Living Players(Team 1), Event Player), Has Spawned(
			Current Array Element)), Distance Between(Current Array Element, Position Of(Global.boss_player)));
		Event Player.ability_5 = Total Time Elapsed + 1.600;
		Event Player.ability_2 = Filtered Array(Remove From Array(All Living Players(Team 1), Event Player), Has Spawned(
			Current Array Element));
		While(Event Player.ability_5 > Total Time Elapsed);
			Wait(0.032, Ignore Condition);
			For Player Variable(Event Player, i_1, 0, Count Of(Event Player.ability_2), 1);
				If(Magnitude Of(Velocity Of(Event Player.ability_2[Event Player.i_1])) < 30.500 && Magnitude Of(Velocity Of(
					Event Player.ability_2[Event Player.i_1])) > 29.500);
					If(Has Status(Event Player.ability_2[Event Player.i_1], Stunned) || (Is Firing Primary(Global.boss_player) && !Has Status(
						Event Player.ability_2[Event Player.i_1], Phased Out) && Event Player.ability_1[Event Player.i_1] < 6 && Health(
						Event Player.ability_2[Event Player.i_1]) <= 100 * (Global.berserk ? 2.500 : 1)) + 20);
						Event Player.support_value += 1000;
					Else;
						Event Player.support_value += 400;
					End;
					Abort;
				End;
			End;
		End;
	}
}

rule("Lucio")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		LÃºcio;
	}

	actions
	{
		Event Player.max_health_percent = 120;
	}
}

rule("Lucio | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		LÃºcio;
	}

	conditions
	{
		Is In Alternate Form(Event Player) == True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Wait(0.032, Ignore Condition);
		Press Button(Event Player, Button(Ability 1));
		Wait(0.080, Ignore Condition);
		Set Ability 1 Enabled(Event Player, False);
		Loop If Condition Is True;
	}
}

rule("Lucio | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		LÃºcio;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Healing Dealt(Event Player, 30.770);
		Create Effect(All Players(All Teams), Ring, Color(Green), Update Every Frame(Position Of(Event Player)), 12,
			Visible To Position and Radius);
		Event Player.effects[0] = Last Created Entity;
		Wait Until(!Is Using Ability 2(Event Player), 3);
		Set Healing Dealt(Event Player, 100);
		Destroy Effect(Event Player.effects[0]);
	}
}

rule("Lucio | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Using Ability 2(Players On Hero(Hero(LÃºcio), Team 1)) == True;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(Players On Hero(Hero(LÃºcio), Team 1)), Barriers Do Not Block LOS)
			== True;
		Distance Between(Event Player, Players On Hero(Hero(LÃºcio), Team 1)) <= 12.500;
	}

	actions
	{
		Event Player.initial_ms += 37.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait(0.032, Ignore Condition);
		If(Distance Between(Event Player, Players On Hero(Hero(LÃºcio), Team 1)) > 12.500);
			Wait Until(!Is Using Ability 2(Players On Hero(Hero(LÃºcio), Team 1)) || Distance Between(Event Player, Players On Hero(Hero(LÃºcio),
				Team 1)) <= 12.500, 1);
		End;
		Event Player.initial_ms -= 37.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Loop If Condition Is True;
	}
}

rule("Lucio | Secondary Fire")
{
	event
	{
		Player Dealt Knockback;
		Team 1;
		LÃºcio;
	}

	conditions
	{
		Event Ability == Button(Secondary Fire);
	}

	actions
	{
		Set Ability Cooldown(Event Player, Event Ability, Ability Cooldown(Event Player, Event Ability) + 3 + Count Of(Filtered Array(
			Remove From Array(All Living Players(Team 1), Event Player), Has Spawned(Current Array Element))) * 0.800);
		Abort If(!Is Game In Progress);
		Event Player.knockback_value += 150;
	}
}

rule("Mauga")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mauga;
	}

	actions
	{
		Event Player.max_health_percent = 100;
		Set Damage Dealt(Event Player, 152.778);
		Event Player.health_normal = 500 - 1.600;
		Event Player.stored_spawn_position = 1;
		Call Subroutine(applyCustomHealth);
		Event Player.health_normal = 500 - (Max Health Of Type(Event Player, Health) - 500) - 1.600;
		Event Player.stored_spawn_position = Null;
	}
}

rule("Mauga | Health Pool")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mauga;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(0.128, Ignore Condition);
		Remove Health Pool From Player(Event Player.health_pool[0]);
		Add Health Pool To Player(Event Player, Health, 100, False, False);
		Event Player.health_pool[0] = Last Created Health Pool;
	}
}

rule("Mauga | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mauga;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Remove Health Pool From Player(Event Player.health_pool[0]);
		Add Health Pool To Player(Event Player, Health, 100, False, False);
		Event Player.health_pool[0] = Last Created Health Pool;
	}
}

rule("Mei")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mei;
	}

	actions
	{
		Set Max Ammo(Event Player, 0, 120);
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
		Event Player.ability_1 = Vector(0, 900, 0);
		Event Player.max_health_percent = 100;
		Set Projectile Gravity(Event Player, 120);
		Start Scaling Player(Event Player, 1.100, False);
	}
}

rule("Mei | Primary Fire")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Mei;
	}

	conditions
	{
		Event Ability == Button(Primary Fire);
	}

	actions
	{
		Victim.ms_debuff[1] = 15 * Global.resistance_multiplier;
		Victim.usage_ability[1] = Total Time Elapsed + 0.500;
		Abort If(!Is Game In Progress || Has Status(Victim, Stunned) || Has Status(Victim, Knocked Down) || Has Status(Victim, Frozen));
		Event Player.debuff_value += 4 * Global.resistance_multiplier;
	}
}

rule("Mei | Weapon")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mei;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == False;
	}

	actions
	{
		"175 / sec"
		Event Player.ability_3 = 175;
		Set Damage Dealt(Event Player, Event Player.ability_3);
		Wait Until(Is Firing Secondary(Event Player), 99999);
		"100 / shot"
		Event Player.ability_3 = 133.334;
		Set Damage Dealt(Event Player, Event Player.ability_3);
		Set Projectile Speed(Event Player, 150 / (1.150 * 5));
	}
}

rule("Mei | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mei;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.initial_ms += 25;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Destroy Effect(Array(Event Player.effects[0], Event Player.effects[1], Event Player.effects[2]));
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
		Heal(Event Player, Null, Max Health(Event Player));
		Event Player.ability_1 = Position Of(Event Player);
		Event Player.ability_2 = 1.500;
		Create Effect(All Players(All Teams), Ring, Color(Aqua), Event Player.ability_1, Update Every Frame(Event Player.ability_2),
			Visible To Position and Radius);
		Event Player.effects[0] = Last Created Entity;
		Create Effect(All Players(All Teams), Ring, Color(Aqua), Event Player.ability_1 + Up * 2.500, Update Every Frame(
			Event Player.ability_2), Visible To Position and Radius);
		Event Player.effects[1] = Last Created Entity;
		Create Effect(All Players(All Teams), Sparkles, Color(Aqua), Event Player.ability_1, Update Every Frame(
			Event Player.ability_2 + 0.750), Visible To Position and Radius);
		Event Player.effects[2] = Last Created Entity;
		While(Is Using Ability 1(Event Player));
			Event Player.ability_1 = Position Of(Event Player);
			Event Player.ability_2 = Min(Event Player.ability_2 + 0.080, 7.500);
			Wait(0.032, Ignore Condition);
		End;
		Wait(2, Restart When True);
		Event Player.initial_ms -= 25;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait(2, Restart When True);
		While(Event Player.ability_2 > 0);
			Event Player.ability_2 -= 0.120;
			Wait(0.032, Restart When True);
		End;
		Event Player.ability_1 = Vector(0, 900, 0);
		Destroy Effect(Array(Event Player.effects[0], Event Player.effects[1], Event Player.effects[2]));
	}
}

rule("Mei | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mei;
	}

	conditions
	{
		Y Component Of(Position Of(Players In Slot(0, Team 2))) >= Y Component Of(Event Player.ability_1) - 3;
		Y Component Of(Position Of(Players In Slot(0, Team 2))) <= Y Component Of(Event Player.ability_1) + 3;
		(X Component Of(Event Player.ability_1) - X Component Of(Position Of(Players In Slot(0, Team 2)))) * (X Component Of(
			Event Player.ability_1) - X Component Of(Position Of(Players In Slot(0, Team 2)))) + (Z Component Of(Event Player.ability_1)
			- Z Component Of(Position Of(Players In Slot(0, Team 2)))) * (Z Component Of(Event Player.ability_1) - Z Component Of(
			Position Of(Players In Slot(0, Team 2)))) <= (Event Player.ability_2 + 0.250) ^ 2;
	}

	actions
	{
		Players In Slot(0, Team 2).ms_debuff[17] = 30 * Global.resistance_multiplier;
		Players In Slot(0, Team 2).usage_ability[17] = Total Time Elapsed + 0.272;
		Damage(Players In Slot(0, Team 2), Event Player, 25 / Event Player.ability_3 * 100);
		Skip If(!Is Game In Progress || Is Dead(Players In Slot(0, Team 2)), 1);
		Event Player.debuff_value += 15 * Global.resistance_multiplier;
		Wait(0.256, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Mei | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mei;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.blocked_damage = Player Stat(Event Player, Damage Blocked);
		Wait Until(!Is Using Ability 2(Event Player), 9999);
		Wait(0.496, Restart When True);
		Abort If(Is Assembling Heroes);
		Event Player.support_value += Min(300, (Player Stat(Event Player, Damage Blocked) - Event Player.blocked_damage) * 0.750);
	}
}

rule("Mei | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Using Ability 2(Players On Hero(Hero(Mei), Team 1)) == True;
		Is Using Ultimate(Players On Hero(Hero(Reinhardt), Team 2)) == True;
		Has Status(Event Player, Knocked Down) == True;
		Speed Of In Direction(Event Player, Up) == 0;
		Is Game In Progress == True;
	}

	actions
	{
		While(Has Status(Event Player, Knocked Down) && Is Using Ability 2(Players On Hero(Hero(Mei), Team 1)));
			Event Player.mei_wall = Y Component Of(Position Of(Event Player));
			Wait(0.032, Ignore Condition);
			If(Has Status(Event Player, Knocked Down) && Speed Of In Direction(Event Player, Up) == 0 && Y Component Of(Position Of(
				Event Player)) - 1 > Event Player.mei_wall);
				Players On Hero(Hero(Mei), Team 1).support_value += 600;
				Break;
			End;
		End;
	}
}

rule("Mei | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mei;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
		Set Projectile Speed(Event Player, 90);
	}
}

rule("Mei | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Mei;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		If(Has Status(Victim, Frozen));
			Skip If(!Is Game In Progress, 2);
			Event Player.debuff_value += 25;
			Event Player.debuff_value += 500 * Global.resistance_multiplier;
			Wait(2.448 * Global.resistance_multiplier, Ignore Condition);
			Clear Status(Victim, Frozen);
		Else;
			Skip If(!Is Game In Progress, 1);
			Event Player.debuff_value += 25;
		End;
	}
}

rule("Mercy")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	actions
	{
		Event Player.max_health_percent = 120;
		Set Healing Dealt(Event Player, 110 / 55 * 100);
		If(Global.echo_player == Event Player);
			Set Ability Cooldown(Event Player, Button(Ability 2), 15);
		End;
		While(Is In Setup);
			Wait(0.016, Ignore Condition);
			Set Ability Cooldown(Event Player, Button(Ability 2), 60);
		End;
		Wait(0.032, Ignore Condition);
		If(Is Game In Progress);
			Play Effect(Event Player, Ring Explosion Sound, Null, Event Player, 90);
			Small Message(Event Player, Custom String("{0} cooldown: {1} sec!", Ability Icon String(Hero(Mercy), Button(Ability 2)),
				Round To Integer(Ability Cooldown(Event Player, Button(Ability 2)), Up)));
	}
}

rule("Mercy | Ability 2 Cooldown")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		Global.point - 10 < Total Time Elapsed;
		Is Game In Progress == True;
	}

	actions
	{
		Wait Until(!Is Using Ability 2(Event Player), 2);
		If(Ability Cooldown(Event Player, Button(Ability 2)) > 1);
			Small Message(Event Player, Custom String("{0}: -15 sec", Ability Icon String(Hero(Mercy), Button(Ability 2))));
			Wait(0.032, Ignore Condition);
			Set Ability Cooldown(Event Player, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2)) - 15);
		End;
	}
}

rule("Mercy | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.initial_ms -= 60;
		Set Move Speed(Event Player, Event Player.initial_ms * (Is Using Ultimate(Event Player) ? 0.250 : 1) / 0.250);
		Wait Until(!Is Using Ability 2(Event Player), 2);
		Event Player.initial_ms += 60;
		Set Move Speed(Event Player, Event Player.initial_ms * (Is Using Ultimate(Event Player) ? 0.611 : 1));
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Wait(0.016, Ignore Condition);
		Event Player.ability_2 = Filtered Array(Global.dead_players, Entity Exists(Current Array Element) && Is Alive(
			Current Array Element) && !Is In Spawn Room(Current Array Element));
		If(Event Player.ability_2);
			Modify Global Variable(dead_players, Remove From Array By Value, Event Player.ability_2);
			Set Status(Event Player, Null, Phased Out, 2.500);
			If(Is Game In Progress);
				Event Player.support_value += 2000;
			End;
			Destroy Effect(Event Player.res_effects);
			Create Effect(All Players(All Teams), Baptiste Immortality Field Protected Effect, Color(Team 1), Event Player, False, Visible To);
			Event Player.res_effects[0] = Last Created Entity;
			Create Effect(All Players(All Teams), Baptiste Immortality Field Protected Sound, False, Event Player, 100, Visible To);
			Event Player.res_effects[1] = Last Created Entity;
			Wait(2.500, Ignore Condition);
			Destroy Effect(Event Player.res_effects);
		Else;
			Set Ability Cooldown(Event Player, Button(Ability 2), 0.192);
		End;
	}
}

rule("Mercy | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(1.648, Abort When False);
		Wait Until(!Array Contains(Global.dead_players, Event Player), 9999);
		Abort If(Is Assembling Heroes);
		Create Effect(All Players(All Teams), Baptiste Immortality Field Protected Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.res_effects[0] = Last Created Entity;
		Create Effect(All Players(All Teams), Baptiste Immortality Field Protected Sound, False, Event Player, 100, Visible To);
		Event Player.res_effects[1] = Last Created Entity;
		Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.res_effects[2] = Last Created Entity;
		Set Status(Event Player, Null, Phased Out, 3.500);
		Event Player.temp_ms = 250 - Event Player.initial_ms;
		Event Player.initial_ms += Event Player.temp_ms;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Heal(Event Player, Null, 1000);
		Wait(3.500, Ignore Condition);
		Event Player.initial_ms -= Event Player.temp_ms;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Destroy Effect(Event Player.res_effects);
	}
}

rule("Mercy | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Healing Dealt(Event Player, 110 / 60 * 100);
		Event Player.initial_ms += 60;
		Set Move Speed(Event Player, Event Player.initial_ms * 0.611);
		While(Is Using Ultimate(Event Player));
			Heal(Event Player, Event Player, 6);
			Wait(0.080, Ignore Condition);
		End;
		Set Healing Dealt(Event Player, 110 / 55 * 100);
		Event Player.initial_ms -= 60;
		Set Move Speed(Event Player, Event Player.initial_ms / (Is Using Ability 2(Event Player) ? 0.250 : 1));
	}
}

rule("Moira")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	actions
	{
		Event Player.ability_2 = 1;
		Set Damage Dealt(Event Player, 66.670 / 65 * 100 * Event Player.ability_2);
		Event Player.ability_4 = 5;
		Event Player.max_health_percent = 120;
		disabled Disallow Button(Event Player, Button(Ability 2));
		Set Ability 2 Enabled(Event Player, False);
		Create Effect(!Is Using Ultimate(Event Player) && Event Player.ability_2 == 2 ? All Players(All Teams) : Empty Array,
			Mercy Damage Boosted Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.effects[0] = Last Created Entity;
		Create Effect(!Is Using Ultimate(Event Player) && Event Player.ability_2 == 2 ? All Players(All Teams) : Empty Array,
			Mercy Damage Boosted Sound, False, Event Player, 50, Visible To);
		Event Player.effects[1] = Last Created Entity;
		Create Effect(!Is Using Ultimate(Event Player) && Event Player.ability_2 == 3 ? All Players(All Teams) : Empty Array,
			Winston Primal Rage Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.effects[2] = Last Created Entity;
		Create Effect(!Is Using Ultimate(Event Player) && Event Player.ability_2 == 3 ? All Players(All Teams) : Empty Array,
			Winston Primal Rage Sound, False, Event Player, 50, Visible To);
		Event Player.effects[3] = Last Created Entity;
	}
}

rule("MoiraSetDamage | Subroutine")
{
	event
	{
		Subroutine;
		MoiraSetDamage;
	}

	actions
	{
		If(!Is Using Ultimate(Event Player));
			Set Damage Dealt(Event Player, 66.670 / 65 * 100 * Event Player.ability_2);
	}
}

rule("Moira | Secondary Fire")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Moira;
	}

	conditions
	{
		Event Ability == Button(Secondary Fire);
	}

	actions
	{
		If(Event Player.ability_1 < 26);
			Event Player.ability_1 += 1;
			If(Event Player.ability_1 % 13 == 0);
				Event Player.ability_2 += 1;
				Call Subroutine(MoiraSetDamage);
			End;
		End;
		Wait(0.128, Ignore Condition);
		If(Event Player.ability_2 > 1);
			Wait(2.224, Restart When True);
		End;
		While(Event Player.ability_1 > 0);
			Wait(0.160, Restart When True);
			If(Event Player.ability_1 % 13 == 0);
				Event Player.ability_2 -= 1;
				Call Subroutine(MoiraSetDamage);
			End;
			Event Player.ability_1 -= 1;
		End;
	}
}

disabled rule("Moira | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		(Is Using Ability 1(Event Player) || Is Using Ultimate(Event Player) || Is Dead(Event Player) || Custom String("{0}",
			Is Communicating Any Emote(Event Player)) != Custom String("0") || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Frozen) || Has Status(Event Player, Stunned)) == False;
	}
}

rule("Moira | Healing, Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Set Damage Dealt(Event Player, 66.670 / 65 * 100 * Event Player.ability_2);
		Set Healing Dealt(Event Player, 150 / 70 * 100);
		Remove Health Pool From Player(Event Player.health_pool);
		Wait Until(Is Using Ultimate(Event Player), 9999);
		Set Damage Dealt(Event Player, 150 / 70 * 100);
		Set Healing Dealt(Event Player, 250 / 140 * 100);
		Add Health Pool To Player(Event Player, Health, 50, False, False);
		Event Player.health_pool = Last Created Health Pool;
	}
}

rule("Orisa")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Orisa;
	}

	actions
	{
		Event Player.max_health_percent = 1;
		Set Max Health(Event Player, Event Player.max_health_percent);
		Set Damage Dealt(Event Player, 123.077);
		Set Knockback Dealt(Event Player, 66.667);
		Add Health Pool To Player(Event Player, Health, 492.250, True, False);
	}
}

rule("Orisa | Subroutine")
{
	event
	{
		Subroutine;
		OrisaFixedTeleport;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Set Status(Event Player, Null, Rooted, 1.200);
		Destroy Effect(Event Player.effects[5]);
		Create Effect(All Players(All Teams), Mei Frozen Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.effects[5] = Last Created Entity;
		Start Facing(Event Player, Facing Direction Of(Event Player), 10000, To World, None);
		Disallow Button(Event Player, Button(Ultimate));
		Set Melee Enabled(Event Player, False);
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Wait(1.200, Ignore Condition);
		Destroy Effect(Event Player.effects[5]);
		Stop Facing(Event Player);
		Allow Button(Event Player, Button(Ultimate));
		Set Melee Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
	}
}

rule("Orisa | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Orisa;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Add Health Pool To Player(Event Player, Health, 179, False, False);
		Event Player.health_pool[0] = Last Created Health Pool;
		Set Ammo(Event Player, 0, 50);
		Wait Until(!Is Using Ability 1(Event Player) || Is Using Ultimate(Event Player), 9999);
		Set Ammo(Event Player, 0, 50);
		Remove Health Pool From Player(Event Player.health_pool[0]);
	}
}

rule("Orisa | Damage Reduction")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Orisa;
	}

	conditions
	{
		(Is Using Ability 1(Event Player) || Is Using Ultimate(Event Player)) == True;
	}

	actions
	{
		"damage received: 45% * 1.09091 = 60%"
		Set Damage Received(Event Player, 109.091);
		Wait Until(!Is Using Ability 1(Event Player) && !Is Using Ultimate(Event Player), 9999);
		Set Damage Received(Event Player, 100);
	}
}

rule("Orisa | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Orisa;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.initial_ms += 52.500;
		For Player Variable(Event Player, i_1, 0, 78, 1);
			Set Move Speed(Event Player, Event Player.initial_ms / 1.500);
			Wait(0.016, Ignore Condition);
		End;
		If(Is Using Ability 2(Event Player));
			Press Button(Event Player, Button(Ability 2));
		End;
		Event Player.initial_ms -= 30;
		For Player Variable(Event Player, i_1, 0, 125, 1);
			Set Move Speed(Event Player, Event Player.initial_ms / 1.200);
			Wait(0.016, Ignore Condition);
		End;
		Event Player.initial_ms -= 22.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

disabled rule("Orisa | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Orisa;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		(Is Dead(Event Player) || Is Communicating Any Emote(Event Player) || Has Status(Event Player, Knocked Down) || Has Status(
			Event Player, Frozen) || Has Status(Event Player, Stunned) || Has Status(Event Player, Rooted)) == False;
	}

	actions
	{
		Create Effect(All Players(All Teams), Winston Primal Rage Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.effects[2] = Last Created Entity;
		Create Effect(All Players(All Teams), Winston Primal Rage Sound, False, Event Player, 85, Visible To);
		Event Player.effects[3] = Last Created Entity;
		Destroy Effect(Event Player.effects[4]);
		Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(Team 1), Event Player, False,
			Visible To Position and Radius);
		Event Player.effects[4] = Last Created Entity;
		Disable Movement Collision With Players(Event Player);
		Disallow Button(Event Player, Button(Ultimate));
		Set Melee Enabled(Event Player, False);
		Set Jump Enabled(Event Player, False);
		Set Crouch Enabled(Event Player, False);
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Event Player.ability_1 = True;
		Start Facing(Event Player, Forward, 10000, To Player, Direction and Turn Rate);
		Set Status(Event Player, Null, Rooted, 0.304);
		Start Camera(Event Player, Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player), 0);
		Wait(0.016, Ignore Condition);
		Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), World Vector Of(Vector(0, 3, -4),
			Event Player, Rotation And Translation), All Players(All Teams), Event Player, True)), Update Every Frame(Eye Position(
			Event Player)), 20);
		Wait(0.288, Ignore Condition);
		Event Player.initial_ms = 500;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), World Vector Of(Vector(0, 3, -4),
			Event Player, Rotation And Translation), All Players(All Teams), Event Player, True)), Update Every Frame(Eye Position(
			Event Player)), 0);
		Event Player.ability_4 = 0;
		Chase Player Variable At Rate(Event Player, ability_4, 1.024, 1, None);
		Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 0);
		Set Melee Enabled(Event Player, True);
		Wait Until(Has Status(Event Player, Stunned) || Has Status(Event Player, Rooted) || Is Dead(Event Player) || !Is In Line of Sight(
			World Vector Of(Vector(0.225, 1.150, 0.400), Event Player, Rotation And Translation), World Vector Of(Vector(0.225, 1.650, 2),
			Event Player, Rotation And Translation), Barriers Do Not Block LOS) || !Is In Line of Sight(World Vector Of(Vector(-0.225,
			1.150, 0.400), Event Player, Rotation And Translation), World Vector Of(Vector(-0.225, 1.650, 2), Event Player,
			Rotation And Translation), Barriers Do Not Block LOS) || (Health(Players In Slot(0, Team 2)) && !Has Status(Players In Slot(0,
			Team 2), Phased Out) && Is In Line of Sight(Eye Position(Event Player), Eye Position(Players In Slot(0, Team 2)),
			Barriers Do Not Block LOS) && Angle Between Vectors(Facing Direction Of(Event Player), Direction Towards(World Vector Of(
			Vector(0, 1.780, 0), Event Player, Rotation And Translation), World Vector Of(Vector(0, 1.780, 0), Players In Slot(0, Team 2),
			Rotation And Translation))) <= 60 && Distance Between(World Vector Of(Vector(0, 0.890, 1), Event Player,
			Rotation And Translation), World Vector Of(Vector(0, 0.890, 0), Players In Slot(0, Team 2), Rotation And Translation))
			<= 2.200), 1.024);
		Event Player.initial_ms = 0;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Enable Movement Collision With Players(Event Player);
		Stop Chasing Player Variable(Event Player, ability_4);
		Stop Forcing Throttle(Event Player);
		Set Ability Cooldown(Event Player, Button(Ability 2), 12);
		If(Is Alive(Event Player) && !Has Status(Event Player, Frozen) && !Has Status(Event Player, Rooted) && !Has Status(Event Player,
			Stunned) && Event Player.ability_4 < 1.024 && Health(Players In Slot(0, Team 2)) && !Has Status(Players In Slot(0, Team 2),
			Phased Out) && Is In Line of Sight(Eye Position(Event Player), Eye Position(Players In Slot(0, Team 2)),
			Barriers Do Not Block LOS) && Angle Between Vectors(Facing Direction Of(Event Player), Direction Towards(World Vector Of(
			Vector(0, 1.780, 0), Event Player, Rotation And Translation), World Vector Of(Vector(0, 1.780, 0), Players In Slot(0, Team 2),
			Rotation And Translation))) <= 60 && Distance Between(World Vector Of(Vector(0, 0.890, 1), Event Player,
			Rotation And Translation), World Vector Of(Vector(0, 0.890, 0), Players In Slot(0, Team 2), Rotation And Translation))
			<= 2.200);
			Stop Facing(Event Player);
			Set Facing(Event Player, Vector Towards(Eye Position(Event Player), World Vector Of(Vector(0, 1.200, 0), Players In Slot(0,
				Team 2), Rotation And Translation)), To World);
			Set Melee Enabled(Event Player, True);
			Set Damage Dealt(Event Player, 1000);
			Set Ability Cooldown(Event Player, Button(Melee), 0);
			Press Button(Event Player, Button(Melee));
			Set Status(Players In Slot(0, Team 2), Event Player, Stunned, 1.200);
			Skip If(!Is Game In Progress, 1);
			Event Player.debuff_value += 300;
			Apply Impulse(Players In Slot(0, Team 2), World Vector Of(Vector(0, 0.250, 1), Event Player, Rotation), 16, To World,
				Cancel Contrary Motion);
			Set Ability Cooldown(Event Player, Button(Ability 2), 16 + Count Of(Filtered Array(Remove From Array(All Living Players(Team 1),
				Event Player), Has Spawned(Current Array Element))) * 1.600);
			Wait(0.016, Ignore Condition);
			Start Facing(Event Player, Forward, 10000, To Player, Direction and Turn Rate);
			Start Rule(OrisaAbility2, Restart Rule);
		End;
		Start Camera(Event Player, Update Every Frame(Eye Position(Event Player)), Update Every Frame(Eye Position(Event Player)), 20);
		Event Player.initial_ms += Is Using Ability 1(Event Player) ? 150 : 130;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait(0.192, Ignore Condition);
		Stop Camera(Event Player);
		Stop Facing(Event Player);
		Allow Button(Event Player, Button(Ultimate));
		Set Jump Enabled(Event Player, True);
		Set Crouch Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Set Damage Dealt(Event Player, 80.810);
		Destroy Effect(Array(Event Player.effects[2], Event Player.effects[3], Event Player.effects[4]));
		Event Player.ability_1 = False;
	}
}

disabled rule("Orisa | Ability 2, Subroutine")
{
	event
	{
		Subroutine;
		OrisaAbility2;
	}

	actions
	{
		Event Player.initial_ms += 30;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait(2, Ignore Condition);
		Event Player.initial_ms -= 30;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Orisa | Ability 3")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Orisa;
	}

	conditions
	{
		disabled Is Firing Secondary(Event Player) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
	}

	actions
	{
		Set Damage Dealt(Event Player, 333.334);
		Set Projectile Speed(Event Player, 100 * 55 / 70);
		Set Projectile Gravity(Event Player, 100 * 55 / 70 * 55 / 70);
		Wait(0.320, Ignore Condition);
		Set Projectile Speed(Event Player, 100);
		Set Projectile Gravity(Event Player, 100);
		Abort If(Is Using Ultimate(Event Player));
		Set Damage Dealt(Event Player, 123.077);
	}
}

rule("Orisa | Ability 3")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Orisa;
	}

	conditions
	{
		(Event Ability == Button(Secondary Fire) && !Event Player.ability_3) == True;
	}

	actions
	{
		Event Player.ability_3 = True;
		Skip If(!Is Game In Progress || Is Dead(Victim), 1);
		Event Player.debuff_value = 200 * Global.resistance_multiplier;
		Wait Until(Ability Cooldown(Event Player, Event Ability) > 0, 1);
		Set Ability Cooldown(Event Player, Event Ability, Ability Cooldown(Event Player, Event Ability) + 5 + Count Of(Filtered Array(
			Remove From Array(All Living Players(Team 1), Event Player), Has Spawned(Current Array Element))) * 1);
		Wait Until(Ability Cooldown(Event Player, Event Ability) == 0, 9999);
		Abort If(Hero Of(Event Player) != Hero(Orisa));
		Event Player.ability_3 = False;
	}
}

rule("Orisa | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Orisa;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 200);
		Remove Health Pool From Player(Event Player.health_pool[0]);
		Add Health Pool To Player(Event Player, Health, 179, False, False);
		Event Player.health_pool[0] = Last Created Health Pool;
		Wait Until(!Is Using Ultimate(Event Player), 9999);
		Set Damage Dealt(Event Player, 123.077);
		Remove Health Pool From Player(Event Player.health_pool[0]);
	}
}

rule("Orisa | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Orisa;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
		Event Was Environment == False;
		Event Damage > 80;
	}

	actions
	{
		Heal(Event Player, Null, Event Damage / 2);
	}
}

rule("Pharah")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Pharah;
	}

	actions
	{
		Set Knockback Received(Event Player, 133.334);
		Event Player.max_health_percent = 120;
		Set Ability 2 Enabled(Event Player, False);
	}
}

disabled rule("Pharah | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Pharah;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Set Projectile Speed(Event Player, 45 / 40 * 100);
		Wait Until(Is Using Ability 2(Event Player), 99999);
		Set Projectile Speed(Event Player, 35 / 60 * 100);
	}
}

rule("Pharah | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Pharah;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		"Damage: 110% (125% * 88%)"
		Set Damage Dealt(Event Player, 88);
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		For Player Variable(Event Player, i_1, 0, 30, 1);
			If(Is Using Ultimate(Event Player));
				Remove Health Pool From Player(Event Player.health_pool);
				"100 hp / 1.44 sec"
				Add Health Pool To Player(Event Player, Health, Event Player.own_overhealth + 3.333, False, False);
				Event Player.health_pool = Last Created Health Pool;
				Wait(0.048, Ignore Condition);
			Else;
				Break;
			End;
		End;
		For Player Variable(Event Player, i_1, 0, 15, 1);
			If(Is Using Ultimate(Event Player));
				Remove Health Pool From Player(Event Player.health_pool);
				"150 hp / 0.720 sec"
				Add Health Pool To Player(Event Player, Health, Event Player.own_overhealth + 10, False, False);
				Event Player.health_pool = Last Created Health Pool;
				Wait(0.048, Ignore Condition);
			Else;
				Break;
			End;
		End;
		Wait Until(!Is Using Ultimate(Event Player), 1);
		Set Damage Dealt(Event Player, 100);
		Wait(0.752, Ignore Condition);
		Remove Health Pool From Player(Event Player.health_pool);
	}
}

rule("Pharah | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Pharah;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Victim.ms_debuff[2] = 30 * Global.resistance_multiplier;
		Victim.usage_ability[2] = Total Time Elapsed + 0.250;
	}
}

rule("Ramattra")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ramattra;
	}

	actions
	{
		Event Player.max_health_percent = 1;
		Set Max Health(Event Player, Event Player.max_health_percent);
		Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
			Global.capture_players, Event Player) && Array Contains(Global.capture_players, Players In Slot(0, Team 2))) ? Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"), Top, 2, Null, Null, Null, String, Default Visibility);
		Event Player.huds[0] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("Dealing damage with {0} reduces enemies' ultimate charge",
			Ability Icon String(Hero(Ramattra), Button(Ultimate)), Ability Icon String(Hero(Reinhardt), Button(Ultimate))), Top, 3, Null,
			Null, Custom Color(214, 145, 65, 255), Visible To, Default Visibility);
		Event Player.huds[1] = Last Text ID;
	}
}

rule("Ramattra | Omnic Form")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ramattra;
	}

	conditions
	{
		Custom String("{0}", Is Using Ability 1(Event Player)) == Custom String("0");
		Health(Event Player) > 0;
	}

	actions
	{
		Event Player.ability_1 = 0;
		Set Damage Dealt(Event Player, 100);
		For Player Variable(Event Player, i_1, 0, 2, 1);
			Remove Health Pool From Player(Event Player.health_pool[Event Player.i_1]);
		End;
		Add Health Pool To Player(Event Player, Health, 345.821, True, False);
		Event Player.health_pool[0] = Last Created Health Pool;
		Add Health Pool To Player(Event Player, Health, 200, False, False);
		Event Player.health_pool[1] = Last Created Health Pool;
		Heal(Event Player, Null, 297.010);
		Event Player.initial_ms += 17.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait(2, Ignore Condition);
		Event Player.initial_ms -= 17.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Ramattra | Nemesis Form")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ramattra;
	}

	conditions
	{
		Custom String("{0}", Is Using Ability 1(Event Player)) != Custom String("0");
	}

	actions
	{
		Set Damage Dealt(Event Player, 150);
		Event Player.initial_ms -= 10;
		Set Move Speed(Event Player, Event Player.initial_ms);
		For Player Variable(Event Player, i_1, 0, 2, 1);
			Remove Health Pool From Player(Event Player.health_pool[Event Player.i_1]);
		End;
		Add Health Pool To Player(Event Player, Health, 44.750, True, False);
		Event Player.health_pool[0] = Last Created Health Pool;
		Add Health Pool To Player(Event Player, Health, 400, False, False);
		Event Player.health_pool[1] = Last Created Health Pool;
		Wait Until(Custom String("{0}", Is Using Ability 1(Event Player)) == Custom String("0"), 9999);
		Event Player.initial_ms += 10;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Ramattra | Nemesis Form")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Ramattra;
	}

	conditions
	{
		Custom String("{0}", Is Using Ability 1(Event Player)) != Custom String("0");
		Event Damage >= 60;
		Event Ability != Null;
	}

	actions
	{
		If(!Event Player.ability_3);
			Event Player.initial_ms += 10;
			Set Move Speed(Event Player, Event Player.initial_ms);
			Event Player.ability_3 = True;
		End;
		Event Player.ability_4 = Health Of Type(Event Player, Health) - (Max Health Of Type(Event Player, Health) - Max(0, Max Health(
			Event Player) - Health(Event Player) - Max Health Of Type(Event Player, Shields) - Max Health Of Type(Event Player, Armor)))
			- Event Player.jq_health_pool - Event Player.lucio_health_pool;
		Remove Health Pool From Player(Event Player.health_pool[1]);
		Add Health Pool To Player(Event Player, Health, Min(Event Player.ability_4 + 40, 800), False, False);
		Event Player.health_pool[1] = Last Created Health Pool;
		Wait(1.500, Restart When True);
		Abort If(Hero Of(Event Player) != Hero(Ramattra));
		Event Player.ability_3 = False;
		Event Player.initial_ms -= 10;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Ramattra | Ability 2")
{
	event
	{
		Player Took Damage;
		Team 2;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Ramattra);
		Event Ability == Button(Ability 2);
	}

	actions
	{
		Event Player.ravenous_vortex = True;
		Victim.ms_debuff[13] = 50 * Global.resistance_multiplier;
		Victim.usage_ability[13] = Total Time Elapsed + 0.208;
		Skip If(!Is Game In Progress, 1);
		Attacker.debuff_value += 30 * Global.resistance_multiplier;
		Wait(0.208, Restart When True);
		Event Player.ravenous_vortex = False;
	}
}

rule("Ramattra | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Ramattra;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
		Event Damage < 50;
	}

	actions
	{
		Damage(Victim, Event Player, Event Damage / 1.500);
		Event Player.ability_1 += 1;
		If(Event Player.ability_1 % 5 == 0);
			Set Ultimate Charge(Victim, Ultimate Charge Percent(Victim) - 5 * Global.resistance_multiplier);
			Skip If(!Is Game In Progress, 1);
			Event Player.debuff_value += 50 * Global.resistance_multiplier;
		End;
	}
}

rule("Reaper")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	actions
	{
		Event Player.max_health_percent = 100;
		Set Damage Dealt(Event Player, 112.500);
		Add Health Pool To Player(Event Player, Health, 150, False, False);
		Event Player.health_pool[0] = Last Created Health Pool;
	}
}

rule("Reaper | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Remove Health Pool From Player(Event Player.health_pool[0]);
		Add Health Pool To Player(Event Player, Health, 150, False, False);
		Event Player.health_pool[0] = Last Created Health Pool;
		Event Player.initial_ms += 60;
		While(Is Using Ability 1(Event Player));
			Set Move Speed(Event Player, Event Player.initial_ms / 1.500);
			Wait(0.016, Ignore Condition);
		End;
		Event Player.initial_ms -= 60;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Reaper | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 2)) > 0;
	}

	actions
	{
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
		Event Player.initial_ms += 25;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait Until(Is Using Ability 1(Event Player), 2);
		Event Player.initial_ms -= 25;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Reaper | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Remove Health Pool From Player(Event Player.health_pool[1]);
		Add Health Pool To Player(Event Player, Health, 250, False, False);
		Event Player.health_pool[1] = Last Created Health Pool;
		Set Jump Vertical Speed(Event Player, 150);
		Event Player.initial_ms += 90;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Set Damage Dealt(Event Player, 200);
		Wait Until(!Is Using Ultimate(Event Player), 99999);
		Set Damage Dealt(Event Player, 112.500);
		Event Player.initial_ms -= 90;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Set Jump Vertical Speed(Event Player, 100);
	}
}

rule("Reaper | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Reaper;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Victim.ms_debuff[4] = 30 * Global.resistance_multiplier;
		Victim.usage_ability[4] = Total Time Elapsed + 0.250;
	}
}

rule("Rein")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	actions
	{
		Event Player.health_pool = Empty Array;
		Event Player.max_health_percent = 250 / 1400 * 100;
		Set Max Health(Event Player, Event Player.max_health_percent);
		Set Damage Dealt(Event Player, 160);
		Disallow Button(Event Player, Button(Ultimate));
		Start Scaling Barriers(Event Player, 0.647, False);
		Event Player.health_normal = 500 - 1.600;
		Event Player.stored_spawn_position = 1;
		Call Subroutine(applyCustomHealth);
		Event Player.health_normal = 500 - (Max Health Of Type(Event Player, Health) - 500) - 1.600;
		Event Player.stored_spawn_position = Null;
		Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
			Global.capture_players, Event Player) && Array Contains(Global.capture_players, Players In Slot(0, Team 2))) ? Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(" \n\n\n\n\n\n\n\n\n\n\n"), Top, 2, Null, Null, Null, String,
			Default Visibility);
		Event Player.huds[0] = Last Text ID;
		Create Progress Bar HUD Text(Event Player.usage_ultimate ? Event Player : Empty Array, Event Player.ability_3, Custom String(
			"{0} sec", String Slice(Event Player.ability_3 * 0.070, 0, 3)), Top, 3, Color(Black), Color(Yellow),
			Visible To Values and Color, Default Visibility);
		Event Player.huds[1] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Event Player.usage_ultimate ? Custom String(" \n\n\n\n\n\n\n") : Custom String(
			" \n\n\n\n\n\n\n\n\n\n"), Top, 4, Null, Null, Null, String, Default Visibility);
		Event Player.huds[2] = Last Text ID;
		Create HUD Text(Event Player, Custom String("{0} dmg. reduction: {1}%", Ability Icon String(Hero(Reinhardt), Button(
			Secondary Fire)), Is Firing Secondary(Event Player) && Is In View Angle(Event Player, Players In Slot(0, Team 2), 55)
			? 100 : 0), Null, Null, Top, 5, Is Firing Secondary(Event Player) && Is In View Angle(Event Player, Players In Slot(0, Team 2),
			55) ? Color(Green) : Color(Red), Null, Null, String and Color, Default Visibility);
		Event Player.huds[3] = Last Text ID;
	}
}

rule("Rein | Health Pool")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(0.144, Ignore Condition);
		Add Health Pool To Player(Event Player, Health, 200, False, False);
		Event Player.health_pool[0] = Last Created Health Pool;
	}
}

rule("Rein | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 600 / 275 * 100);
		Remove Health Pool From Player(Event Player.health_pool[0]);
		Add Health Pool To Player(Event Player, Health, 200, False, False);
		Event Player.health_pool[0] = Last Created Health Pool;
		Wait Until(!Is Using Ability 1(Event Player), 3.600);
		Event Player.initial_ms += 25;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait(0.032, Ignore Condition);
		Skip If(Is Using Ability 2(Event Player), 1);
		Set Damage Dealt(Event Player, 160);
		Wait(2, Ignore Condition);
		Event Player.initial_ms -= 25;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Rein | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(0.592, Ignore Condition);
		Event Player.ability_4 = Horizontal Facing Angle Of(Event Player);
		Wait(0.016, Ignore Condition);
		If(Angle Difference(Horizontal Facing Angle Of(Event Player), Event Player.ability_4) > 0);
			Start Accelerating(Event Player, Right, 100, 5, To Player, Direction Rate and Max Speed);
		Else If(Angle Difference(Horizontal Facing Angle Of(Event Player), Event Player.ability_4) < 0);
			Start Accelerating(Event Player, Left, 100, 5, To Player, Direction Rate and Max Speed);
		Else;
			Stop Accelerating(Event Player);
		End;
		Loop If Condition Is True;
		Stop Accelerating(Event Player);
	}
}

rule("Rein | Ability 1")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Event Ability == Button(Ability 1);
	}

	actions
	{
		Wait(0.032, Ignore Condition);
		Abort If(Event Damage < 400);
		Set Status(Victim, Event Player, Stunned, 1.500 * Global.resistance_multiplier);
		Skip If(Is Dead(Victim), 1);
		Event Player.debuff_value += 300 * Global.resistance_multiplier;
		Wait Until(Ability Cooldown(Event Player, Event Ability) > 0, 3);
		Set Ability Cooldown(Event Player, Event Ability, Ability Cooldown(Event Player, Event Ability) + 3 + Count Of(Filtered Array(
			Remove From Array(All Living Players(Team 1), Event Player), Has Spawned(Current Array Element))) * 1);
		Event Player.initial_ms += 20;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait(2, Ignore Condition);
		Abort If(Hero Of(Event Player) != Hero(Reinhardt));
		Event Player.initial_ms -= 20;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Rein | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Has Status(Event Player, Knocked Down) == True;
		Ability Cooldown(Players On Hero(Hero(Reinhardt), Team 2), Button(Ability 1)) >= (Array Contains(Global.selected_talents, 5)
			? 7.936 : 9.936);
		Ability Cooldown(Event Player, Button(Ability 1)) >= 6.944;
	}

	actions
	{
		Clear Status(Event Player, Knocked Down);
		Wait(0.992, Ignore Condition);
		Disable Movement Collision With Players(Event Player);
		Wait(2, Ignore Condition);
		Enable Movement Collision With Players(Event Player);
	}
}

rule("Rein | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 150 / 120 * 100);
		Wait Until(!Is Using Ability 2(Event Player), 99999);
		Set Damage Dealt(Event Player, 160);
	}
}

rule("Rein | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		(Is Dead(Event Player) || Custom String("{0}", Is Communicating Any Emote(Event Player)) != Custom String("0") || Has Status(
			Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned)) == False;
	}

	actions
	{
		Event Player.usage_ultimate = True;
		Set Ultimate Ability Enabled(Event Player, False);
		Set Ability Cooldown(Event Player, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)) - 4);
		Small Message(Event Player, Custom String("  +450 health"));
		Small Message(Event Player, Custom String("  +50% damage"));
		Event Player.initial_ms += 20;
		Set Move Speed(Event Player, Event Player.initial_ms);
		For Player Variable(Event Player, i_1, 0, 9, 1);
			Add Health Pool To Player(Event Player, Health, 50, False, False);
			Modify Player Variable(Event Player, health_pool, Append To Array, Last Created Health Pool);
		End;
		Event Player.ability_3 = 100;
		Chase Player Variable Over Time(Event Player, ability_3, 0, 7, None);
		Create Effect(All Players(All Teams), Winston Primal Rage Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.effects[0] = Last Created Entity;
		Create Effect(All Players(All Teams), Winston Primal Rage Sound, False, Event Player, 100, Visible To);
		Event Player.effects[1] = Last Created Entity;
		Wait Until(Is Dead(Event Player), 7);
		Destroy Effect(Array(Event Player.effects[0], Event Player.effects[1]));
		Stop Chasing Player Variable(Event Player, ability_3);
		Event Player.ability_3 = 0;
		Set Ultimate Ability Enabled(Event Player, True);
		Event Player.usage_ultimate = False;
		Event Player.initial_ms -= 20;
		Set Move Speed(Event Player, Event Player.initial_ms);
		For Player Variable(Event Player, i_1, 0, 9, 1);
			Remove Health Pool From Player(Event Player.health_pool[1]);
			Modify Player Variable(Event Player, health_pool, Remove From Array By Index, 1);
			Wait(0.480, Ignore Condition);
		End;
		Loop If Condition Is True;
	}
}

rule("Rein | Barrier Move Speed")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Wait(0.096, Ignore Condition);
		Abort If Condition Is False;
		Event Player.initial_ms -= 25;
		While(Is Firing Secondary(Event Player));
			Set Move Speed(Event Player, Event Player.initial_ms / 0.700);
			Wait(0.016, Ignore Condition);
		End;
		Event Player.initial_ms += 25;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Rein | Barrier")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		(Is Firing Secondary(Event Player) && Is In View Angle(Event Player, Players In Slot(0, Team 2), 55)) == True;
	}

	actions
	{
		Event Player.dmg_received_0 = True;
		Wait Until(!Is Firing Secondary(Event Player) || !Is In View Angle(Event Player, Players In Slot(0, Team 2), 60), 9999);
		Wait(0.064, Restart When True);
		Event Player.dmg_received_0 = False;
	}
}

rule("Roadhog")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Roadhog;
	}

	actions
	{
		Event Player.max_health_percent = 76.923;
		Set Max Health(Event Player, Event Player.max_health_percent);
		Set Projectile Speed(Event Player, 200);
		disabled Set Healing Dealt(Event Player, 100);
	}
}

rule("Roadhog | Ability 1")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Roadhog;
	}

	conditions
	{
		Event Ability == Button(Ability 1);
	}

	actions
	{
		Damage(Victim, Event Player, 210);
		Set Ammo(Event Player, 0, Min(Max Ammo(Event Player, 0), Ammo(Event Player, 0) + 2));
		Cancel Primary Action(Event Player);
		Set Environment Credit Player(Victim, Event Player);
		Wait(0.016, Ignore Condition);
		Set Ability Cooldown(Event Player, Event Ability, Ability Cooldown(Event Player, Event Ability) + 4 + Count Of(Filtered Array(
			Remove From Array(All Living Players(Team 1), Event Player), Has Spawned(Current Array Element))) * 1.200);
		Set Status(Victim, Event Player, Stunned, 1.200 * Global.resistance_multiplier);
		Abort If(!Is Game In Progress || Is Dead(Victim));
		Event Player.debuff_value += 250 * Global.resistance_multiplier;
	}
}

rule("Roadhog | Secondary Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Roadhog;
	}

	actions
	{
		Event Player.ability_3 = Ability Resource(Event Player, Button(Secondary Fire));
		Wait(0.016, Ignore Condition);
		If(Ability Resource(Event Player, Button(Secondary Fire)) < Event Player.ability_3);
			If(!Event Player.ability_2);
				Event Player.ability_2 = True;
				Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(Team 1), Event Player, False, Visible To);
				Event Player.effects[0] = Last Created Entity;
				Event Player.initial_ms += 32.500;
				Set Move Speed(Event Player, Event Player.initial_ms);
				Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
			End;
		Else If(Event Player.ability_2);
			Event Player.ability_2 = False;
			Destroy Effect(Event Player.effects[0]);
			Event Player.initial_ms -= 32.500;
			Set Move Speed(Event Player, Event Player.initial_ms);
		End;
		Loop;
	}
}

rule("Roadhog | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Roadhog;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Victim.ms_debuff[7] = 30 * Global.resistance_multiplier;
		Victim.usage_ability[7] = Total Time Elapsed + 0.250;
	}
}

rule("Roadhog | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Roadhog;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Is Using Ability 2(Event Player) == False;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Event Player.initial_ms += 42.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait Until(!Is Using Ultimate(Event Player) || !Is Button Held(Event Player, Button(Primary Fire)) || Is Using Ability 2(
			Event Player), 9999);
		Event Player.initial_ms -= 42.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Sigma")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sigma;
	}

	actions
	{
		Event Player.max_health_percent = 60;
		Set Max Health(Event Player, Event Player.max_health_percent);
		Add Health Pool To Player(Event Player, Health, 15, True, False);
		Set Projectile Speed(Event Player, 160);
		Set Projectile Gravity(Event Player, 100);
		disabled Create Effect(All Players(All Teams), Sphere, Color(Green), Event Player.ability_3, 0.250, Visible To Position and Radius);
	}
}

rule("Sigma | Knockback")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sigma;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Set Knockback Dealt(Event Player, 0);
		Wait Until(Is Using Ability 2(Event Player), 9999);
		Set Projectile Speed(Event Player, 200);
		Set Projectile Gravity(Event Player, 240);
		Set Knockback Dealt(Event Player, 100);
		Wait(0.656, Ignore Condition);
		Set Projectile Speed(Event Player, 160);
		Set Projectile Gravity(Event Player, 100);
		Wait(1.328, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Sigma | Barrier")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sigma;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Button(Secondary Fire));
		Event Player.ability_6 = Facing Direction Of(Event Player);
		disabled Event Player.ability_6 = Array(X Component Of(Facing Direction Of(Event Player)), Z Component Of(Facing Direction Of(
			Event Player)));
		Event Player.ability_3 = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 3.250, Null, Null, False) - Facing Direction Of(Event Player) * 0.250;
		Event Player.usage_ability = True;
		While(Event Player.usage_ability);
			Wait(0.016, Ignore Condition);
		End;
	}
}

disabled rule("Sigma | Barrier")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sigma;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Secondary Fire)) > 0;
		Event Player.usage_ability == True;
	}

	actions
	{
		Event Player.usage_ability = False;
	}
}

disabled rule("Sigma | Barrier")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players On Hero(Hero(Sigma), Team 1).usage_ability == True;
		Update Every Frame(Absolute Value(X Component Of(Players On Hero(Hero(Sigma), Team 1).ability_6) * X Component Of(Position Of(
			Event Player)) + Y Component Of(Players On Hero(Hero(Sigma), Team 1).ability_6) * Y Component Of(Position Of(Event Player))
			+ Z Component Of(Players On Hero(Hero(Sigma), Team 1).ability_6) * Z Component Of(Position Of(Event Player)) + Players On Hero(
			Hero(Sigma), Team 1).ability_5[2]) / Square Root(X Component Of(Players On Hero(Hero(Sigma), Team 1).ability_6)
			^ 2 + Y Component Of(Players On Hero(Hero(Sigma), Team 1).ability_6) ^ 2 + Z Component Of(Players On Hero(Hero(Sigma), Team 1)
			.ability_6) ^ 2)) <= 1.500;
	}

	actions
	{
		Apply Impulse(Event Player, Up, 6, To World, Incorporate Contrary Motion);
		Apply Impulse(Event Player, Direction Towards(Position Of(Event Player), Players On Hero(Hero(Sigma), Team 1).ability_3), 16,
			To World, Incorporate Contrary Motion);
	}
}

rule("Sigma | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sigma;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(1.984, Ignore Condition);
		Abort If(!Is Using Ability 1(Event Player));
		Wait(0.048, Ignore Condition);
		If(Event Player.own_overhealth > 0);
			Damage(Event Player, Null, Event Player.own_overhealth);
			disabled Set Player Health(Event Player, Health(Event Player) - Event Player.own_overhealth);
			Wait(0.016, Ignore Condition);
			Remove Health Pool From Player(Event Player.health_pool);
			Add Health Pool To Player(Event Player, Health, 300, False, False);
			Event Player.health_pool = Last Created Health Pool;
		Else;
			Set Ability Cooldown(Event Player, Button(Ability 1), 6);
		End;
	}
}

rule("Sigma | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sigma;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 2)) > 0;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), 10);
	}
}

rule("Sigma | Ability 2")
{
	event
	{
		Player Dealt Knockback;
		Team 1;
		Sigma;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
		Event Player != Victim;
	}

	actions
	{
		Set Knockback Dealt(Event Player, 0);
		If(Event Damage >= 100);
			Skip If(!Is Game In Progress || Is Dead(Victim), 1);
			Event Player.debuff_value += 250 * Global.resistance_multiplier;
			Wait Until(Ability Cooldown(Event Player, Event Ability) > 0, 0.800);
			Wait(0.016, Ignore Condition);
			Set Ability Cooldown(Event Player, Event Ability, Ability Cooldown(Event Player, Event Ability) + 4 + Count Of(Filtered Array(
				Remove From Array(All Living Players(Team 1), Event Player), Has Spawned(Current Array Element))) * 1.200);
		Else;
			Skip If(!Is Game In Progress, 1);
			Event Player.knockback_value += 75 * Global.resistance_multiplier;
			Wait Until(Ability Cooldown(Event Player, Event Ability) > 0, 0.800);
			Wait(0.016, Ignore Condition);
			Set Ability Cooldown(Event Player, Event Ability, Ability Cooldown(Event Player, Event Ability) + 2 + Count Of(Filtered Array(
				Remove From Array(All Living Players(Team 1), Event Player), Has Spawned(Current Array Element))) * 0.600);
		End;
	}
}

rule("Sigma | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Sigma;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Wait(2, Abort When False);
		Skip If(!Is Game In Progress, 1);
		Event Player.debuff_value += 350;
		Set Damage Dealt(Event Player, 1175 / (Max Health(Victim) * 0.750) * 100);
		Event Player.usage_ultimate = True;
		Wait Until(Is On Ground(Victim), 4);
		Set Damage Dealt(Event Player, 100);
		Wait(0.032, Ignore Condition);
		Event Player.usage_ultimate = False;
	}
}

rule("Sojourn")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sojourn;
	}

	actions
	{
		Set Damage Dealt(Event Player, 138.462);
		Event Player.max_health_percent = 120;
		Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
			Global.capture_players, Event Player) && Array Contains(Global.capture_players, Players In Slot(0, Team 2))) ? Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"), Top, 2, Null, Null, Null, String, Default Visibility);
		Event Player.huds[0] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("{0} can knock down enemies, dealing damage", Ability Icon String(Hero(
			Sojourn), Button(Ability 1))), Top, 3, Null, Null, Custom Color(214, 145, 65, 255), Visible To, Default Visibility);
		Event Player.huds[1] = Last Text ID;
	}
}

rule("Sojourn | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sojourn;
	}

	conditions
	{
		Vertical Speed Of(Event Player) > 7.800;
	}

	actions
	{
		Apply Impulse(Event Player, Up, 5, To World, Incorporate Contrary Motion);
	}
}

rule("Sojourn | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sojourn;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		While(Is Using Ability 1(Event Player));
			Event Player.ability_1 = Filtered Array(Players Within Radius(Event Player, 1.700, Team 2, Surfaces), !Has Status(
				Current Array Element, Phased Out) && Health(Current Array Element) > 0);
			If(Event Player.ability_1 != Empty Array);
				Damage(Event Player.ability_1, Event Player, 200);
				Set Status(Event Player.ability_1, Event Player, Knocked Down, 1.500 * Global.resistance_multiplier);
				Wait(0.016, Ignore Condition);
				Skip If(!Is Game In Progress || Is Dead(Event Player.ability_1), 1);
				Event Player.debuff_value += 250 * Global.resistance_multiplier;
				Break;
			End;
			Wait(0.016, Ignore Condition);
		End;
	}
}

rule("Sojourn | Ability 2")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Sojourn;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		Victim.ms_debuff[8] = 25 * Global.resistance_multiplier;
		Victim.usage_ability[8] = Total Time Elapsed + 0.250;
		Abort If(!Is Game In Progress);
		Event Player.debuff_value += 13.158 * Global.resistance_multiplier;
	}
}

rule("Sojourn | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sojourn;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Add Health Pool To Player(Event Player, Health, 100, False, False);
		Event Player.health_pool = Last Created Health Pool;
		While(Is Using Ultimate(Event Player));
			Set Ability Cooldown(Event Player, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)) - 0.096);
			Wait(0.048, Ignore Condition);
		End;
		Remove Health Pool From Player(Event Player.health_pool);
	}
}

rule("Soldier")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Soldier: 76;
	}

	actions
	{
		Set Damage Dealt(Event Player, 117);
		Event Player.max_health_percent = 120;
		Event Player.interact_cooldown = 12;
		Event Player.ability_6 = Event Player.interact_cooldown;
		Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
			Global.capture_players, Event Player) && Array Contains(Global.capture_players, Players In Slot(0, Team 2))) ? Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"), Top,
			2, Null, Null, Null, String, Default Visibility);
		Event Player.huds[0] = Last Text ID;
		Create Progress Bar HUD Text(Event Player, Event Player.ability_6 / Event Player.interact_cooldown * 100, Custom String(
			"[{0}] : {1} sec", Ability Icon String(Hero(Soldier: 76), Button(Ability 1)), String Slice(Event Player.ability_6 / 3, 0, 3)),
			Top, 4, Is Using Ability 1(Event Player) ? Color(Blue) : (Event Player.ability_6 >= 1.500 ? Color(Green) : Color(Black)),
			Color(Yellow), Visible To Values and Color, Default Visibility);
		Event Player.huds[1] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("{0} restores sprint by 33%", Ability Icon String(Hero(Soldier: 76),
			Button(Ability 2)), Ability Icon String(Hero(Soldier: 76), Button(Ability 1))), Top, 3, Null, Null, Custom Color(214, 145, 65,
			255), Visible To, Default Visibility);
		Event Player.huds[2] = Last Text ID;
	}
}

rule("Soldier | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Soldier: 76;
	}

	conditions
	{
		Event Player.ability_6 == 0;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Wait Until(Event Player.ability_6 >= 1.500, 99999);
		Set Ability 1 Enabled(Event Player, True);
	}
}

rule("Soldier | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Soldier: 76;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Chase Player Variable At Rate(Event Player, ability_6, 0, Is Using Ultimate(Event Player) ? 0 : 3, Destination and Rate);
		Event Player.initial_ms += 62.500;
		While(Is Using Ability 1(Event Player));
			Set Move Speed(Event Player, Event Player.initial_ms / 1.500);
			Wait(0.016, Ignore Condition);
		End;
		Event Player.initial_ms -= 62.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Stop Chasing Player Variable(Event Player, ability_6);
		Wait(0.400, Restart When True);
		Chase Player Variable At Rate(Event Player, ability_6, Event Player.interact_cooldown, 1, Destination and Rate);
	}
}

rule("Soldier | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Soldier: 76;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.ability_1 = 0.256;
		Chase Player Variable At Rate(Event Player, ability_1, 0, 1, Destination and Rate);
		Wait Until(Is On Ground(Event Player), Event Player.ability_1);
		If(Is On Ground(Event Player));
			Wait Until(Is Jumping(Event Player), Event Player.ability_1);
			If(Is Jumping(Event Player));
				Event Player.ability_1 = 0.304;
				Wait Until(!Is Using Ability 1(Event Player), Event Player.ability_1);
				If(!Is Using Ability 1(Event Player));
					Event Player.ability_6 = Max(0, Event Player.ability_6 - Event Player.ability_1 * 4);
				End;
			End;
		End;
	}
}

rule("Soldier | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Soldier: 76;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.ability_6 = Min(Event Player.interact_cooldown, Event Player.ability_6 + Event Player.interact_cooldown * 0.334);
	}
}

rule("Soldier | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Soldier: 76;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.ability_6 = Event Player.interact_cooldown;
		Set Max Ammo(Event Player, 0, 1000);
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
		Wait(0.192, Ignore Condition);
		Small Message(Event Player, Custom String("Critical damage multiplier: 2x â 5x"));
		Play Effect(Event Player, Ring Explosion Sound, Null, Event Player, 100);
		Wait Until(!Is Using Ultimate(Event Player), 9999);
		Set Max Ammo(Event Player, 0, 30);
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
		Wait(1, Ignore Condition);
		While(!Is Using Ultimate(Event Player) && Event Player.own_overhealth > 1);
			Remove Health Pool From Player(Event Player.health_pool);
			Add Health Pool To Player(Event Player, Health, Event Player.own_overhealth - 5, False, False);
			Event Player.health_pool = Last Created Health Pool;
			Wait(0.112, Ignore Condition);
		End;
		Remove Health Pool From Player(Event Player.health_pool);
		Loop If Condition Is True;
	}
}

rule("Soldier | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Soldier: 76;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		If(Event Was Critical Hit);
			Damage(Victim, Event Player, Event Damage / 0.780);
		End;
		Remove Health Pool From Player(Event Player.health_pool);
		Add Health Pool To Player(Event Player, Health, Min(Event Player.own_overhealth + (Event Was Critical Hit ? 10 : 2.500), 600),
			False, False);
		Event Player.health_pool = Last Created Health Pool;
	}
}

rule("Sombra")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sombra;
	}

	actions
	{
		disabled Event Player.ability_1 = False;
		Event Player.interact_cooldown = 8;
		Event Player.max_health_percent = 120;
		Set Max Health(Event Player, Event Player.max_health_percent);
		Set Secondary Fire Enabled(Event Player, False);
		disabled Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
			Global.capture_players, Event Player) && Array Contains(Global.capture_players, Players In Slot(0, Team 2))) ? Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(" \n\n\n\n\n\n\n\n\n\n\n\n\n"), Top, 2, Null, Null, Null, String,
			Default Visibility);
		disabled Event Player.huds[0] = Last Text ID;
		disabled Create Progress Bar HUD Text(Event Player.ability_1 ? Event Player : Empty Array,
			Event Player.ability_6 / Event Player.interact_cooldown * 100, Custom String("[{0}] : {1} sec", Ability Icon String(Hero(
			Sombra), Button(Ability 1)), String Slice(Event Player.ability_6, 0, 3)), Top, 3, Color(Violet), Color(Yellow),
			Visible To Values and Color, Default Visibility);
		disabled Event Player.huds[1] = Last Text ID;
	}
}

rule("Sombra | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sombra;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Projectile Speed(Event Player, 75);
		Wait(0.096, Ignore Condition);
		Set Projectile Speed(Event Player, 100);
	}
}

rule("Sombra | Ability 1")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Sombra;
	}

	conditions
	{
		Event Ability == Button(Ability 1);
	}

	actions
	{
		Event Player.ability_3 = Ultimate Charge Percent(Victim);
		Skip If(Event Player.ability_3 == 0, 4);
		Small Message(All Players(All Teams), Custom String("{0} charge: -{1}%", Ability Icon String(Hero Of(Victim), Button(Ultimate)),
			Min(Event Player.ability_3, Round To Integer(15 * Global.resistance_multiplier, Down))));
		Set Ultimate Charge(Victim, Ultimate Charge Percent(Victim) - Round To Integer(15 * Global.resistance_multiplier, Down));
		Skip If(!Is Game In Progress, 1);
		Event Player.debuff_value += Min(Event Player.ability_3, Round To Integer(15 * Global.resistance_multiplier, Down)) * 15;
		Wait(4, Ignore Condition);
	}
}

disabled rule("Sombra | Secondary Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sombra;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Has Status(Players In Slot(0, Team 2), Phased Out) == False;
		Distance Between(Eye Position(Event Player), World Vector Of(Vector(0, 1.200, 0), Players In Slot(0, Team 2),
			Rotation And Translation)) <= 16;
		Angle Between Vectors(Facing Direction Of(Event Player), Direction Towards(Eye Position(Event Player), World Vector Of(Vector(0,
			1.200, 0), Players In Slot(0, Team 2), Rotation And Translation))) <= 13.600 + (15.700 - Distance Between(Position Of(
			Event Player), Position Of(Players In Slot(0, Team 2)))) * 3.400;
		(Is In Line of Sight(Eye Position(Event Player) + World Vector Of(Vector(0.175, 0, 0), Event Player, Rotation), Eye Position(
			Players In Slot(0, Team 2)) + World Vector Of(Vector(-0.175, 0, 0), Players In Slot(0, Team 2), Rotation),
			Enemy Barriers Block LOS) || Is In Line of Sight(Eye Position(Event Player) + World Vector Of(Vector(-0.175, 0, 0),
			Event Player, Rotation), Eye Position(Players In Slot(0, Team 2)) + World Vector Of(Vector(0.175, 0, 0), Players In Slot(0,
			Team 2), Rotation), Enemy Barriers Block LOS) || Is In Line of Sight(Eye Position(Event Player) + World Vector Of(Vector(
			-0.175, 0, 0), Event Player, Rotation), World Vector Of(Vector(0.175, 0.700, 0), Players In Slot(0, Team 2),
			Rotation And Translation), Enemy Barriers Block LOS) || Is In Line of Sight(Eye Position(Event Player) + World Vector Of(
			Vector(0.175, 0, 0), Event Player, Rotation), World Vector Of(Vector(-0.175, 0.700, 0), Players In Slot(0, Team 2),
			Rotation And Translation), Enemy Barriers Block LOS)) == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 24);
		Event Player.ability_3 = Eye Position(Event Player);
		Chase Player Variable At Rate(Event Player, ability_3, World Vector Of(Vector(0, 1.200, 0), Players In Slot(0, Team 2),
			Rotation And Translation), 15, Destination and Rate);
		Create Effect(All Players(All Teams), Orb, Color(Blue), Update Every Frame(Event Player.ability_3), 0.500,
			Visible To Position and Radius);
		Event Player.effects[0] = Last Created Entity;
		Create Effect(All Players(All Teams), Bad Aura, Color(Purple), Update Every Frame(Event Player.ability_3), 0.100,
			Visible To Position and Radius);
		Event Player.effects[1] = Last Created Entity;
		Disallow Button(Event Player, Button(Secondary Fire));
		Wait Until(Distance Between(Event Player.ability_3, World Vector Of(Vector(0, 1.200, 0), Players In Slot(0, Team 2),
			Rotation And Translation)) <= 0.500, 9999);
		Stop Chasing Player Variable(Event Player, ability_3);
		Destroy Effect(Array(Event Player.effects[0], Event Player.effects[1]));
		Event Player.ability_3 = Ultimate Charge Percent(Players In Slot(0, Team 2));
		Damage(Players In Slot(0, Team 2), Event Player, 200);
		Skip If(Event Player.ability_3 == 0, 5);
		Small Message(All Players(All Teams), Custom String("{0} charge: -{1}%", Ability Icon String(Hero Of(Players In Slot(0, Team 2)),
			Button(Ultimate)), Min(25, Event Player.ability_3) * Global.resistance_multiplier));
		Play Effect(All Players(All Teams), Bad Explosion, Color(Blue), World Vector Of(Vector(0, 1.200, 0), Players In Slot(0, Team 2),
			Rotation And Translation), 1);
		Set Ultimate Charge(Players In Slot(0, Team 2), Ultimate Charge Percent(Players In Slot(0, Team 2))
			- 20 * Global.resistance_multiplier);
		Skip If(!Is Game In Progress, 1);
		Event Player.debuff_value += Min(Event Player.ability_3, 25) * 10 * Global.resistance_multiplier;
		Wait(0.016, Ignore Condition);
		Allow Button(Event Player, Button(Secondary Fire));
	}
}

rule("Sombra | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sombra;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) >= 75;
	}

	actions
	{
		Wait Until(!Ultimate Charge Percent(Event Player), 9999);
		Abort If(Is Assembling Heroes);
		Event Player.usage_ultimate = True;
		Wait(0.272, Ignore Condition);
		Abort If(Is Dead(Event Player) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(
			Event Player, Stunned));
		Event Player.ability_4 = Array(Position Of(Event Player), Eye Position(Event Player));
		Set Status(Event Player, Null, Stunned, 0.016);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Effect, Color(Team 1), Event Player.ability_4, False);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Sound, False, Event Player.ability_4, 100);
		Wait(0.032, Ignore Condition);
		If((Is In Line of Sight(Event Player.ability_4[0], Eye Position(Players In Slot(0, Team 2)), Barriers Do Not Block LOS)
			|| Is In Line of Sight(Event Player.ability_4[0], Position Of(Players In Slot(0, Team 2)), Barriers Do Not Block LOS)
			|| Is In Line of Sight(Event Player.ability_4[1], Position Of(Players In Slot(0, Team 2)), Barriers Do Not Block LOS)
			|| Is In Line of Sight(Event Player.ability_4[1], Position Of(Players In Slot(0, Team 2)), Barriers Do Not Block LOS))
			&& Distance Between(Event Player.ability_4[1], Eye Position(Players In Slot(0, Team 2))) < 16.400);
			If(!Has Status(Players In Slot(0, Team 2), Phased Out));
				Set Status(Players In Slot(0, Team 2), Event Player, Hacked, 4 * Global.resistance_multiplier);
				Damage(Players In Slot(0, Team 2), Event Player, 600);
				Wait(0.016, Ignore Condition);
				Skip If(!Is Game In Progress || Is Dead(Players In Slot(0, Team 2)), 1);
				Event Player.debuff_value += 400 * Global.resistance_multiplier;
			End;
		End;
		Wait(1, Ignore Condition);
		Event Player.usage_ultimate = False;
	}
}

rule("Symmetra")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Symmetra;
	}

	actions
	{
		Event Player.i_1 = 0;
		Event Player.usage_ability = False;
		Start Scaling Player(Event Player, 1.100, False);
		Event Player.max_health_percent = 15.625;
		Set Max Health(Event Player, Event Player.max_health_percent);
		Set Damage Dealt(Event Player, 133.334);
		Add Health Pool To Player(Event Player, Health, 300 - 2.500 * Event Player.max_health_percent, True, False);
		Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
			Global.capture_players, Event Player) && Array Contains(Global.capture_players, Players In Slot(0, Team 2))) ? Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"), Top, 2, Null, Null, Null, String, Default Visibility);
		Event Player.huds[0] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String(
			"Dealing damage with a beam temporarily\nââincreases health and move speed"), Top, 3, Null, Null, Custom Color(214, 145, 65,
			255), String and Color, Default Visibility);
		Event Player.huds[1] = Last Text ID;
	}
}

rule("Symmetra | Primary Fire")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Symmetra;
	}

	conditions
	{
		Event Ability == Button(Primary Fire);
	}

	actions
	{
		If(Event Player.i_1 < 25);
			Event Player.i_1 += 1;
			Event Player.initial_ms += 1;
			Set Move Speed(Event Player, Event Player.initial_ms);
		End;
		Event Player.ability_6 = Health Of Type(Event Player, Health) - (Max Health Of Type(Event Player, Health) - Max(0, Max Health(
			Event Player) - Health(Event Player) - Max Health Of Type(Event Player, Shields)))
			- Event Player.jq_health_pool - Event Player.lucio_health_pool;
		Remove Health Pool From Player(Event Player.health_pool);
		Add Health Pool To Player(Event Player, Health, Min(Event Player.ability_6 + 12, 300), False, False);
		Event Player.health_pool = Last Created Health Pool;
		Wait(0.112, Ignore Condition);
		Wait(2.896, Restart When True);
		Abort If(Hero Of(Event Player) != Hero(Symmetra));
		While(Event Player.i_1 > 0 && Hero Of(Event Player) == Hero(Symmetra));
			Event Player.i_1 -= 1;
			Event Player.initial_ms -= 1;
			Set Move Speed(Event Player, Event Player.initial_ms);
			Event Player.ability_6 = Health Of Type(Event Player, Health) - (Max Health Of Type(Event Player, Health) - Max(0, Max Health(
				Event Player) - Health(Event Player) - Max Health Of Type(Event Player, Shields)))
				- Event Player.jq_health_pool - Event Player.lucio_health_pool;
			Remove Health Pool From Player(Event Player.health_pool);
			If(Event Player.ability_6 > 13);
				Add Health Pool To Player(Event Player, Health, Event Player.ability_6 - 12, False, False);
				Event Player.health_pool = Last Created Health Pool;
			End;
			Wait(0.112, Restart When True);
		End;
	}
}

rule("Symmetra | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Symmetra;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 2)) > 0;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), 13);
	}
}

rule("Symmetra | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Symmetra;
	}

	conditions
	{
		Event Player.usage_ability == False;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		(Is Dead(Event Player) || Is Using Ability 1(Event Player) || Custom String("{0}", Is Communicating Any Emote(Event Player))
			!= Custom String("0") || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(Event Player,
			Stunned)) == False;
	}

	actions
	{
		Event Player.usage_ability = True;
		Event Player.usage_ultimate = 0;
		Event Player.ability_3 = Is Button Held(Event Player, Button(Secondary Fire)) ? 1 : 2;
		Event Player.ability_7 = False;
		Wait Until(!Is Button Held(Event Player, Button(Ultimate)), 9999);
		Loop If Condition Is True;
		Event Player.ability_7 = True;
	}
}

rule("Symmetra | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Symmetra;
	}

	conditions
	{
		Event Player.usage_ability == True;
		(Is Dead(Event Player) || (Is Button Held(Event Player, Button(Secondary Fire)) && Event Player.ability_3 == 2)
			|| Is Using Ability 1(Event Player) || Custom String("{0}", Is Communicating Any Emote(Event Player)) != Custom String("0")
			|| Has Status(Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned)) == True;
	}

	actions
	{
		Event Player.usage_ultimate = 0;
		Event Player.usage_ability = False;
	}
}

rule("Symmetra | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Symmetra;
	}

	conditions
	{
		Event Player.ability_7 == True;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Event Player.usage_ultimate += 1;
	}
}

rule("Symmetra | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Symmetra;
	}

	conditions
	{
		Event Player.usage_ability == True;
		Event Player.ability_3 == 1;
		Is Button Held(Event Player, Button(Secondary Fire)) == False;
	}

	actions
	{
		Event Player.ability_3 = 2;
	}
}

rule("Symmetra | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Symmetra;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.usage_ability = False;
		Event Player.ability_7 = False;
		If(Event Player.usage_ultimate % 2);
			Event Player.ability_1 = Array(World Vector Of(Left, Event Player, Rotation), X Component Of(World Vector Of(Vector(-2, 0, 0),
				Event Player, Rotation And Translation)), Z Component Of(Position Of(Event Player)));
			Wait(0.512, Ignore Condition);
			Event Player.ability_8 = Array(Vector(Event Player.ability_1[1], 40, Event Player.ability_1[2]), Vector(Event Player.ability_1[1],
				40, Event Player.ability_1[2]) + Event Player.ability_1[0] * 4);
			Event Player.ability_4 = Ray Cast Hit Position(Event Player.ability_8[0], Event Player.ability_8[1], Event Player, Empty Array,
				True);
		Else;
			Event Player.ability_1 = Array(World Vector Of(Forward, Event Player, Rotation), X Component Of(Position Of(Event Player)),
				Z Component Of(World Vector Of(Vector(0, 0, -2), Event Player, Rotation And Translation)));
			Wait(0.512, Ignore Condition);
			Event Player.ability_8 = Array(Vector(Event Player.ability_1[1], 40, Event Player.ability_1[2]), Vector(Event Player.ability_1[1],
				40, Event Player.ability_1[2]) + Event Player.ability_1[0] * 40);
			Event Player.ability_4 = Ray Cast Hit Position(Event Player.ability_8[0], Event Player.ability_8[1], Event Player, Empty Array,
				True);
		End;
		Event Player.ability_2 = Event Player.ability_1[0];
		Wait Until(!Is Using Ultimate(Event Player), 9999);
		Event Player.ability_4 = False;
		Event Player.usage_ultimate = 0;
	}
}

rule("Symmetra | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Players On Hero(Hero(Symmetra), Team 1).ability_4 != False;
	}

	actions
	{
		While(Is Using Ultimate(Players On Hero(Hero(Symmetra), Team 1)));
			Event Player.edited_position = Position Of(Event Player) + Players On Hero(Hero(Symmetra), Team 1).ability_2 * Dot Product(Vector(
				X Component Of(Players On Hero(Hero(Symmetra), Team 1).ability_4), Y Component Of(Position Of(Event Player)), Z Component Of(
				Players On Hero(Hero(Symmetra), Team 1).ability_4)) - Position Of(Event Player), Players On Hero(Hero(Symmetra), Team 1)
				.ability_2) / Dot Product(Players On Hero(Hero(Symmetra), Team 1).ability_2, Players On Hero(Hero(Symmetra), Team 1)
				.ability_2);
			If(Distance Between(Position Of(Event Player), Event Player.edited_position) <= 1.500);
				Apply Impulse(Event Player, Direction Towards(Event Player.edited_position, Position Of(Event Player)), 0.001, To World,
					Cancel Contrary Motion);
				Set Move Speed(Event Player, Event Player.real_ms - Dot Product(Direction Towards(Position Of(Event Player), Position Of(
					Event Player) + Velocity Of(Event Player)), Direction Towards(Event Player.edited_position, Position Of(Event Player)) * -1)
					* Event Player.real_ms);
			End;
			Wait(0.016, Ignore Condition);
			Set Move Speed(Event Player, Event Player.real_ms);
		End;
	}
}

rule("Torbjorn")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		TorbjÃ¶rn;
	}

	actions
	{
		Event Player.max_health_percent = 1;
		Set Max Health(Event Player, Event Player.max_health_percent);
		Add Health Pool To Player(Event Player, Health, 296.785, True, False);
		Event Player.number_of_charges = 2;
		Event Player.ability_9 = Empty Array;
		Set Damage Dealt(Event Player, 119.048);
		Set Projectile Speed(Event Player, 120 / 70 * 100);
		Set Projectile Gravity(Event Player, 175);
		Start Scaling Player(Event Player, 1.050, False);
		Disallow Button(Event Player, Button(Ability 1));
		Event Player.ability_8 = False;
		Create Beam Effect(Event Player.ability_8 ? Event Player : Empty Array, Grapple Beam, Event Player.ability_1[0] + Down * 1.500,
			Event Player.ability_1[4], Color(White), Visible To Position and Radius);
		Modify Player Variable At Index(Event Player, effects, 0, Append To Array, Last Created Entity);
		Create Beam Effect(Event Player.ability_8 ? Event Player : Empty Array, Grapple Beam, Event Player.ability_1[1] + Down * 1.500,
			Event Player.ability_1[5], Color(White), Visible To Position and Radius);
		Modify Player Variable At Index(Event Player, effects, 0, Append To Array, Last Created Entity);
		For Player Variable(Event Player, i_1, 0, 6, 2);
			Create Beam Effect(Event Player.ability_8 ? Event Player : Empty Array, Grapple Beam, Event Player.ability_1[Evaluate Once(
				Event Player.i_1)], Event Player.ability_1[Evaluate Once(Event Player.i_1 + 1)], Color(White), Visible To Position and Radius);
			Modify Player Variable At Index(Event Player, effects, 0, Append To Array, Last Created Entity);
		End;
		Create In-World Text(Event Player.ability_8 ? Event Player : Empty Array, Custom String("deploy  {0}  |", Input Binding String(
			Button(Primary Fire))), Update Every Frame(Eye Position(Event Player) + 500 * (1.150 * World Vector Of(Left, Event Player,
			Rotation) + (0.150 - 0.200) * Direction From Angles(Horizontal Facing Angle Of(Event Player), Vertical Facing Angle Of(
			Event Player) - 90) + 3 * Facing Direction Of(Event Player))), 2, Do Not Clip, Visible To Position and String, Color(White),
			Default Visibility);
		Event Player.huds[0] = Last Text ID;
		Create In-World Text(Event Player.ability_8 ? Event Player : Empty Array, Custom String("|  {0}  cancel", Input Binding String(
			Button(Secondary Fire))), Update Every Frame(Eye Position(Event Player) + 500 * (1.150 * World Vector Of(Right, Event Player,
			Rotation) + (0.150 - 0.200) * Direction From Angles(Horizontal Facing Angle Of(Event Player), Vertical Facing Angle Of(
			Event Player) - 90) + 3 * Facing Direction Of(Event Player))), 2, Do Not Clip, Visible To Position and String, Color(White),
			Default Visibility);
		Event Player.huds[1] = Last Text ID;
		Create In-World Text(Custom String("{0}", Is Communicating Any Emote(Event Player)) == Custom String("0")
			? Event Player : Empty Array, Event Player.number_of_charges, Update Every Frame(Eye Position(Event Player) + 500 * (
			1.985 * World Vector Of(Right, Event Player, Rotation) + (-1.200 - 0.200) * Direction From Angles(Horizontal Facing Angle Of(
			Event Player), Vertical Facing Angle Of(Event Player) - 90) + 3 * Facing Direction Of(Event Player))), 2, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		Event Player.huds[2] = Last Text ID;
		Create In-World Text(Custom String("{0}", Is Communicating Any Emote(Event Player)) == Custom String("0")
			? Event Player : Empty Array, Custom String("{0}", Icon String(Ring Thin)), Update Every Frame(Eye Position(Event Player)
			+ 500 * (1.985 * World Vector Of(Right, Event Player, Rotation) + (-1.200 - 0.200) * Direction From Angles(
			Horizontal Facing Angle Of(Event Player), Vertical Facing Angle Of(Event Player) - 90) + 3 * Facing Direction Of(
			Event Player))), 2, Do Not Clip, Visible To and Position, Color(White), Default Visibility);
		Event Player.huds[3] = Last Text ID;
	}
}

rule("Torbjorn | Hammer")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		TorbjÃ¶rn;
	}

	conditions
	{
		Weapon(Event Player) == 2;
		Event Ability == Button(Primary Fire);
		Distance Between(Event Player, Victim) <= 4.250;
	}

	actions
	{
		"175 damage per hit"
		Damage(Victim, Event Player, 92);
		Remove Health Pool From Player(Event Player.health_pool[0]);
		Add Health Pool To Player(Event Player, Health, Min(Event Player.own_overhealth + 80, 500), False, False);
		Event Player.health_pool[0] = Last Created Health Pool;
	}
}

rule("Torbjorn | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		TorbjÃ¶rn;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		(Is Dead(Event Player) || Custom String("{0}", Is Communicating Any Emote(Event Player)) != Custom String("0") || Has Status(
			Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned)) == False;
	}

	actions
	{
		If(Event Player.number_of_charges > 0);
			Disallow Button(Event Player, Button(Primary Fire));
			Disallow Button(Event Player, Button(Secondary Fire));
			Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
				+ World Vector Of(Backward, Event Player, Rotation) * 1.750 + Up * 1.500 + Facing Direction Of(Event Player) * -1, Null, Null,
				False)), Update Every Frame(Eye Position(Event Player) + Facing Direction Of(Event Player) * 100), 0);
			If(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire)));
				Wait Until((!Is Button Held(Event Player, Button(Primary Fire)) && !Is Button Held(Event Player, Button(Secondary Fire)))
					|| Is Dead(Event Player), 9999);
			End;
			While(!Is Button Held(Event Player, Button(Primary Fire)) && !Is Button Held(Event Player, Button(Secondary Fire)) && Is Alive(
				Event Player));
				Event Player.ability_3 = Z Component Of(Local Vector Of(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
					Event Player) + World Vector Of(Forward, Event Player, Rotation) * 1.500, Null, Null, False) - World Vector Of(Forward,
					Event Player, Rotation) * 0.500, Event Player, Rotation And Translation));
				Event Player.ability_4 = Y Component Of(Local Vector Of(Ray Cast Hit Position(Position Of(Event Player), Position Of(Event Player)
					+ Down * Min(Altitude Of(Event Player), 2), Null, Null, False), Event Player, Rotation And Translation)) + 1;
				Event Player.ability_1[0] = Ray Cast Hit Position(World Vector Of(Vector(0, Event Player.ability_4, Event Player.ability_3),
					Event Player, Rotation And Translation), World Vector Of(Vector(5, Event Player.ability_4, Event Player.ability_3),
					Event Player, Rotation And Translation), Null, Null, False);
				Event Player.ability_1[1] = Ray Cast Hit Position(World Vector Of(Vector(0, Event Player.ability_4, Event Player.ability_3),
					Event Player, Rotation And Translation), World Vector Of(Vector(-5, Event Player.ability_4, Event Player.ability_3),
					Event Player, Rotation And Translation), Null, Null, False);
				If(Distance Between(Event Player.ability_1[0], Event Player.ability_1[1]) > 7.500);
					Event Player.ability_1[0] = Ray Cast Hit Position(World Vector Of(Vector(0, Event Player.ability_4, Event Player.ability_3),
						Event Player, Rotation And Translation), World Vector Of(Vector(2.500, Event Player.ability_4, Event Player.ability_3),
						Event Player, Rotation And Translation), Null, Null, False);
					Event Player.ability_1[1] = Ray Cast Hit Position(World Vector Of(Vector(0, Event Player.ability_4, Event Player.ability_3),
						Event Player, Rotation And Translation), World Vector Of(Vector(-2.500, Event Player.ability_4, Event Player.ability_3),
						Event Player, Rotation And Translation), Null, Null, False);
				Else If(Distance Between(Event Player.ability_1[0], Event Player.ability_1[1]) > 5);
					Event Player.ability_2 = First Of(Sorted Array(Array(Event Player.ability_1[0], Event Player.ability_1[1]), Distance Between(
						Current Array Element, World Vector Of(Vector(0, Event Player.ability_4, Event Player.ability_3), Event Player,
						Rotation And Translation))));
					If(Event Player.ability_2 == Event Player.ability_1[0]);
						Event Player.ability_1[1] = Ray Cast Hit Position(Event Player.ability_2, Event Player.ability_2 + World Vector Of(Right,
							Event Player, Rotation) * 5, Null, Null, False);
					Else;
						Event Player.ability_1[0] = Ray Cast Hit Position(Event Player.ability_2, Event Player.ability_2 + World Vector Of(Left,
							Event Player, Rotation) * 5, Null, Null, False);
					End;
				End;
				Event Player.ability_4 = Y Component Of(Ray Cast Hit Position((Event Player.ability_1[0] + Event Player.ability_1[1]) / 2, (
					Event Player.ability_1[0] + Event Player.ability_1[1]) / 2 + Down * 3, Null, Null, False)) + 1;
				Event Player.ability_1[0] = Vector(X Component Of(Event Player.ability_1[0]), Event Player.ability_4, Z Component Of(
					Event Player.ability_1[0]));
				Event Player.ability_1[1] = Vector(X Component Of(Event Player.ability_1[1]), Event Player.ability_4, Z Component Of(
					Event Player.ability_1[1]));
				Event Player.ability_6 = 0;
				While(Event Player.ability_6 < 10 && Distance Between(Ray Cast Hit Position(Event Player.ability_1[0],
					Event Player.ability_1[0] + Down * 1.510, Null, Null, False), Event Player.ability_1[0]) > 1.500);
					Event Player.ability_6 += 1;
					Event Player.ability_1[0] += World Vector Of(Right, Event Player, Rotation) * 0.250;
				End;
				If(Event Player.ability_6 != 0);
					Event Player.ability_1[1] = Ray Cast Hit Position(Event Player.ability_1[0], Event Player.ability_1[0] + World Vector Of(Right,
						Event Player, Rotation) * 5, Null, Null, False);
				End;
				Event Player.ability_7 = 0;
				While(Event Player.ability_7 < 15 - Event Player.ability_6 && Distance Between(Ray Cast Hit Position(Event Player.ability_1[1],
					Event Player.ability_1[1] + Down * 1.510, Null, Null, False), Event Player.ability_1[1]) > 1.500);
					Event Player.ability_7 += 1;
					Event Player.ability_1[1] += World Vector Of(Left, Event Player, Rotation) * 0.250;
				End;
				If(Event Player.ability_6 == 0);
					Event Player.ability_1[0] = Ray Cast Hit Position(Event Player.ability_1[1], Event Player.ability_1[1] + World Vector Of(Left,
						Event Player, Rotation) * 5, Null, Null, False);
				End;
				If(Is True For All(Array(Event Player.ability_1[0], Event Player.ability_1[1]), Distance Between(Current Array Element,
					Ray Cast Hit Position(Current Array Element, Current Array Element + Down * 1.500, Null, Null, False)) < 1.500)
					&& Distance Between(Event Player.ability_1[0], Event Player.ability_1[1]) >= 1.250);
					Event Player.ability_8 = True;
					For Player Variable(Event Player, i_1, 2, 6, 2);
						Event Player.ability_1[Event Player.i_1] = Event Player.ability_1[0] + Up * Event Player.i_1 * 0.500;
						Event Player.ability_1[Event Player.i_1 + 1] = Event Player.ability_1[1] + Up * Event Player.i_1 * 0.500;
					End;
					Event Player.ability_5 = Array(Min(X Component Of(Event Player.ability_1[0]), X Component Of(Event Player.ability_1[1])), Max(
						X Component Of(Event Player.ability_1[0]), X Component Of(Event Player.ability_1[1])), Y Component Of(
						Event Player.ability_1[0]) - 0.500, Y Component Of(Event Player.ability_1[5]), Min(Z Component Of(Event Player.ability_1[0]),
						Z Component Of(Event Player.ability_1[1])), Max(Z Component Of(Event Player.ability_1[0]), Z Component Of(
						Event Player.ability_1[1])));
				Else;
					Event Player.ability_8 = False;
				End;
				Wait(0.016, Ignore Condition);
			End;
			Stop Camera(Event Player);
			If(Is Button Held(Event Player, Button(Primary Fire)));
				If(Event Player.ability_8);
					If(Count Of(Event Player.ability_9) == 3);
						Destroy Effect(Event Player.effects[1]);
						Modify Player Variable(Event Player, effects, Remove From Array By Index, 1);
						Modify Player Variable(Event Player, ability_9, Remove From Array By Index, 0);
					End;
					Event Player.ability_9[Count Of(Event Player.ability_9)] = Event Player.ability_5;
					Create Beam Effect(All Players(All Teams), Grapple Beam, Event Player.ability_1[0] + Down * 1.500, Event Player.ability_1[4],
						Color(White), Visible To);
					Modify Player Variable At Index(Event Player, effects, Count Of(Event Player.ability_9), Append To Array, Last Created Entity);
					Create Beam Effect(All Players(All Teams), Grapple Beam, Event Player.ability_1[1] + Down * 1.500, Event Player.ability_1[5],
						Color(White), Visible To);
					Modify Player Variable At Index(Event Player, effects, Count Of(Event Player.ability_9), Append To Array, Last Created Entity);
					For Player Variable(Event Player, i_1, 0, 6, 2);
						Create Beam Effect(All Players(All Teams), Grapple Beam, Event Player.ability_1[Event Player.i_1],
							Event Player.ability_1[Event Player.i_1 + 1], Color(White), Visible To);
						Modify Player Variable At Index(Event Player, effects, Count Of(Event Player.ability_9), Append To Array, Last Created Entity);
					End;
					Play Effect(Event Player, Ring Explosion Sound, Null, Event Player, 100);
					Small Message(Event Player, Custom String("Traps: {0} / 3", Count Of(Event Player.ability_9)));
					If(Event Player.number_of_charges == 2);
						Set Ability Cooldown(Event Player, Button(Ability 1), 16);
						Wait(0.032, Ignore Condition);
					End;
					Event Player.number_of_charges -= 1;
				Else;
					Play Effect(Event Player, Explosion Sound, Null, Event Player, 80);
				End;
			Else;
				Play Effect(Event Player, Explosion Sound, False, Event Player, 40);
			End;
			Event Player.ability_8 = False;
			Allow Button(Event Player, Button(Primary Fire));
			Allow Button(Event Player, Button(Secondary Fire));
		Else;
			Play Effect(Event Player, Explosion Sound, Null, Event Player, 80);
		End;
	}
}

rule("Torbjorn | Ability 1 Charges")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		TorbjÃ¶rn;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Event Player.number_of_charges < 2;
	}

	actions
	{
		Event Player.number_of_charges += 1;
		If(Event Player.number_of_charges < 2);
			Set Ability Cooldown(Event Player, Button(Ability 1), 16);
			Wait(0.016, Ignore Condition);
		End;
	}
}

rule("Torbjorn | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		TorbjÃ¶rn;
	}

	conditions
	{
		Count Of(Event Player.ability_9) > 0;
		Health(Players In Slot(0, Team 2)) > 0;
		Has Status(Players In Slot(0, Team 2), Phased Out) == False;
	}

	actions
	{
		For Player Variable(Event Player, i_2, 0, Count Of(Event Player.ability_9), 1);
			If(Distance Between(Vector(Max(Event Player.ability_9[Event Player.i_2][0], Min(X Component Of(Position Of(Players In Slot(0,
				Team 2))), Event Player.ability_9[Event Player.i_2][1])), Max(Event Player.ability_9[Event Player.i_2][2], Min(Y Component Of(
				Position Of(Players In Slot(0, Team 2))), Event Player.ability_9[Event Player.i_2][3])), Max(
				Event Player.ability_9[Event Player.i_2][4], Min(Z Component Of(Position Of(Players In Slot(0, Team 2))),
				Event Player.ability_9[Event Player.i_2][5]))), Position Of(Players In Slot(0, Team 2))) <= 0.900);
				Destroy Effect(Event Player.effects[Event Player.i_2 + 1]);
				Modify Player Variable(Event Player, effects, Remove From Array By Index, Event Player.i_2 + 1);
				Modify Player Variable(Event Player, ability_9, Remove From Array By Index, Event Player.i_2);
				If(Is Using Ability 1(Players In Slot(0, Team 2)));
					Cancel Primary Action(Players In Slot(0, Team 2));
				End;
				Damage(Players In Slot(0, Team 2), Event Player, 250 * 0.840);
				Players In Slot(0, Team 2).ms_debuff[6] = 30 * Global.resistance_multiplier;
				Players In Slot(0, Team 2).usage_ability[6] = Total Time Elapsed + 1.500;
				Skip If(!Is Game In Progress, 1);
				Event Player.debuff_value += 100 * Global.resistance_multiplier;
				Small Message(Event Player, Custom String("Traps: {0} / 3", Count Of(Event Player.ability_9)));
				Break;
			End;
			Wait(0.016, Ignore Condition);
		End;
		Loop If Condition Is True;
	}
}

rule("Torbjorn | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		TorbjÃ¶rn;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Player Health(Event Player, Health(Event Player) - 1.001);
		Heal(Event Player, Null, 200);
		Set Ammo(Event Player, 0, 1000);
		Event Player.initial_ms += 27.500;
		While(Is Using Ability 2(Event Player));
			Set Move Speed(Event Player, Event Player.initial_ms / 1.300);
			Wait(0.016, Ignore Condition);
		End;
		Event Player.initial_ms -= 27.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
	}
}

rule("Torbjorn | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		TorbjÃ¶rn;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) >= 70;
	}

	actions
	{
		Wait Until(Ultimate Charge Percent(Event Player) == 0, 9999);
		Small Message(Event Player, Custom String("+200 health"));
		Add Health Pool To Player(Event Player, Health, 200, True, False);
		Event Player.health_pool[1] = Last Created Health Pool;
		Wait(6, Ignore Condition);
		Remove Health Pool From Player(Event Player.health_pool[1]);
	}
}

rule("Torbjorn | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		TorbjÃ¶rn;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Damage(Victim, Event Player, 9.600);
		Victim.ms_debuff[3] = 30 * Global.resistance_multiplier;
		Victim.usage_ability[3] = Total Time Elapsed + 0.500;
		Abort If(!Is Game In Progress);
		Event Player.debuff_value += 80 * Min(0.500, Total Time Elapsed - Event Player.ability_10) * Global.resistance_multiplier;
		Event Player.ability_10 = Total Time Elapsed;
	}
}

rule("Tracer")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Tracer;
	}

	actions
	{
		Set Damage Dealt(Event Player, 100);
		Event Player.max_health_percent = 160;
		Add Health Pool To Player(Event Player, Health, 20, True, False);
		Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
			Global.capture_players, Event Player) && Array Contains(Global.capture_players, Players In Slot(0, Team 2))) ? Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"), Top, 2, Null, Null, Null, String, Default Visibility);
		Event Player.huds[0] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("{0}ââing through enemies damages them", Ability Icon String(Hero(Tracer),
			Button(Ability 1))), Top, 3, Null, Null, Custom Color(214, 145, 65, 255), Visible To, Default Visibility);
		Event Player.huds[1] = Last Text ID;
	}
}

rule("Tracer | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Tracer;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Heal(Event Player, Null, 80);
		Event Player.ability_1 = Position Of(Event Player);
		Wait(0.016, Ignore Condition);
		Event Player.ability_4 = Direction Towards(Event Player.ability_1, Position Of(Event Player));
		For Player Variable(Event Player, i_1, 1.600, Min(Distance Between(Event Player.ability_1, Position Of(Event Player)), 5.700),
			0.450);
			If(Players Within Radius(Event Player.ability_1 + Event Player.ability_4 * Event Player.i_1, 2, Team 2, Surfaces) != Empty Array);
				Damage(Players In Slot(0, Team 2), Event Player, 200);
				Break;
			End;
		End;
		Wait(0.080, Ignore Condition);
	}
}

rule("Tracer | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Tracer;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		If(!Event Player.ability_2);
			Event Player.ability_2 = True;
			Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(Team 1), Event Player, False, Visible To);
			Event Player.effects[0] = Last Created Entity;
			Event Player.initial_ms += 25;
			Set Move Speed(Event Player, Event Player.initial_ms);
		End;
		Wait(1.500, Restart When True);
		Event Player.ability_2 = False;
		Destroy Effect(Event Player.effects[0]);
		Event Player.initial_ms -= 25;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Tracer | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Tracer;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
		Event Damage > 40;
	}

	actions
	{
		Set Status(Victim, Event Player, Stunned, 1.500 * Global.resistance_multiplier);
		Wait(0.016, Ignore Condition);
		Abort If(!Is Game In Progress || Is Dead(Victim));
		Event Player.debuff_value += 250 * Global.resistance_multiplier;
	}
}

rule("Widow")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Widowmaker;
	}

	actions
	{
		Event Player.max_health_percent = 150;
		Set Damage Dealt(Event Player, 125);
		Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
			Global.capture_players, Event Player) && Array Contains(Global.capture_players, Players In Slot(0, Team 2))) ? Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"), Top, 2, Null, Null, Null, String, Default Visibility);
		Event Player.huds[0] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("{0} recharges faster when {1} deals damage", Ability Icon String(Hero Of(
			Event Player), Button(Ability 1)), Ability Icon String(Hero Of(Event Player), Button(Ability 2))), Top, 3, Null, Null,
			Custom Color(214, 145, 65, 255), Visible To, Default Visibility);
		Event Player.huds[1] = Last Text ID;
	}
}

rule("Widow | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Widowmaker;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 1)) > 0;
	}

	actions
	{
		Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.effects[0] = Last Created Entity;
		Event Player.initial_ms += 32.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait(2, Ignore Condition);
		Destroy Effect(Event Player.effects[0]);
		Event Player.initial_ms -= 32.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Widow | Ability 2")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Widowmaker;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
	}

	actions
	{
		"Total Damage: 375"
		Damage(Victim, Event Player, Is Using Ultimate(Event Player) ? 8.334 : 8.654);
		For Player Variable(Event Player, i_1, 0, 2, 1);
			Set Ability Cooldown(Event Player, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)) - 0.096);
			Wait(0.096, Restart When True);
		End;
		Wait(0.032, Restart When True);
	}
}

rule("Widow | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Widowmaker;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("Damage to {0}: +100%", Hero Icon String(Hero(Reinhardt))));
		Small Message(Event Player, Custom String("Damage to {0}: +200%", Ability Icon String(Hero(Reinhardt), Button(Secondary Fire))));
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
		Set Damage Dealt(Event Player, 125 * 3);
		Wait Until(!Is Using Ultimate(Event Player), 9999);
		Set Damage Dealt(Event Player, 125);
	}
}

rule("Winston")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	actions
	{
		Event Player.max_health_percent = 250 / 650 * 100;
		Set Max Health(Event Player, Event Player.max_health_percent);
		Start Scaling Barriers(Event Player, 0.850, False);
		Event Player.health_normal = 300 - 1.600;
		Event Player.stored_spawn_position = 1;
		Call Subroutine(applyCustomHealth);
		Event Player.health_normal = 300 - (Max Health Of Type(Event Player, Health) - 300) - 1.600;
		Event Player.stored_spawn_position = Null;
		Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
			Global.capture_players, Event Player) && Array Contains(Global.capture_players, Players In Slot(0, Team 2))) ? Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"), Top, 2, Null, Null, Null, String, Default Visibility);
		Event Player.huds[0] = Last Text ID;
		Create HUD Text(Event Player, Custom String("{0} dmg. reduction: {1}%", Ability Icon String(Hero(Winston), Button(Ability 2)),
			Event Player.ability_7 ? 100 : 0), Null, Null, Top, 3, Event Player.ability_7 ? Color(Green) : Color(Red), Null, Null,
			String and Color, Default Visibility);
		Event Player.huds[1] = Last Text ID;
	}
}

rule("Winston | Primary Fire")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Winston;
	}

	conditions
	{
		Event Ability == Button(Primary Fire);
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Remove Health Pool From Player(Event Player.health_pool[0]);
		Add Health Pool To Player(Event Player, Health, Min(Event Player.own_overhealth + 4, 300), False, False);
		Event Player.health_pool[0] = Last Created Health Pool;
	}
}

rule("Winston | Secondary Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Wait Until(!Is Firing Secondary(Event Player), 5);
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) - 22);
	}
}

rule("Winston | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.ability_3 = Null;
		Event Player.ability_5 = World Vector Of(Vector(0, 1, 0), Event Player, Rotation And Translation);
		Event Player.ability_2 = Ray Cast Hit Position(Event Player.ability_5, Event Player.ability_5 + Vector(0, -50, 0), Empty Array,
			Empty Array, False);
		Event Player.ability_1 = True;
		Chase Player Variable At Rate(Event Player, ability_3, 20, 5.500 + Event Player.ability_3, Destination and Rate);
		Chase Player Variable At Rate(Event Player, ability_5, Event Player.ability_2, Event Player.ability_3, Destination and Rate);
	}
}

rule("Winston | Ability 2, Dmg. Reduction")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	conditions
	{
		Distance Between(Event Player.ability_5, Event Player) <= 4.250;
		Event Player.ability_1 == True;
	}

	actions
	{
		Event Player.dmg_received_0 = True;
		Event Player.ability_7 = True;
		Wait Until(Distance Between(Event Player, Event Player.ability_5) > 4.250, 8);
		Event Player.dmg_received_0 = False;
		Event Player.ability_7 = False;
	}
}

rule("Winston | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	conditions
	{
		Distance Between(Event Player.ability_5, Event Player.ability_2) <= 0.050;
		Event Player.ability_1 == True;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, ability_5);
		Stop Chasing Player Variable(Event Player, ability_3);
	}
}

rule("Winston | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	conditions
	{
		Event Player.ability_1 == True;
		Distance Between(Event Player.ability_5, Event Player.ability_2) <= 0.050;
		(Is In Line of Sight(Event Player.ability_5 + Up * 4, Event Player.ability_5 + Up * 4.500, All Barriers Block LOS)
			|| Is In Line of Sight(Event Player.ability_5 + Up * -4, Event Player.ability_5 + Up * -4.500, All Barriers Block LOS)
			|| Is In Line of Sight(Event Player.ability_5 + Left * 4, Event Player.ability_5 + Left * 4.500, All Barriers Block LOS)
			|| Is In Line of Sight(Event Player.ability_5 + Left * -4, Event Player.ability_5 + Left * -4.500, All Barriers Block LOS)
			|| Is In Line of Sight(Event Player.ability_5 + Forward * 4.500, Event Player.ability_5 + Forward * 4, All Barriers Block LOS)
			|| Is In Line of Sight(Event Player.ability_5 + Forward * -4, Event Player.ability_5 + Forward * -4.500,
			All Barriers Block LOS)) == True;
	}

	actions
	{
		Event Player.ability_1 = False;
		Event Player.ability_7 = False;
		Wait(0.512, Ignore Condition);
		Event Player.dmg_received_0 = False;
	}
}

rule("Winston | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.ability_6 = Health Of Type(Event Player, Health) - (Max Health Of Type(Event Player, Health) - Max(0, Max Health(
			Event Player) - Health(Event Player) - Max Health Of Type(Event Player, Armor)))
			- Event Player.jq_health_pool - Event Player.lucio_health_pool;
		Remove Health Pool From Player(Event Player.health_pool[0]);
		Add Health Pool To Player(Event Player, Health, 80.770, True, False);
		Event Player.health_pool[1] = Last Created Health Pool;
		Set Damage Dealt(Event Player, 166.667);
		Wait Until(!Is Using Ultimate(Event Player), 9999);
		Set Damage Dealt(Event Player, 100);
		Remove Health Pool From Player(Event Player.health_pool[1]);
		If(Event Player.ability_6 > 0);
			Add Health Pool To Player(Event Player, Health, Event Player.ability_6, False, False);
			Event Player.health_pool[0] = Last Created Health Pool;
		End;
	}
}

rule("Winston | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Winston;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Heal(Event Player, Null, 150);
	}
}

rule("Wrecking Ball")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	actions
	{
		Event Player.max_health_percent = 1;
		Set Max Health(Event Player, Event Player.max_health_percent);
		Add Health Pool To Player(Event Player, Health, 293, True, False);
		Event Player.ability_2 = 0;
		Event Player.ability_3 = False;
		Set Projectile Gravity(Event Player, 250);
		Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
			Global.capture_players, Event Player) && Array Contains(Global.capture_players, Players In Slot(0, Team 2))) ? Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(" \n\n\n\n\n\n\n\n\n\n\n\n\n\n"), Top, 2, Null, Null, Null,
			String, Default Visibility);
		Event Player.huds[0] = Last Text ID;
		Create Progress Bar HUD Text(Event Player.ability_2 > 0 && Is Alive(Event Player) ? Event Player : Empty Array,
			Event Player.ability_2, Custom String("{0}: {1}.{2} sec", Ability Icon String(Hero(Wrecking Ball), Button(Ability 2)),
			Round To Integer(Event Player.ability_2 * 0.050, Down), String Slice(Event Player.ability_2 * 0.050 - Round To Integer(
			Event Player.ability_2 * 0.050, Down), 2, 1)), Top, 3, Color(Blue), Color(Yellow), Visible To Values and Color,
			Default Visibility);
		Event Player.huds[1] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Event Player.ability_2 > 0 ? Custom String(" \n\n\n\n\n") : Custom String(
			" \n\n\n\n\n\n\n"), Top, 4, Null, Null, Null, String, Default Visibility);
		Event Player.huds[2] = Last Text ID;
		Create HUD Text(Event Player, Ability Icon String(Hero(Wrecking Ball), Button(Secondary Fire)), Custom String(
			"[{0}] - change a mode", Input Binding String(Button(Interact))), Custom String("mode: {0}",
			Event Player.ability_3 ? Custom String("slowdown") : Custom String("knockback")), Top, 5, Color(White), Color(Blue),
			Custom Color(214, 145, 65, 255), String and Color, Default Visibility);
		Event Player.huds[3] = Last Text ID;
	}
}

rule("Wrecking Ball | Alternate Form")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
	}
}

rule("Wrecking Ball | Alternate Form")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Is In Alternate Form(Event Player) == True;
	}

	actions
	{
		Event Player.initial_ms += 80;
		While(Is In Alternate Form(Event Player));
			Set Move Speed(Event Player, Event Player.initial_ms * 0.550);
			Wait(0.016, Ignore Condition);
		End;
		Event Player.initial_ms -= 80;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Wrecking Ball | Crouch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Event Ability == Button(Crouch);
	}

	actions
	{
		Set Ability Cooldown(Event Player, Event Ability, Ability Cooldown(Event Player, Event Ability) + 3);
		"Damage: 250"
		Damage(Victim, Event Player, (250 - Event Damage) / 1.400);
		Victim.ms_debuff[11] = 50 * Global.resistance_multiplier;
		Victim.usage_ability[11] = Total Time Elapsed + 1;
		Skip If(!Is Game In Progress, 1);
		Event Player.debuff_value += 100;
		Add Health Pool To Player(Event Player, Health, 250, False, False);
		Event Player.health_pool[0] = Last Created Health Pool;
		Wait(3, Ignore Condition);
		Remove Health Pool From Player(Event Player.health_pool[0]);
	}
}

rule("Wrecking Ball | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.ability_2 = 100;
		Chase Player Variable Over Time(Event Player, ability_2, 0, 5, None);
		Set Ability Cooldown(Event Player, Button(Ability 2), 17);
		Set Player Health(Event Player, Health(Event Player) - Min(Max Health Of Type(Event Player, Health) + Max(0, Max Health(
			Event Player) - Health(Event Player)) + 0.001, 2));
		Create Effect(All Players(All Teams), Wrecking Ball Adaptive Shield Target Effect, Color(Team 1), Event Player, 1, Visible To);
		Event Player.effects[0] = Last Created Entity;
		Create Effect(Event Player, Wrecking Ball Adaptive Shield Target Sound, False, Event Player, 100, None);
		Event Player.effects[1] = Last Created Entity;
		Add Health Pool To Player(Event Player, Health, 500, False, False);
		Event Player.health_pool[1] = Last Created Health Pool;
		Wait Until(Is Dead(Event Player), 4.192);
		Destroy Effect(Event Player.effects[0]);
		Wait Until(Event Player.ability_2 == 0, 1);
		Destroy Effect(Event Player.effects[1]);
		Stop Chasing Player Variable(Event Player, ability_2);
		Remove Health Pool From Player(Event Player.health_pool[1]);
	}
}

rule("Wrecking Ball | Secondary Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Wait(0.032, Abort When False);
		Abort If(Event Player.teleportation);
		Event Player.ability_3 = !Event Player.ability_3;
	}
}

rule("Wrecking Ball | Secondary Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Event Player.ability_3 == True;
		Is In Alternate Form(Event Player) == True;
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Set Knockback Dealt(Event Player, 0);
		Wait Until(!Is In Alternate Form(Event Player) || Ability Cooldown(Event Player, Button(Crouch))
			>= 7.936 || !Event Player.ability_3, 9999);
		Set Knockback Dealt(Event Player, 100);
	}
}

rule("Wrecking Ball | Secondary Fire")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Event Ability == Button(Secondary Fire);
	}

	actions
	{
		If(Is Using Ability 1(Victim));
			Cancel Primary Action(Victim);
		End;
		Event Player.ability_6 = True;
		"Damage: 200"
		Damage(Victim, Event Player, 92.858);
		Remove Health Pool From Player(Event Player.health_pool[2]);
		Add Health Pool To Player(Event Player, Health, 250, False, False);
		Event Player.health_pool[2] = Last Created Health Pool;
		If(Event Player.ability_3);
			Victim.ms_debuff[10] = 30 * Global.resistance_multiplier;
			Victim.usage_ability[10] = Total Time Elapsed + 1;
		End;
		Wait(0.016, Ignore Condition);
		Skip If(!Is Game In Progress || Is Dead(Victim), 1);
		Event Player.debuff_value += 50 * Global.resistance_multiplier;
		Wait(0.384, Ignore Condition);
		Wait(2.600, Restart When True);
		Remove Health Pool From Player(Event Player.health_pool[2]);
	}
}

rule("Wrecking Ball | Secondary Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Disable Movement Collision With Players(Event Player);
		Event Player.ability_6 = False;
		Wait Until(!Is Firing Secondary(Event Player), 6);
		Enable Movement Collision With Players(Event Player);
		While(Ability Cooldown(Event Player, Button(Secondary Fire)) > 0);
			If(Event Player.ability_6);
				Set Ability Cooldown(Event Player, Button(Secondary Fire), Ability Cooldown(Event Player, Button(Secondary Fire)) + 3);
				Break;
			End;
			Wait(0.016, Ignore Condition);
		End;
	}
}

rule("Wrecking Ball | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		"Damage: 250"
		Damage(Victim, Event Player, 48.572);
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) - 2);
		Set Status(Victim, Event Player, Hacked, 1.500 * Global.resistance_multiplier);
		Abort If(!Is Game In Progress || Is Dead(Victim));
		Event Player.debuff_value += 80 * Min(1.500, Total Time Elapsed - Event Player.ability_4) * Global.resistance_multiplier;
		Event Player.ability_4 = Total Time Elapsed;
	}
}

rule("Wrecking Ball | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Ability 2 Enabled(Event Player, False);
		Wait(0.096, Ignore Condition);
		Event Player.max_health_percent = 500;
		Set Max Health(Event Player, Event Player.max_health_percent);
		Wait Until(!Is Using Ultimate(Event Player), 9999);
		Event Player.max_health_percent = 1;
		Set Max Health(Event Player, Event Player.max_health_percent);
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("Zarya")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zarya;
	}

	actions
	{
		Event Player.interact_cooldown = 8;
		Event Player.ability_6 = Event Player.interact_cooldown;
		Event Player.max_health_percent = 100;
		Set Max Health(Event Player, Event Player.max_health_percent);
		Set Damage Dealt(Event Player, 150);
		Add Health Pool To Player(Event Player, Health, 500 - 4 * Event Player.max_health_percent, True, False);
		Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
			Global.capture_players, Event Player) && Array Contains(Global.capture_players, Players In Slot(0, Team 2))) ? Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"),
			Top, 2, Null, Null, Null, String, Default Visibility);
		Event Player.huds[0] = Last Text ID;
		Create Progress Bar HUD Text(Event Player, Event Player.ability_6 / Event Player.interact_cooldown * 100,
			!Event Player.ability_3 && Event Player.ability_6 < Event Player.interact_cooldown ? Custom String("[{0}] : {1} sec",
			Ability Icon String(Hero(Soldier: 76), Button(Ability 1)), Round To Integer(
			Event Player.interact_cooldown - Event Player.ability_6, Up)) : (Event Player.ability_3 ? Custom String("[{0}]",
			Ability Icon String(Hero(Soldier: 76), Button(Ability 1))) : Custom String("[{0}] : press [{1}]", Ability Icon String(Hero(
			Soldier: 76), Button(Ability 1)), Input Binding String(Button(Interact)))), Top, 3, Event Player.ability_3 ? Color(Blue) : (
			Event Player.ability_6 == Event Player.interact_cooldown ? Color(Green) : Color(Black)), Color(Yellow),
			Visible To Values and Color, Default Visibility);
		Event Player.huds[1] = Last Text ID;
	}
}

rule("Zarya | Interact")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zarya;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.ability_6 == Event Player.interact_cooldown;
		(Is In Setup || Is Dead(Event Player) || Custom String("{0}", Is Communicating Any Emote(Event Player)) != Custom String("0")
			|| Has Status(Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned)) == False;
	}

	actions
	{
		Wait(0.032, Abort When False);
		Abort If(Event Player.teleportation);
		Event Player.ability_3 = True;
		Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.effects[0] = Last Created Entity;
		Chase Player Variable Over Time(Event Player, ability_6, 0, 2, None);
		Play Effect(Event Player, Ring Explosion Sound, False, Event Player, 90);
		Event Player.initial_ms += 37.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait Until(Is Dead(Event Player), 2);
		Destroy Effect(Event Player.effects[0]);
		Abort If(Is Assembling Heroes);
		Event Player.ability_3 = False;
		Event Player.initial_ms -= 37.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Abort If(Is Dead(Event Player));
		Chase Player Variable At Rate(Event Player, ability_6, Event Player.interact_cooldown, 1, Destination and Rate);
	}
}

rule("Zarya | Ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zarya;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.blocked_damage = Player Stat(Event Player, Damage Blocked);
		Wait Until(!Is Using Ability 2(Event Player), 9999);
		Wait(0.496, Ignore Condition);
		Abort If(!Is Game In Progress);
		Event Player.support_value += Min(400, (Player Stat(Event Player, Damage Blocked) - Event Player.blocked_damage) * 2);
		Loop If Condition Is True;
	}
}

rule("Zarya | Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Zarya;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
		Event Damage < 5;
	}

	actions
	{
		Skip If(!Is Game In Progress, 1);
		Event Player.debuff_value += 75;
		Wait(0.032, Ignore Condition);
		Damage(Victim, Event Player, 57.517 / 1.500);
	}
}

rule("Zen")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zenyatta;
	}

	actions
	{
		Event Player.interact_cooldown = 12;
		Event Player.ability_6 = Event Player.interact_cooldown;
		Event Player.ability_2 = 0;
		Event Player.max_health_percent = 100;
		Add Health Pool To Player(Event Player, Health, 50, True, False);
		Set Knockback Dealt(Event Player, 133.334);
		Set Ability 2 Enabled(Event Player, False);
		Set Healing Dealt(Event Player, 300);
		Set Damage Dealt(Event Player, 138.889);
		Set Projectile Speed(Event Player, 135 / 90 * 100);
		Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
			Global.capture_players, Event Player) && Array Contains(Global.capture_players, Players In Slot(0, Team 2))) ? Custom String(
			" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(" \n\n\n\n\n\n\n\n\n\n\n\n\n\n"), Top, 2, Null, Null, Null,
			String, Default Visibility);
		Event Player.huds[0] = Last Text ID;
		Create HUD Text(Event Player.ability_2 > 0 ? Event Player : Empty Array, Ability Icon String(Hero(Zenyatta), Button(Melee)),
			Custom String("strong knockback in:"), Custom String("ââ{0} s", String Slice(Event Player.ability_2, 0, 3)), Top, 3, Color(
			Green), Custom Color(255, 215, 0, 255), Color(White), Visible To and String, Default Visibility);
		Event Player.huds[2] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Event Player.ability_2 > 0 ? Custom String(" \n\n\n\n") : Custom String(" \n\n\n\n\n\n"),
			Top, 4, Null, Null, Null, String, Default Visibility);
		Event Player.huds[3] = Last Text ID;
		Create Progress Bar HUD Text(Event Player, Event Player.ability_6 / Event Player.interact_cooldown * 100,
			!Event Player.ability_3 && Event Player.ability_6 < Event Player.interact_cooldown ? Custom String("[{0}] : {1} sec",
			Ability Icon String(Hero(Soldier: 76), Button(Ability 1)), Round To Integer(
			Event Player.interact_cooldown - Event Player.ability_6, Up)) : (Event Player.ability_3 ? Custom String("[{0}]",
			Ability Icon String(Hero(Soldier: 76), Button(Ability 1))) : Custom String("[{0}] : press [{1}]", Ability Icon String(Hero(
			Soldier: 76), Button(Ability 1)), Input Binding String(Button(Interact)))), Top, 5, Event Player.ability_3 ? Color(Blue) : (
			Event Player.ability_6 == Event Player.interact_cooldown ? Color(Green) : Color(Black)), Color(Yellow),
			Visible To Values and Color, Default Visibility);
		Event Player.huds[1] = Last Text ID;
	}
}

rule("Zen | Melee")
{
	event
	{
		Player Dealt Knockback;
		Team 1;
		Zenyatta;
	}

	conditions
	{
		Event Player.ability_2 == 0;
	}

	actions
	{
		Small Message(Event Player, Custom String("Melee knockback is decreased"));
		Victim.ms_debuff[15] = 25 * Global.resistance_multiplier;
		Victim.usage_ability[15] = Total Time Elapsed + 1;
		Event Player.ability_2 = 6;
		Set Knockback Dealt(Event Player, 1.334);
		Chase Player Variable At Rate(Event Player, ability_2, 0, 1, None);
		Wait Until(Event Player.ability_2 == 0, 10);
		Abort If(Hero Of(Event Player) != Hero(Zenyatta));
		Stop Chasing Player Variable(Event Player, ability_2);
		Set Knockback Dealt(Event Player, 133.334);
	}
}

rule("Zen | Interact")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zenyatta;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.ability_6 == Event Player.interact_cooldown;
		(Is In Setup || Is Dead(Event Player) || Custom String("{0}", Is Communicating Any Emote(Event Player)) != Custom String("0")
			|| Has Status(Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned)) == False;
	}

	actions
	{
		Wait(0.032, Abort When False);
		Abort If(Event Player.teleportation);
		Event Player.ability_3 = True;
		Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.effects[0] = Last Created Entity;
		Chase Player Variable Over Time(Event Player, ability_6, 0, 2, None);
		Play Effect(Event Player, Ring Explosion Sound, False, Event Player, 90);
		Event Player.initial_ms += 40;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait Until(Is Dead(Event Player), 2);
		Destroy Effect(Event Player.effects[0]);
		Abort If(Is Assembling Heroes);
		Event Player.ability_3 = False;
		Event Player.initial_ms -= 40;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Abort If(Is Dead(Event Player));
		Chase Player Variable At Rate(Event Player, ability_6, Event Player.interact_cooldown, 1, Destination and Rate);
	}
}

rule("Zen | Ability 1")
{
	event
	{
		Player Dealt Healing;
		Team 1;
		Zenyatta;
	}

	conditions
	{
		Event Ability == Button(Ability 1);
		Is In Setup == False;
	}

	actions
	{
		Abort If(Is Using Ultimate(Healee) || Ultimate Charge Percent(Healee) == 100 || Healee.usage_ultimate);
		Event Player.ability_1[Slot Of(Healee)] += 1;
		"2.5 sec"
		Abort If(Event Player.ability_1[Slot Of(Healee)] != 13);
		Create Effect(All Players(Team 1), Winston Tesla Cannon Target Effect, Color(Team 1), Healee, False, Visible To);
		Event Player.effects[1] = Last Created Entity;
		Create Effect(Healee, Energy Sound, False, Healee, 40, None);
		Event Player.effects[2] = Last Created Entity;
		"100% / (50.0, 62.5, 83.3) sec"
		Set Ultimate Charge(Healee, Ultimate Charge Percent(Healee) + Global.ult_charger_percent_change[Index Of Array Value(All Heroes,
			Hero Of(Healee))]);
		Skip If(!Is Game In Progress, 1);
		Event Player.support_value += 40;
		Event Player.ability_1[Slot Of(Healee)] = Null;
		Wait(0.160, Ignore Condition);
		Destroy Effect(Array(Event Player.effects[1], Event Player.effects[2]));
	}
}

rule("Zen | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zenyatta;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == False;
	}

	actions
	{
		Destroy Effect(Array(Event Player.effects[1], Event Player.effects[2]));
	}
}

rule("Zen | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zenyatta;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Distance Between(Event Player, Players In Slot(0, Team 2)) <= 10.500;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(Players In Slot(0, Team 2)), Barriers Do Not Block LOS) == True;
	}

	actions
	{
		Damage(Players In Slot(0, Team 2), Event Player, 25);
		Set Status(Players In Slot(0, Team 2), Null, Burning, 0.272);
		Wait(0.256, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rein | Settings")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		(Is Waiting For Players || Is In Setup) == True;
	}

	actions
	{
		Destroy Effect(Event Player.effects);
		Destroy Effect(Event Player.res_effects);
		Destroy HUD Text(Event Player.huds[0]);
		Destroy In-World Text(Event Player.huds[0]);
		Destroy HUD Text(Event Player.huds[1]);
		Destroy In-World Text(Event Player.huds[1]);
		Destroy Progress Bar HUD Text(Event Player.huds[1]);
		Destroy HUD Text(Event Player.huds[2]);
		Destroy In-World Text(Event Player.huds[2]);
		Destroy HUD Text(Event Player.huds[3]);
		Destroy In-World Text(Event Player.huds[3]);
		Destroy HUD Text(Event Player.huds[4]);
		Destroy Progress Bar In-World Text(Event Player.huds[5]);
		Global.resistance_multiplier = 1;
		Set Jump Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Set Jump Vertical Speed(Event Player, 133);
		Event Player.initial_ms = 130;
		Event Player.real_ms = Event Player.initial_ms;
		Set Move Speed(Event Player, Event Player.real_ms);
		Destroy Icon(Event Player.icon);
		Set Healing Received(Event Player, 0);
		Set Knockback Received(Event Player, 100 / 0.700);
		Start Scaling Barriers(Event Player, 0.900, False);
		Event Player.ability_6 = 1;
		If(Is Waiting For Players);
			Set Max Health(Event Player, 400 / 1400 * 100);
			Wait(0.032, Ignore Condition);
			Add Health Pool To Player(Event Player, Health, 10000 - Max Health(Event Player) + 4, True, False);
			Add Health Pool To Player(Event Player, Health, 9999, True, False);
			Add Health Pool To Player(Event Player, Health, 9999, True, False);
			Add Health Pool To Player(Event Player, Health, 9999, True, False);
			Add Health Pool To Player(Event Player, Health, 9999, True, False);
		Else;
			Wait Until(Global.talents_timer > 0, 5);
			Wait Until(Is Game In Progress, Global.talents_timer);
			Set Max Health(Event Player, (200 + Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element))) * 100)
				/ 1400 * 100);
			Wait(0.032, Ignore Condition);
			Add Health Pool To Player(Event Player, Health, 6000 - Max Health(Event Player), True, False);
			Modify Global Variable(boss_candidates, Append To Array, Event Player);
			Create HUD Text(Global.boss_killed ? Empty Array : All Players(All Teams), Null, Custom String("{0} {1}", Hero Icon String(Hero Of(
				Event Player)), Event Player), Null, Left, 20, Color(White), Color(White), Color(White), Visible To, Default Visibility);
			Skip If(Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element))) <= 1, 2);
			Add Health Pool To Player(Event Player, Health, Array(Null, Null, 1500, 3000, 5000, 7000, 9500)[Count Of(Filtered Array(
				All Players(Team 1), Has Spawned(Current Array Element)))], True, False);
			Add Health Pool To Player(Event Player, Health, Array(Null, Null, 1500, 3000, 5000, 7000, 9500)[Count Of(Filtered Array(
				All Players(Team 1), Has Spawned(Current Array Element)))], True, False);
			Wait(0.016, Ignore Condition);
			If(Array Contains(Global.selected_talents, 0));
				Add Health Pool To Player(Global.boss_player, Health, Max Health(Global.boss_player) * 0.150, True, False);
			End;
			Create HUD Text(Event Player, Null, Null, !Array Contains(Global.capture_players, Event Player) || (Array Contains(
				Global.capture_players, Event Player) && Is True For Any(Global.capture_players, Team Of(Current Array Element) == Team 1))
				? Custom String(" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n") : Custom String(
				" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"), Top, 3, Null, Null, Null, String, Default Visibility);
			Create HUD Text(Event Player, Null, Null, Custom String("jump is available while using {0}", Ability Icon String(Hero(Reinhardt),
				Button(Ability 1))), Top, 4, Null, Null, Is On Ground(Event Player) && Event Player.ability_1 ? Color(Green) : (
				Event Player.ability_1 ? Color(Red) : Color(Yellow)), Visible To String and Color, Default Visibility);
			Set Ability 1 Enabled(Event Player, True);
			Set Ability Cooldown(Event Player, Button(Ability 1), 8.512);
			Wait(8.512, Ignore Condition);
			Set Ability 2 Enabled(Event Player, True);
		End;
	}
}

rule("Rein | Berserk")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Is Game In Progress == True;
		Array Contains(Global.selected_talents, 4) == True;
		Normalized Health(Event Player) <= 0.600 - 0.400 * Global.berserk_counter;
		Health(Event Player) > 0;
	}

	actions
	{
		For Global Variable(index, 0, Count Of(All Players(Team 1)), 1);
			Play Effect(All Players(Team 1)[Global.index], Explosion Sound, Null, All Players(Team 1)[Global.index], 100);
		End;
		Play Effect(Event Player, Ring Explosion Sound, Null, Event Player, 100);
		Big Message(All Players(All Teams), Custom String("Berserk in {0} sec!", Global.berserk_cast_time));
		Wait(Global.berserk_cast_time, Ignore Condition);
		Global.berserk_counter += 1;
		Event Player.initial_ms += 27.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Global.berserk_duration = 8;
		Global.resistance_multiplier = 0.667;
		Set Knockback Received(Event Player, 100 / 0.700 * Global.resistance_multiplier);
		If(!Global.berserk);
			Create Progress Bar HUD Text(Is Dead(Event Player) ? Empty Array : All Players(All Teams), Global.berserk_duration / Evaluate Once(
				Global.berserk_duration / 100), Custom String("{0} sec", Round To Integer(Global.berserk_duration, Up)), Top, 0.500, Color(
				Black), Color(Red), Visible To Values and Color, Default Visibility);
			Event Player.huds[0] = Last Text ID;
			Chase Global Variable At Rate(berserk_duration, 0, Has Status(Event Player, Phased Out) ? 0 : 1, Destination and Rate);
		End;
		Destroy Effect(Array(Event Player.effects[0], Event Player.effects[1]));
		Create Effect(All Players(All Teams), Winston Primal Rage Effect, Color(Team 2), Event Player, False, Visible To);
		Event Player.effects[0] = Last Created Entity;
		Create Effect(All Players(All Teams), Winston Primal Rage Sound, False, Event Player, 120, Visible To);
		Event Player.effects[1] = Last Created Entity;
		Global.berserk = True;
		While(Global.berserk_duration > 0);
			Wait(0.016, Restart When True);
		End;
		Destroy Progress Bar HUD Text(Event Player.huds[0]);
		Stop Chasing Global Variable(berserk_duration);
		Destroy Effect(Array(Event Player.effects[0], Event Player.effects[1]));
		Global.berserk_duration = 0;
		Global.berserk = False;
		Event Player.initial_ms -= 27.500;
		Set Move Speed(Event Player, Event Player.initial_ms);
		If(!Array Contains(Global.selected_talents, 2));
			Global.resistance_multiplier = 1;
			Set Knockback Received(Event Player, 100 / 0.700);
		End;
	}
}

rule("Rein | Ability 2 Cooldown")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Event Ability == Button(Ability 2);
		Array Contains(Global.selected_talents, 3) == True;
	}

	actions
	{
		Event Player.ability_8 += 1;
		Set Ability Cooldown(Event Player, Button(Ability 2), Event Player.ability_8 - Total Time Elapsed);
	}
}

rule("Rein | Ability 2 Cooldown")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Wait(0.496, Abort When False);
		Set Ability 2 Enabled(Event Player, False);
		Event Player.ability_2 = Array Contains(Global.selected_talents, 3) ? 2.992 : 4;
		Event Player.ability_8 = (Array Contains(Global.selected_talents, 3) ? 2.992 : 4) + Total Time Elapsed + 0.624;
		Wait(0.624, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 2), Event Player.ability_8 - Total Time Elapsed);
		Wait Until(Event Player.ability_8 <= Total Time Elapsed, 4);
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("Rein | Extra Damage From Ability 1, Ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		((Event Ability == Button(Ultimate) && Event Damage <= 60 * (Array Contains(Global.selected_talents, 1) ? 2 : 1)) || (
			Event Ability == Button(Ability 1) && Event Damage < 134)) == True;
	}

	actions
	{
		Damage(Victim, Event Player, Event Ability == Button(Ultimate) ? 150 : 16.667 * 100 / Event Player.damage_dealt);
	}
}

rule("Rein | Extra Damage")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		Array Contains(Array(Button(Primary Fire), Button(Ability 2)), Event Ability) == True;
		Hero Of(Attacker) == Hero(Reinhardt);
	}

	actions
	{
		Event Player.damage_count_ticks += 5;
		Event Player.damage_temp = Event Player.damage_count_ticks;
		For Player Variable(Event Player, i_3, 0, Event Player.damage_temp, 1);
			Wait(0.192, Restart When True);
			If(Has Status(Event Player, Phased Out) || Has Status(Event Player, Invincible));
				Event Player.damage_count_ticks = 0;
				Break;
			End;
			Event Player.damage_count_ticks -= 1;
			Damage(Event Player, Attacker, 15 * 100 / Attacker.damage_dealt);
		End;
	}
}

rule("Rein | Ultimate")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Reinhardt);
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Wait(1.904, Ignore Condition);
		Clear Status(Event Player, Knocked Down);
	}
}

rule("Rein | Set Damage")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		(Is Firing Primary(Event Player) || Is Using Ability 2(Event Player) || Is Using Ability 1(Event Player)) == True;
	}

	actions
	{
		If(Is Firing Primary(Event Player));
			"125 / 275"
			Event Player.damage_dealt = 125 * (Global.berserk ? 2.200 : 1);
		Else If(Is Using Ability 2(Event Player));
			"325"
			Event Player.damage_dealt = 325 / 120 * 100;
		Else If(Is Using Ability 1(Event Player));
			"600"
			Event Player.damage_dealt = 600 / 275 * 100;
		End;
		Set Damage Dealt(Event Player, Event Player.damage_dealt);
		Wait(0.192, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rein | Set Ultimate Damage")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		(Is Firing Primary(Event Player) || Is Using Ability 2(Event Player) || Is Using Ability 1(Event Player)) == False;
	}

	actions
	{
		Wait(0.064, Abort When False);
		"225 / 450"
		Event Player.damage_dealt = 112.500 * (Array Contains(Global.selected_talents, 1) ? 2 : 1);
		Set Damage Dealt(Event Player, Event Player.damage_dealt);
	}
}

rule("Rein | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Event Player.ability_1 == True;
	}

	actions
	{
		Event Player.ability_4 = Horizontal Facing Angle Of(Event Player);
		Wait(0.016, Ignore Condition);
		If(Angle Difference(Horizontal Facing Angle Of(Event Player), Event Player.ability_4) > 0);
			Start Accelerating(Event Player, Right, 100, 4, To Player, Direction Rate and Max Speed);
		Else If(Angle Difference(Horizontal Facing Angle Of(Event Player), Event Player.ability_4) < 0);
			Start Accelerating(Event Player, Left, 100, 4, To Player, Direction Rate and Max Speed);
		Else;
			Stop Accelerating(Event Player);
		End;
		Loop If Condition Is True;
		Stop Accelerating(Event Player);
	}
}

rule("Rein | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Event Player.ability_1 == True;
		Is Button Held(Event Player, Button(Jump)) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Up, 6.400, To World, Incorporate Contrary Motion);
		Wait Until(Is In Air(Event Player), 0.080);
		Event Player.ability_3 = 100;
		While(Event Player.ability_1 && Is In Air(Event Player));
			Wait(0.048, Ignore Condition);
			Event Player.ability_3 += 4.800;
			Set Gravity(Event Player, Min(250, Event Player.ability_3));
		End;
		Set Gravity(Event Player, 100);
		Loop If Condition Is True;
	}
}

rule("Rein | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Jump Enabled(Event Player, False);
		Wait(0.592, Ignore Condition);
		If(Is Using Ability 1(Event Player));
			Event Player.ability_1 = True;
			Wait Until(!Is Using Ability 1(Event Player), 3.024);
			If(Array Contains(Global.selected_talents, 5));
				Set Ability Cooldown(Event Player, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)) - 2);
			End;
			Wait(0.016, Ignore Condition);
			Event Player.ability_1 = False;
		End;
		Wait(0.048, Ignore Condition);
		Set Jump Enabled(Event Player, True);
	}
}

rule("Rein | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Event Player.ability_1 == True;
		Is Button Held(Event Player, Button(Ability 1)) == False;
	}

	actions
	{
		Wait Until(Is Button Held(Event Player, Button(Ability 1)), 3.024);
		If(Event Player.ability_1);
			Set Status(Event Player, Null, Hacked, 1.504);
			Event Player.initial_ms -= 30;
			Set Move Speed(Event Player, Event Player.initial_ms);
			Wait(1.504, Ignore Condition);
			Event Player.initial_ms += 30;
			Set Move Speed(Event Player, Event Player.initial_ms);
		End;
	}
}

rule("Rein | Charge Talent")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Array Contains(Global.selected_talents, 5) == True;
		Event Player.ability_1 == True;
	}

	actions
	{
		Create Projectile Effect(All Players(All Teams), Reinhardt Fire Strike, All Players(Team 2), Update Every Frame(World Vector Of(
			Vector(1.750, 0.850, -1), Event Player, Rotation And Translation)), World Vector Of(Forward, Event Player, Rotation), 0,
			Visible To Position Direction and Size);
		Event Player.effects[2] = Last Created Entity;
		Create Projectile Effect(All Players(All Teams), Reinhardt Fire Strike, All Players(Team 2), Update Every Frame(World Vector Of(
			Vector(-1.750, 0.850, -1), Event Player, Rotation And Translation)), World Vector Of(Forward, Event Player, Rotation), 0,
			Visible To Position Direction and Size);
		Event Player.effects[3] = Last Created Entity;
		While(Is Using Ability 1(Event Player));
			Event Player.ability_5 = Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element) && !Has Status(
				Current Array Element, Phased Out) && Total Time Elapsed > Current Array Element.received_dmg_from_charge);
			For Player Variable(Event Player, i_1, 0, Count Of(Event Player.ability_5), 1);
				If(Distance Between(World Vector Of(Vector(1.750, 0.850, -1), Event Player, Rotation And Translation), (Eye Position(
					Event Player.ability_5[Event Player.i_1]) + Position Of(Event Player.ability_5[Event Player.i_1])) / 2)
					<= 1.600 || Distance Between(World Vector Of(Vector(-1.750, 0.850, -1), Event Player, Rotation And Translation), (Eye Position(
					Event Player.ability_5[Event Player.i_1]) + Position Of(Event Player.ability_5[Event Player.i_1])) / 2) <= 1.600);
					Damage(Event Player.ability_5[Event Player.i_1], Event Player, 300 * 100 / Event Player.damage_dealt);
					Event Player.ability_5[Event Player.i_1].received_dmg_from_charge = Total Time Elapsed + 0.512;
				End;
			End;
			Wait(0.016, Ignore Condition);
		End;
		Destroy Effect(Array(Event Player.effects[2], Event Player.effects[3]));
	}
}

rule("Rein | Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Has Status(Event Player, Knocked Down) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) >= (Array Contains(Global.selected_talents, 5) ? 7.936 : 9.936);
		(Ability Cooldown(Players On Hero(Hero(Reinhardt), Team 1), Button(Ability 1)) >= 6.944 || Ability Cooldown(Players On Hero(Hero(
			Doomfist), Team 1), Button(Secondary Fire)) >= 5.936 || Ability Cooldown(Players On Hero(Hero(Brigitte), Team 1), Button(
			Primary Fire)) >= 7.936) == True;
	}

	actions
	{
		Clear Status(Event Player, Knocked Down);
	}
}

rule("Rein | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) >= 60;
	}

	actions
	{
		Wait Until(!Ultimate Charge Percent(Event Player), 9999);
		Event Player.ability_6 = Normalized Health(Event Player);
		Wait(0.032, Ignore Condition);
		Abort If(Ability Cooldown(Event Player, Button(Ability 1)) < 1);
		Small Message(Event Player, Custom String("{0} cooldown is reset", Ability Icon String(Hero(Reinhardt), Button(Ability 1))));
		Wait(0.032, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
	}
}

rule("Rein | Ultimate Charge")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Is In Setup == False;
		Ultimate Charge Percent(Event Player) < 100;
	}

	actions
	{
		Wait(2.496, Abort When False);
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 1);
		Loop If Condition Is True;
	}
}

rule("Rein | Ultimate Charge")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Normalized Health(Event Player) <= Event Player.ability_6 - 0.005;
		Is Alive(Event Player) == True;
		Ultimate Charge Percent(Event Player) < 100;
	}

	actions
	{
		Event Player.ability_7 = Event Player.ability_6 - Normalized Health(Event Player);
		Event Player.ability_6 = Normalized Health(Event Player);
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 400 * Event Player.ability_7);
	}
}

rule("Rein | Ultimate Talent")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Using Ultimate(Players On Hero(Hero(Reinhardt), Team 2)) == True;
		Array Contains(Global.selected_talents, 1) == True;
		Health(Event Player) > 0;
	}

	actions
	{
		Abort If(Has Status(Event Player, Phased Out));
		Event Player.initial_ms -= 25;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Create Effect(All Players(All Teams), Sigma Gravitic Flux Target Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.debuff_effect = Last Created Entity;
		Wait Until(Has Status(Event Player, Phased Out), 3);
		Destroy Effect(Event Player.debuff_effect);
		Event Player.initial_ms += 25;
		Set Move Speed(Event Player, Event Player.initial_ms);
	}
}

rule("Rein | Barrier")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == False;
	}

	actions
	{
		Abort If(Ability Cooldown(Event Player, Button(Secondary Fire)) > 0);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 0.800);
		Wait(0.816, Ignore Condition);
	}
}

rule("Rein | Barrier Move Speed")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Wait(0.096, Abort When False);
		While(Is Firing Secondary(Event Player));
			Event Player.ms_debuff[0] = 25;
			Event Player.usage_ability[0] = Total Time Elapsed + 0.048;
			Wait(0.032, Ignore Condition);
		End;
	}
}

rule("Boss | Move Speed Debuff")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is True For Any(Event Player.usage_ability, Current Array Element >= Total Time Elapsed) == True;
	}

	actions
	{
		If(Total Time Elapsed <= Event Player.usage_ability[3] || Total Time Elapsed <= Event Player.usage_ability[9]);
			Set Jump Vertical Speed(Event Player, 100);
		Else;
			Set Jump Vertical Speed(Event Player, 133);
		End;
		Event Player.total_ms_debuff = 0;
		For Player Variable(Event Player, penalty_counter, 0, 18, 1);
			Event Player.total_ms_debuff += Event Player.usage_ability[Event Player.penalty_counter] >= Total Time Elapsed ? Event Player.ms_debuff[Event Player.penalty_counter] : 0;
		End;
		Event Player.real_ms = Max(20, (Event Player.initial_ms - Event Player.total_ms_debuff) / (Event Player.ravenous_vortex ? 0.600 : (
			Is Firing Secondary(Event Player) ? 0.700 : (Event Player.magnetic_grenade ? 0.750 : 1))));
		Set Move Speed(Event Player, Event Player.real_ms);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Event Player.real_ms = Event Player.initial_ms;
		Set Move Speed(Event Player, Event Player.real_ms);
	}
}

rule("Ult Charger 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.ult_charger_1_cd >= 6;
		disabled Is True For Any(All Living Players(All Teams), !Current Array Element.usage_ultimate && Distance Between(Current Array Element,
			Global.ult_charger_1) <= 1.400 && Ultimate Charge Percent(Current Array Element) < 100 && !Is Using Ultimate(
			Current Array Element)) == True;
		Is True For Any(All Living Players(All Teams), Y Component Of(Position Of(Current Array Element)) >= Y Component Of(
			Global.ult_charger_1) && Y Component Of(Position Of(Current Array Element)) <= Y Component Of(Global.ult_charger_1)
			+ 3.250 && (X Component Of(Global.ult_charger_1) - X Component Of(Position Of(Current Array Element))) * (X Component Of(
			Global.ult_charger_1) - X Component Of(Position Of(Current Array Element))) + (Z Component Of(Global.ult_charger_1)
			- Z Component Of(Position Of(Current Array Element))) * (Z Component Of(Global.ult_charger_1) - Z Component Of(Position Of(
			Current Array Element))) <= 1.200 && !Current Array Element.usage_ultimate && Ultimate Charge Percent(Current Array Element)
			< 100 && !Is Using Ultimate(Current Array Element)) == True;
	}

	actions
	{
		Global.player_ult_charger_1 = First Of(Sorted Array(Filtered Array(All Living Players(All Teams),
			!Current Array Element.usage_ultimate && Ultimate Charge Percent(Current Array Element) < 100 && !Is Using Ultimate(
			Current Array Element) && Y Component Of(Position Of(Current Array Element)) >= Y Component Of(Global.ult_charger_1)
			&& Y Component Of(Position Of(Current Array Element)) <= Y Component Of(Global.ult_charger_1) + 3.250), (X Component Of(
			Global.ult_charger_1) - X Component Of(Position Of(Current Array Element))) * (X Component Of(Global.ult_charger_1)
			- X Component Of(Position Of(Current Array Element))) + (Z Component Of(Global.ult_charger_1) - Z Component Of(Position Of(
			Current Array Element))) * (Z Component Of(Global.ult_charger_1) - Z Component Of(Position Of(Current Array Element)))));
		Global.player_charge_1 = Round To Integer(Global.ult_charger_1_cd / 6, Down) * (Team Of(Global.player_ult_charger_1)
			== Team 1 ? Global.ult_charger_percent_change[Index Of Array Value(All Heroes, Hero Of(Global.player_ult_charger_1))] : 3);
		Global.ult_charger_1_cd -= Round To Integer(Min(Global.player_charge_1, 100 - Ultimate Charge Percent(Global.player_ult_charger_1))
			/ Global.player_charge_1 * Round To Integer(Global.ult_charger_1_cd / 6, Down), Up) * 6;
		Play Effect(All Players(All Teams), Ring Explosion, Color(Blue), Global.ult_charger_1 + Up * 0.600, 6);
		Play Effect(Global.player_ult_charger_1, Buff Impact Sound, Null, Global.ult_charger_1 + Up * 0.600, 90);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Global.player_ult_charger_1, 2);
		Set Ultimate Charge(Global.player_ult_charger_1, Ultimate Charge Percent(Global.player_ult_charger_1) + Global.player_charge_1);
		Wait Until(Global.ult_charger_1_cd >= 6 && Is True For Any(All Living Players(All Teams), Y Component Of(Position Of(
			Current Array Element)) >= Y Component Of(Global.ult_charger_1) && Y Component Of(Position Of(Current Array Element))
			<= Y Component Of(Global.ult_charger_1) + 3.250 && (X Component Of(Global.ult_charger_1) - X Component Of(Position Of(
			Current Array Element))) * (X Component Of(Global.ult_charger_1) - X Component Of(Position Of(Current Array Element))) + (
			Z Component Of(Global.ult_charger_1) - Z Component Of(Position Of(Current Array Element))) * (Z Component Of(
			Global.ult_charger_1) - Z Component Of(Position Of(Current Array Element)))
			<= 1.200 && !Current Array Element.usage_ultimate && Ultimate Charge Percent(Current Array Element)
			< 100 && !Is Using Ultimate(Current Array Element)), 9999);
		Loop;
	}
}

rule("Ult Charger 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.ult_charger_2_cd >= 6;
		disabled Is True For Any(All Living Players(All Teams), !Current Array Element.usage_ultimate && Distance Between(Current Array Element,
			Global.ult_charger_2) <= 1.400 && Ultimate Charge Percent(Current Array Element) < 100 && !Is Using Ultimate(
			Current Array Element)) == True;
		Is True For Any(All Living Players(All Teams), Y Component Of(Position Of(Current Array Element)) >= Y Component Of(
			Global.ult_charger_2) && Y Component Of(Position Of(Current Array Element)) <= Y Component Of(Global.ult_charger_2)
			+ 3.250 && (X Component Of(Global.ult_charger_2) - X Component Of(Position Of(Current Array Element))) * (X Component Of(
			Global.ult_charger_2) - X Component Of(Position Of(Current Array Element))) + (Z Component Of(Global.ult_charger_2)
			- Z Component Of(Position Of(Current Array Element))) * (Z Component Of(Global.ult_charger_2) - Z Component Of(Position Of(
			Current Array Element))) <= 1.200 && !Current Array Element.usage_ultimate && Ultimate Charge Percent(Current Array Element)
			< 100 && !Is Using Ultimate(Current Array Element)) == True;
	}

	actions
	{
		Global.player_ult_charger_2 = First Of(Sorted Array(Filtered Array(All Living Players(All Teams),
			!Current Array Element.usage_ultimate && Ultimate Charge Percent(Current Array Element) < 100 && !Is Using Ultimate(
			Current Array Element) && Y Component Of(Position Of(Current Array Element)) >= Y Component Of(Global.ult_charger_2)
			&& Y Component Of(Position Of(Current Array Element)) <= Y Component Of(Global.ult_charger_2) + 3.250), (X Component Of(
			Global.ult_charger_2) - X Component Of(Position Of(Current Array Element))) * (X Component Of(Global.ult_charger_2)
			- X Component Of(Position Of(Current Array Element))) + (Z Component Of(Global.ult_charger_2) - Z Component Of(Position Of(
			Current Array Element))) * (Z Component Of(Global.ult_charger_2) - Z Component Of(Position Of(Current Array Element)))));
		Global.player_charge_2 = Round To Integer(Global.ult_charger_2_cd / 6, Down) * (Team Of(Global.player_ult_charger_2)
			== Team 1 ? Global.ult_charger_percent_change[Index Of Array Value(All Heroes, Hero Of(Global.player_ult_charger_2))] : 3);
		Global.ult_charger_2_cd -= Round To Integer(Min(Global.player_charge_2, 100 - Ultimate Charge Percent(Global.player_ult_charger_2))
			/ Global.player_charge_2 * Round To Integer(Global.ult_charger_2_cd / 6, Down), Up) * 6;
		Play Effect(All Players(All Teams), Ring Explosion, Color(Blue), Global.ult_charger_2 + Up * 0.600, 6);
		Play Effect(Global.player_ult_charger_2, Buff Impact Sound, Null, Global.ult_charger_2 + Up * 0.600, 90);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Global.player_ult_charger_2, 2);
		Set Ultimate Charge(Global.player_ult_charger_2, Ultimate Charge Percent(Global.player_ult_charger_2) + Global.player_charge_2);
		Wait Until(Global.ult_charger_2_cd >= 6 && Is True For Any(All Living Players(All Teams), Y Component Of(Position Of(
			Current Array Element)) >= Y Component Of(Global.ult_charger_2) && Y Component Of(Position Of(Current Array Element))
			<= Y Component Of(Global.ult_charger_2) + 3.250 && (X Component Of(Global.ult_charger_2) - X Component Of(Position Of(
			Current Array Element))) * (X Component Of(Global.ult_charger_2) - X Component Of(Position Of(Current Array Element))) + (
			Z Component Of(Global.ult_charger_2) - Z Component Of(Position Of(Current Array Element))) * (Z Component Of(
			Global.ult_charger_2) - Z Component Of(Position Of(Current Array Element)))
			<= 1.200 && !Current Array Element.usage_ultimate && Ultimate Charge Percent(Current Array Element)
			< 100 && !Is Using Ultimate(Current Array Element)), 9999);
		Loop;
	}
}

rule("Generators")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Is Game In Progress || Is Between Rounds) == True;
	}

	actions
	{
		For Global Variable(generators_counter_1, 0, Count Of(Global.generators_position), 1);
			If(Global.generators_cd[Global.generators_counter_1] < Total Time Elapsed);
				If(Is True For Any(All Living Players(Team 2), Distance Between(Current Array Element,
					Global.generators_position[Global.generators_counter_1]) <= Global.generators_radius + 0.250));
					For Global Variable(generators_counter_2, 0, Count Of(Global.generators_position), 1);
						If(Global.generators_counter_2 == Global.generators_counter_1);
							Global.generators_cd[Global.generators_counter_2] = Total Time Elapsed + (Total Time Elapsed < Global.point ? 12 : 0.144);
						Else;
							Global.generators_cd[Global.generators_counter_2] = Max(Global.generators_cd[Global.generators_counter_2], Total Time Elapsed) + (
								Total Time Elapsed < Global.point ? 4 : 0);
						End;
						If(Global.generators_cd[Global.generators_counter_2] > Total Time Elapsed);
							Play Effect(All Players(All Teams), Sombra Hacked Starting Effect, Color(Team 1),
								Global.generators_position[Global.generators_counter_2] + Up * 1.500, False);
							Play Effect(All Players(All Teams), Ring Explosion, Color(Purple),
								Global.generators_position[Global.generators_counter_2] + Up * 0.100, Global.generators_radius * 2);
							Play Effect(All Players(All Teams), Sombra Logo Sound, False, Global.generators_position[Global.generators_counter_2] + Up * 1.500,
								100);
						End;
					End;
				End;
			End;
		End;
		If(Is True For Any(Global.generators_cd, Current Array Element < Total Time Elapsed));
			Global.generators_players = Filtered Array(All Living Players(Team 1), (
				Global.generators_cd[0] < Total Time Elapsed && Y Component Of(Position Of(Current Array Element)) >= Y Component Of(
				Global.generators_position[0]) && Y Component Of(Position Of(Current Array Element)) <= Y Component Of(
				Global.generators_position[0]) + 20.500 && (X Component Of(Global.generators_position[0]) - X Component Of(Position Of(
				Current Array Element))) * (X Component Of(Global.generators_position[0]) - X Component Of(Position Of(Current Array Element)))
				+ (Z Component Of(Global.generators_position[0]) - Z Component Of(Position Of(Current Array Element))) * (Z Component Of(
				Global.generators_position[0]) - Z Component Of(Position Of(Current Array Element))) <= (Global.generators_radius + 0.250) ^ 2)
				|| (Global.generators_cd[1] < Total Time Elapsed && Y Component Of(Position Of(Current Array Element)) >= Y Component Of(
				Global.generators_position[0]) && Y Component Of(Position Of(Current Array Element)) <= Y Component Of(
				Global.generators_position[1]) + 20.500 && (X Component Of(Global.generators_position[1]) - X Component Of(Position Of(
				Current Array Element))) * (X Component Of(Global.generators_position[1]) - X Component Of(Position Of(Current Array Element)))
				+ (Z Component Of(Global.generators_position[1]) - Z Component Of(Position Of(Current Array Element))) * (Z Component Of(
				Global.generators_position[1]) - Z Component Of(Position Of(Current Array Element))) <= (Global.generators_radius + 0.250)
				^ 2));
			If(Global.generators_players);
				For Global Variable(generators_counter_2, 0, Count Of(Global.generators_players), 1);
					Global.generators_players[Global.generators_counter_2].generators_ticks += 1;
				End;
				Global.generators_capacity += 0.240 * Count Of(Global.generators_players);
				If(Global.generators_capacity % 5 <= 0.240 * Count Of(Global.generators_players));
					If(Global.generators_cd[0] < Total Time Elapsed);
						Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Global.generators_position[0] + Up * 0.600,
							Global.generators_radius * 2);
						Play Effect(All Players(All Teams), Ring Explosion Sound, Null, Global.generators_position[0] + Up * 0.600, 25);
					End;
					If(Global.generators_cd[1] < Total Time Elapsed);
						Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Global.generators_position[1] + Up * 0.600,
							Global.generators_radius * 2);
						Play Effect(All Players(All Teams), Ring Explosion Sound, Null, Global.generators_position[1] + Up * 0.600, 25);
					End;
				End;
				If(Global.generators_capacity >= 100);
					For Global Variable(generators_counter_2, 0, Count Of(Global.generators_players), 1);
						Global.generators_players[Global.generators_counter_2].generators_ticks -= (Global.generators_capacity - 100) / Count Of(
							Global.generators_players);
					End;
					If(Is Game In Progress);
						For Global Variable(generators_counter_2, 0, Count Of(All Players(Team 1)), 1);
							All Players(Team 1)[Global.generators_counter_2].support_value += All Players(Team 1)
								[Global.generators_counter_2].generators_ticks * 4.800;
						End;
					End;
					All Players(Team 1).generators_ticks = 0;
					Global.resurrections += 1;
					Global.generators_capacity = 0;
				End;
			End;
		End;
		Wait(0.144, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Resurrections")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.resurrections > 0;
		disabled Global.point - 30 <= Total Time Elapsed;
		Filtered Array(All Dead Players(Team 1), !Current Array Element.player_received_resurrection) != Empty Array;
	}

	actions
	{
		Last Of(Sorted Array(Filtered Array(All Dead Players(Team 1), !Current Array Element.player_received_resurrection),
			Current Array Element.total_value - Current Array Element.number_of_points)).player_received_resurrection = True;
		Global.resurrections -= 1;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Player Resurrection")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.player_received_resurrection == True;
	}

	actions
	{
		Start Facing(Event Player, Forward, 10000, To Player, Direction and Turn Rate);
		Set Status(Event Player, Null, Rooted, 2.500);
		Set Status(Event Player, Null, Phased Out, 5);
		Create Effect(All Players(All Teams), Orb, Color(Orange), Event Player, 1, Visible To Position and Radius);
		Event Player.res_effects[0] = Last Created Entity;
		Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ World Vector Of(Backward, Event Player, Rotation) * 5, Empty Array, Empty Array, False)), Update Every Frame(Eye Position(
			Event Player)), 0);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player, 5);
		Wait Until(Is Alive(Event Player), 1.496);
		Destroy Effect(Event Player.res_effects[0]);
		If(Is Alive(Event Player));
			Stop Camera(Event Player);
			Stop Facing(Event Player);
			Global.resurrections += 1;
			Event Player.player_received_resurrection = False;
			Abort;
		End;
		Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player, 5);
		Resurrect(Event Player);
		Wait(0.016, Ignore Condition);
		Heal(Event Player, Null, Max Health(Event Player));
		Create Effect(All Players(All Teams), Baptiste Immortality Field Protected Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.res_effects[0] = Last Created Entity;
		Create Effect(All Players(All Teams), Baptiste Immortality Field Protected Sound, False, Event Player, 100, Visible To);
		Event Player.res_effects[1] = Last Created Entity;
		Start Camera(Event Player, Update Every Frame(Eye Position(Event Player)), Update Every Frame(Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 5), 5);
		Wait(1, Ignore Condition);
		Stop Camera(Event Player);
		Stop Facing(Event Player);
		Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(Team 1), Event Player, False, Visible To);
		Event Player.res_effects[2] = Last Created Entity;
		Event Player.temp_ms = 250 - Event Player.initial_ms;
		Event Player.initial_ms += Event Player.temp_ms;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Wait Until(Is Dead(Event Player), 2.500);
		Clear Status(Event Player, Phased Out);
		Destroy Effect(Event Player.res_effects);
		Event Player.initial_ms -= Event Player.temp_ms;
		Set Move Speed(Event Player, Event Player.initial_ms);
		Event Player.player_received_resurrection = False;
	}
}

rule("Impulseboosts")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		For Global Variable(impulseboosts_counter, 0, Count Of(Global.impulseboosts_position), 1);
			If(Global.impulseboosts_cd[Global.impulseboosts_counter] <= Total Time Elapsed);
				Global.impulseboosts_player = Filtered Array(All Living Players(All Teams), Y Component Of(Position Of(Current Array Element))
					>= Y Component Of(Global.impulseboosts_position[Global.impulseboosts_counter]) && Y Component Of(Position Of(
					Current Array Element)) <= Y Component Of(Global.impulseboosts_position[Global.impulseboosts_counter]) + 3.250);
				If(Global.impulseboosts_player);
					Global.distances_arr = Mapped Array(Global.impulseboosts_player, (X Component Of(
						Global.impulseboosts_position[Global.impulseboosts_counter]) - X Component Of(Position Of(Current Array Element))) * (
						X Component Of(Global.impulseboosts_position[Global.impulseboosts_counter]) - X Component Of(Position Of(
						Current Array Element))) + (Z Component Of(Global.impulseboosts_position[Global.impulseboosts_counter]) - Z Component Of(
						Position Of(Current Array Element))) * (Z Component Of(Global.impulseboosts_position[Global.impulseboosts_counter])
						- Z Component Of(Position Of(Current Array Element))));
					Global.impulseboosts_player = First Of(Sorted Array(Filtered Array(Global.impulseboosts_player,
						Global.distances_arr[Current Array Index] < (Global.impulseboosts_radius + 0.300) ^ 2),
						Global.distances_arr[Current Array Index]));
					If(Global.impulseboosts_player);
						Global.impulseboosts_cd[Global.impulseboosts_counter] = Total Time Elapsed + 2.750;
						Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Global.impulseboosts_position[Global.impulseboosts_counter],
							Global.impulseboosts_radius);
						Play Effect(Global.impulseboosts_player, Buff Impact Sound, Null, Global.impulseboosts_position[Global.impulseboosts_counter],
							100);
						Apply Impulse(Global.impulseboosts_player, Vector(0, 1, 0),
							Global.impulseboosts_vertical_power[Global.impulseboosts_counter] - Altitude Of(Global.impulseboosts_player), To Player,
							Cancel Contrary Motion XYZ);
						Apply Impulse(Global.impulseboosts_player, Throttle Of(Global.impulseboosts_player) == Vector(0, 0, 0) ? Vector(0, 0, 1)
							: Throttle Of(Global.impulseboosts_player), Global.impulseboosts_horizontal_power[Global.impulseboosts_counter], To Player,
							Incorporate Contrary Motion);
					End;
				End;
			End;
		End;
		Wait(0.048, Ignore Condition);
		Loop;
	}
}

rule("Privileges")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Between Rounds == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		If(Team Score(Team 1) <= Team Score(Team 2));
			Global.boss_killed = True;
			Event Player.number_privileges = 2;
			Event Player.number_of_points = 4000;
			Small Message(Event Player, Custom String("{0} got 4000 extra points for 2 rounds!", Event Player));
		Else If(Global.boss_killed);
			Event Player.number_privileges = 2;
			Event Player.number_of_points = 2500;
			Small Message(Event Player, Custom String("{0} got 2500 extra points for 2 rounds!", Event Player));
		Else;
			Abort;
		End;
		Global.last_boss = Event Player;
	}
}

rule("Privilege, Total Value")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Between Rounds == True;
		Global.boss_killed == True;
	}

	actions
	{
		Wait(2.880, Ignore Condition);
		Global.players_with_privileges = Filtered Array(All Players(Team 1), Current Array Element.number_privileges);
		For Global Variable(privileges_counter, 0, Count Of(Global.players_with_privileges), 1);
			Global.players_with_privileges[Global.privileges_counter].number_privileges -= 1;
		End;
		Global.total_value_array = Sorted Array(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element)),
			Current Array Element.total_value);
	}
}

rule("Player Wants To Be Boss")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		(Is Game In Progress || Is Between Rounds) == True;
	}

	actions
	{
		Abort If(Team Of(Event Player) == Team 2 && !Global.boss_killed);
		Wait(0.032, Ignore Condition);
		Event Player.holding_time += 0.032;
		If(Event Player.holding_time >= 0.896);
			Play Effect(Event Player, Ring Explosion Sound, Null, Event Player, 100);
			If(Array Contains(Global.boss_candidates, Event Player));
				Destroy HUD Text(Event Player.hud_boss_candidate);
				Small Message(Event Player, Custom String("You have been removed from the list"));
				Modify Global Variable(boss_candidates, Remove From Array By Value, Event Player);
			Else;
				Small Message(Event Player, Custom String("You have been added to the list"));
				Modify Global Variable(boss_candidates, Append To Array, Event Player);
				Create HUD Text(Global.boss_killed && Global.next_boss_color == Event Player ? Empty Array : All Players(All Teams), Null,
					Custom String("{0} {1}", Hero Icon String(Hero Of(Event Player)), Event Player), Null, Left, Evaluate Once(Team Of(
					Event Player) == Team 1 ? 13 : 20) + Index Of Array Value(Global.boss_candidates, Event Player), Null, Color(Green), Color(
					Green), Visible To Sort Order and String, Default Visibility);
				Event Player.hud_boss_candidate = Last Text ID;
			End;
			Wait(0.400, Ignore Condition);
			Event Player.holding_time = 0;
		End;
		Loop If Condition Is True;
		Event Player.holding_time = 0;
	}
}

rule("Swap Players")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Is Assembling Heroes || (Is Game In Progress && !Entity Exists(Players In Slot(0, Team 2)) && Number Of Players(All Teams) >= 2))
			== True;
	}

	actions
	{
		Wait(0.096, Abort When False);
		If(Is Game In Progress);
			Wait(1.504, Abort When False);
			Go To Assemble Heroes;
		End;
		Wait(0.016, Ignore Condition);
		Global.candidate_player = Null;
		While(Is Assembling Heroes);
			Global.boss_candidates = Filtered Array(Global.boss_candidates, Entity Exists(Current Array Element));
			If(Global.boss_candidates && Custom String("{0}", Players In Slot(0, Team 2)) != Global.candidate_player);
				Global.candidate_player = Custom String("{0}", Is True For Any(Global.boss_candidates, Team Of(Current Array Element) == Team 1)
					? First Of(Filtered Array(Global.boss_candidates, Team Of(Current Array Element) == Team 1)) : Players In Slot(0, Team 2));
				If(Is True For Any(Global.boss_candidates, Team Of(Current Array Element) == Team 1));
					Global.max_number_talents = 1;
					Move Player to Team(First Of(Filtered Array(Global.boss_candidates, Team Of(Current Array Element) == Team 1)), Team 2, -1);
					Move Player to Team(Players In Slot(0, Team 2), Team 1, -1);
					Wait(1.904, Ignore Condition);
				Else;
					Global.max_number_talents = Global.boss_killed ? 1 : 3;
				End;
			Else If((Global.boss_killed && Global.candidate_player != Custom String("{0}", Players In Slot(0, Team 2))) || (
					!Global.boss_candidates && !Entity Exists(Players In Slot(0, Team 2))));
				Global.boss_killed = False;
				Global.next_boss = First Of(Filtered Array(Global.total_value_array, Entity Exists(Current Array Element)));
				If(Global.next_boss);
					Move Player to Team(Global.next_boss, Team 2, -1);
				Else;
					Move Player to Team(Random Value In Array(Remove From Array(All Players(Team 1), Global.last_boss)), Team 2, -1);
				End;
				Global.max_number_talents = 1;
				Move Player to Team(Players In Slot(0, Team 2), Team 1, -1);
				Wait(1.904, Ignore Condition);
			End;
			Wait(0.032, Ignore Condition);
		End;
	}
}

rule("(Start / Restart) Match")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Waiting For Players == True;
		Number Of Players(Team 1) >= 4;
		Number Of Players(Team 2) > 0;
	}

	actions
	{
		Wait(3, Abort When False);
		Start Game Mode;
		While(True);
			Wait(3, Ignore Condition);
			Skip If(!Is Match Complete, 1);
			Restart Match;
		End;
	}
}

rule("Talents")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is In Setup == True;
	}

	actions
	{
		Wait Until(Has Spawned(Players In Slot(0, Team 2)), 5);
		Global.boss_player = Players In Slot(0, Team 2);
		Pause Match Time;
		Global.selected_talents = Empty Array;
		For Global Variable(iterator, 0, Count Of(Global.boss_talents_info), 1);
			Global.talents_text_position[Global.iterator] = Vector(X Component Of(Global.talents_menu_position), 0, -25 * Global.iterator);
			Create In-World Text(Global.boss_player, Global.talents_icon[Global.iterator], Global.talents_text_position[Global.iterator], 4,
				Do Not Clip, Visible To, Color(White), Default Visibility);
			Global.talents_text_id[Global.iterator] = Last Text ID;
			Create Effect(Global.boss_player, Good Aura, Array Contains(Global.selected_talents, Evaluate Once(Global.iterator)) ? Color(Green)
				: (Count Of(Global.selected_talents) == Global.max_number_talents ? Color(Red) : Color(Violet)),
				Global.talents_text_position[Global.iterator] + Up * 4.250, 10, Visible To and Color);
			Global.talents_effect_id[Global.iterator] = Last Created Entity;
		End;
		Wait(0.096, Ignore Condition);
		Global.right_position = -12.500 * Count Of(Global.boss_talents_info) + 12.500 * Count Of(Filtered Array(All Players(Team 1),
			Has Spawned(Current Array Element)));
		For Global Variable(iterator, 0, Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element))), 1);
			Create In-World Text(Global.boss_player, Hero Icon String(Hero Of(Filtered Array(All Players(Team 1), Has Spawned(
				Current Array Element))[Evaluate Once(Global.iterator)])), Vector(X Component Of(Global.talents_menu_position), Y Component Of(
				Global.talents_menu_position) + 30, Global.right_position - 25 * Global.iterator), 3.150, Do Not Clip, Visible To and String,
				Color(White), Default Visibility);
			Global.talents_text_id[Count Of(Global.boss_talents_info) + 4 + Global.iterator] = Last Text ID;
		End;
		Create In-World Text(Absolute Value(Horizontal Facing Angle Of(Global.boss_player)) <= 12.500 * Count Of(Global.boss_talents_info)
			&& Absolute Value(Vertical Facing Angle Of(Global.boss_player) + 0) <= 12.500 ? Global.boss_player : Empty Array,
			Global.boss_talents_info[Max(0, Min(Count Of(Global.boss_talents_info) - 1, Round To Integer((Horizontal Facing Angle Of(
			Global.boss_player) + 12.500 * Count Of(Global.boss_talents_info)) / 25, Down)))], Global.talents_menu_position + Down * 40,
			2.500, Do Not Clip, Visible To and String, Color(Yellow), Default Visibility);
		Global.talents_text_id[Count Of(Global.boss_talents_info)] = Last Text ID;
		Create In-World Text(Global.boss_player, Custom String("â²"), Update Every Frame(
			Global.talents_menu_position + Horizontal Facing Angle Of(Global.boss_player) * Backward + (Vertical Facing Angle Of(
			Global.boss_player) + 1.100) * Down), 3, Do Not Clip, Visible To Position and Color, Custom Color(255,
			175 + 80 * Sine From Degrees(Total Time Elapsed * 120), False, 255), Default Visibility);
		Global.talents_text_id[Count Of(Global.boss_talents_info) + 1] = Last Text ID;
		Set Aim Speed(Global.boss_player, 400);
		Disable Hero HUD(Global.boss_player);
		Disable Game Mode HUD(Global.boss_player);
		Set Status(Global.boss_player, Null, Rooted, 9999);
		Set Gravity(Global.boss_player, 0);
		Set Primary Fire Enabled(Global.boss_player, False);
		Set Secondary Fire Enabled(Global.boss_player, False);
		Set Ability 1 Enabled(Global.boss_player, False);
		Set Ability 2 Enabled(Global.boss_player, False);
		Set Ultimate Ability Enabled(Global.boss_player, False);
		Global.talents_timer = 6 + 1 * Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element)));
		Chase Global Variable At Rate(talents_timer, 0, 1, None);
		Create HUD Text(Global.boss_player, Null, Null, Custom String(" \n\n\n\n\n"), Top, 1, Null, Null, Null, Visible To,
			Default Visibility);
		Global.talents_text_id[Count Of(Global.boss_talents_info) + 2] = Last Text ID;
		Create Progress Bar HUD Text(Global.boss_player, Global.talents_timer / Evaluate Once(Global.talents_timer / 100),
			Global.max_number_talents == 1 ? Custom String("â¨Select a talent") : Custom String("â¨Select {0} talents",
			Global.max_number_talents), Top, 2, Color(Yellow), Color(Red), Visible To Values and Color, Default Visibility);
		Global.talents_text_id[Count Of(Global.boss_talents_info) + 3] = Last Text ID;
		Start Camera(Global.boss_player, 144 * Right + Global.talents_menu_position, Global.talents_menu_position, 0);
		Wait Until(Global.talents_timer <= 5 || !Entity Exists(Global.boss_player), 9999);
		Unpause Match Time;
		If(!Entity Exists(Global.boss_player));
			Abort;
		End;
		Wait Until(!Is In Setup, Global.talents_timer);
		Stop Chasing Global Variable(talents_timer);
		Global.talents_timer = 0;
		Destroy Effect(Global.talents_effect_id);
		For Global Variable(iterator, 0, Count Of(Global.boss_talents_info), 1);
			Destroy In-World Text(Global.talents_text_id[Global.iterator]);
		End;
		For Global Variable(iterator, 0, Number Of Slots(Team 1), 1);
			Destroy In-World Text(Global.talents_text_id[Count Of(Global.boss_talents_info) + 4 + Global.iterator]);
		End;
		Destroy In-World Text(Global.talents_text_id[Count Of(Global.boss_talents_info)]);
		Destroy In-World Text(Global.talents_text_id[Count Of(Global.boss_talents_info) + 1]);
		Destroy HUD Text(Global.talents_text_id[Count Of(Global.boss_talents_info) + 2]);
		Destroy Progress Bar HUD Text(Global.talents_text_id[Count Of(Global.boss_talents_info) + 3]);
		For Global Variable(iterator, Count Of(Global.selected_talents), Global.max_number_talents, 1);
			Global.selected_talents[Global.iterator] = Random Value In Array(Remove From Array(Mapped Array(Global.boss_talents_info,
				Current Array Index), Global.selected_talents));
		End;
		If(Array Contains(Global.selected_talents, 2));
			Global.resistance_multiplier = 0.667;
			Set Knockback Received(Global.boss_player, 100 / 0.700 * Global.resistance_multiplier);
		End;
		Wait(0.032, Ignore Condition);
		Stop Camera(Global.boss_player);
		Set Aim Speed(Global.boss_player, 100);
		Enable Hero HUD(Global.boss_player);
		Enable Game Mode HUD(Global.boss_player);
		Clear Status(Global.boss_player, Rooted);
		Set Gravity(Global.boss_player, 100);
		Set Primary Fire Enabled(Global.boss_player, True);
		Set Secondary Fire Enabled(Global.boss_player, True);
		Set Ultimate Ability Enabled(Global.boss_player, True);
		Set Facing(Global.boss_player, Forward, To World);
	}
}

rule("Talents | Select")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.talents_timer > 0;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Abort If(Absolute Value(Horizontal Facing Angle Of(Event Player)) > 12.500 * Count Of(Global.boss_talents_info) || Absolute Value(
			Vertical Facing Angle Of(Event Player) + 0) > 12.500);
		Global.index = Max(0, Min(Count Of(Global.boss_talents_info) - 1, Round To Integer((Horizontal Facing Angle Of(Event Player)
			+ 12.500 * Count Of(Global.boss_talents_info)) / 25, Down)));
		If(Global.max_number_talents == 1);
			Modify Global Variable(selected_talents, Remove From Array By Index, 0);
			Modify Global Variable(selected_talents, Append To Array, Global.index);
			Play Effect(Event Player, Soldier: 76 Sprint Start Sound, False, Event Player, 150);
		Else;
			If(Array Contains(Global.selected_talents, Global.index));
				Modify Global Variable(selected_talents, Remove From Array By Value, Global.index);
			Else If(Count Of(Global.selected_talents) < Global.max_number_talents);
				Modify Global Variable(selected_talents, Append To Array, Global.index);
			Else;
				Play Effect(Event Player, Explosion Sound, False, Right * 143 + Global.talents_menu_position, 50);
				Abort;
			End;
		End;
	}
}

rule("Teleport Check")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Using Ability 2(Players On Hero(Hero(Symmetra), Team 1)) == True;
		Array Contains(Array(Hero(Ana), Hero(Echo), Hero(Wrecking Ball), Hero(Zarya), Hero(Zenyatta)), Hero Of(Event Player)) == True;
		Health(Event Player) > 0;
	}

	actions
	{
		Event Player.position = Position Of(Event Player);
		Wait(0.016, Ignore Condition);
		If(Distance Between(Event Player.position, Position Of(Event Player)) >= 1);
			Event Player.teleportation = True;
			Wait(0.016, Ignore Condition);
		Else;
			Event Player.teleportation = False;
		End;
		Loop If Condition Is True;
	}
}

rule("Apply Custom Health | Subroutine")
{
	event
	{
		Subroutine;
		applyCustomHealth;
	}

	actions
	{
		"If the player is in spawn, teleport them out as they are invulnerable in spawn"
		If(Is In Spawn Room(Event Player));
			Start Camera(Event Player, Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player), 0.001);
			Wait(0.032, Ignore Condition);
			Event Player.stored_spawn_position = Position Of(Event Player);
			Teleport(Event Player, Position Of(Event Player) + Vector(0, 100, 0));
			Wait Until(!Is In Spawn Room(Event Player) && !Has Status(Event Player, Invincible) && !Has Status(Event Player, Unkillable), 1);
			Wait(0.016, Ignore Condition);
		End;
		"If the player is duplicating a hero, wait until Echo is no longer invulnerable"
		If(Is Duplicating(Event Player));
			Wait Until(!Has Status(Event Player, Invincible) && !Has Status(Event Player, Unkillable), 1);
			Wait(0.016, Ignore Condition);
		End;
		"# Applying Custom Health ##\r\n Apply an unkillable status so we don't accidentally kill the player"
		Set Status(Event Player, Event Player, Unkillable, 0.048);
		"Damage the player so they're at one health"
		Damage(Event Player, Null, 999999986991104.000);
		Wait(0.016, Ignore Condition);
		"Apply temporary base health to the player"
		Add Health Pool To Player(Event Player, Health, 999999986991104.000, True, True);
		Add Health Pool To Player(Event Player, Armor, 999999986991104.000, True, True);
		Add Health Pool To Player(Event Player, Shields, 999999986991104.000, True, True);
		Wait(0.016, Ignore Condition);
		"Remove temporary base health from the player"
		Remove All Health Pools From Player(Event Player);
		Wait(0.016, Ignore Condition);
		"Apply custom health pool to player"
		If(Event Player.health_normal > 0);
			Add Health Pool To Player(Event Player, Health, Max(1, Event Player.health_normal - 1), True, True);
		End;
		If(Event Player.health_armor > 0);
			Add Health Pool To Player(Event Player, Armor, Max(1, Event Player.health_armor), True, True);
		End;
		If(Event Player.health_shields > 0);
			Add Health Pool To Player(Event Player, Shields, Max(1, Event Player.health_shields), True, True);
		End;
		Heal(Event Player, Null, 999999986991104.000);
		"Teleport player back if they were in spawn."
		If(Event Player.stored_spawn_position != 1);
			Wait(0.016, Ignore Condition);
			Teleport(Event Player, Event Player.stored_spawn_position);
			Event Player.stored_spawn_position = Null;
			Stop Camera(Event Player);
		End;
	}
}

rule("Rein | Refresh Stat")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Is Dead(Event Player) == True;
	}

	actions
	{
		Wait(0.064, Abort When False);
		Event Player.ability_6 = 1;
	}
}
